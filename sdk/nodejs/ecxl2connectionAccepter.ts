// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * This resource can be imported using an existing ID
 *
 * ```sh
 *  $ pulumi import equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter example {existing_id}
 * ```
 */
export class ECXL2ConnectionAccepter extends pulumi.CustomResource {
    /**
     * Get an existing ECXL2ConnectionAccepter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ECXL2ConnectionAccepterState, opts?: pulumi.CustomResourceOptions): ECXL2ConnectionAccepter {
        return new ECXL2ConnectionAccepter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter';

    /**
     * Returns true if the given object is an instance of ECXL2ConnectionAccepter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ECXL2ConnectionAccepter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ECXL2ConnectionAccepter.__pulumiType;
    }

    /**
     * Access Key used to accept connection on provider side.
     */
    public readonly accessKey!: pulumi.Output<string>;
    /**
     * Identifier of a hosted Direct Connect connection on AWS side,
     * applicable for accepter resource with connections to AWS only.
     */
    public /*out*/ readonly awsConnectionId!: pulumi.Output<string>;
    /**
     * AWS Profile Name for retrieving credentials from.
     * shared credentials file
     */
    public readonly awsProfile!: pulumi.Output<string | undefined>;
    /**
     * Identifier of Layer 2 connection that will be accepted.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * Secret Key used to accept connection on provider side.
     */
    public readonly secretKey!: pulumi.Output<string>;

    /**
     * Create a ECXL2ConnectionAccepter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ECXL2ConnectionAccepterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ECXL2ConnectionAccepterArgs | ECXL2ConnectionAccepterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ECXL2ConnectionAccepterState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["awsConnectionId"] = state ? state.awsConnectionId : undefined;
            resourceInputs["awsProfile"] = state ? state.awsProfile : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
        } else {
            const args = argsOrState as ECXL2ConnectionAccepterArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["awsProfile"] = args ? args.awsProfile : undefined;
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["secretKey"] = args ? args.secretKey : undefined;
            resourceInputs["awsConnectionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ECXL2ConnectionAccepter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ECXL2ConnectionAccepter resources.
 */
export interface ECXL2ConnectionAccepterState {
    /**
     * Access Key used to accept connection on provider side.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Identifier of a hosted Direct Connect connection on AWS side,
     * applicable for accepter resource with connections to AWS only.
     */
    awsConnectionId?: pulumi.Input<string>;
    /**
     * AWS Profile Name for retrieving credentials from.
     * shared credentials file
     */
    awsProfile?: pulumi.Input<string>;
    /**
     * Identifier of Layer 2 connection that will be accepted.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * Secret Key used to accept connection on provider side.
     */
    secretKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ECXL2ConnectionAccepter resource.
 */
export interface ECXL2ConnectionAccepterArgs {
    /**
     * Access Key used to accept connection on provider side.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * AWS Profile Name for retrieving credentials from.
     * shared credentials file
     */
    awsProfile?: pulumi.Input<string>;
    /**
     * Identifier of Layer 2 connection that will be accepted.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Secret Key used to accept connection on provider side.
     */
    secretKey?: pulumi.Input<string>;
}
