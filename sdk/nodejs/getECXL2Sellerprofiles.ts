// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to get details of available Equinix Fabric layer 2 seller profiles. It is
 * possible to apply filtering criteria for returned list of profiles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const aws = pulumi.output(equinix.GetECXL2Sellerprofiles({
 *     metroCodes: [
 *         "SV",
 *         "DC",
 *     ],
 *     organizationGlobalName: "AWS",
 *     speedBands: [
 *         "1GB",
 *         "500MB",
 *     ],
 * }));
 * ```
 */
export function getECXL2Sellerprofiles(args?: GetECXL2SellerprofilesArgs, opts?: pulumi.InvokeOptions): Promise<GetECXL2SellerprofilesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("equinix:index/getECXL2Sellerprofiles:GetECXL2Sellerprofiles", {
        "metroCodes": args.metroCodes,
        "nameRegex": args.nameRegex,
        "organizationGlobalName": args.organizationGlobalName,
        "organizationName": args.organizationName,
        "speedBands": args.speedBands,
    }, opts);
}

/**
 * A collection of arguments for invoking GetECXL2Sellerprofiles.
 */
export interface GetECXL2SellerprofilesArgs {
    /**
     * List of metro codes of locations that should be served by resulting
     * profiles.
     */
    metroCodes?: string[];
    /**
     * A regex string to apply on returned seller profile names and filter
     * search results.
     */
    nameRegex?: string;
    /**
     * Name of seller's global organization.
     */
    organizationGlobalName?: string;
    /**
     * Name of seller's organization.
     */
    organizationName?: string;
    /**
     * List of speed bands that should be supported by resulting profiles.
     */
    speedBands?: string[];
}

/**
 * A collection of values returned by GetECXL2Sellerprofiles.
 */
export interface GetECXL2SellerprofilesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly metroCodes?: string[];
    readonly nameRegex?: string;
    readonly organizationGlobalName?: string;
    readonly organizationName?: string;
    /**
     * List of resulting profiles. Each element in the `profiles` list exports all
     * Service Profile Attributes.
     */
    readonly profiles: outputs.GetECXL2SellerprofilesProfile[];
    readonly speedBands?: string[];
}

export function getECXL2SellerprofilesOutput(args?: GetECXL2SellerprofilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetECXL2SellerprofilesResult> {
    return pulumi.output(args).apply(a => getECXL2Sellerprofiles(a, opts))
}

/**
 * A collection of arguments for invoking GetECXL2Sellerprofiles.
 */
export interface GetECXL2SellerprofilesOutputArgs {
    /**
     * List of metro codes of locations that should be served by resulting
     * profiles.
     */
    metroCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A regex string to apply on returned seller profile names and filter
     * search results.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * Name of seller's global organization.
     */
    organizationGlobalName?: pulumi.Input<string>;
    /**
     * Name of seller's organization.
     */
    organizationName?: pulumi.Input<string>;
    /**
     * List of speed bands that should be supported by resulting profiles.
     */
    speedBands?: pulumi.Input<pulumi.Input<string>[]>;
}
