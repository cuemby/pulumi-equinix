// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./ecxl2connection";
export * from "./ecxl2connectionAccepter";
export * from "./ecxl2serviceprofile";
export * from "./getECXL2Sellerprofile";
export * from "./getECXL2Sellerprofiles";
export * from "./getECXPort";
export * from "./getMetalConnection";
export * from "./getMetalDevice";
export * from "./getMetalDeviceBGPNeighbors";
export * from "./getMetalFacility";
export * from "./getMetalGateway";
export * from "./getMetalHardwareReservation";
export * from "./getMetalIPBlockRanges";
export * from "./getMetalMetro";
export * from "./getMetalOperatingSystem";
export * from "./getMetalOrganization";
export * from "./getMetalPlans";
export * from "./getMetalPort";
export * from "./getMetalPrecreatedIPBlock";
export * from "./getMetalProject";
export * from "./getMetalProjectSSHKey";
export * from "./getMetalReservedIPBlock";
export * from "./getMetalSpotMarketPrice";
export * from "./getMetalSpotMarketRequest";
export * from "./getMetalVRF";
export * from "./getMetalVirtualCircuit";
export * from "./getMetalVlan";
export * from "./getNetworkAccount";
export * from "./getNetworkDevice";
export * from "./getNetworkDevicePlatform";
export * from "./getNetworkDeviceSoftware";
export * from "./getNetworkDeviceType";
export * from "./metalBGPSession";
export * from "./metalConnection";
export * from "./metalDevice";
export * from "./metalDeviceNetworkType";
export * from "./metalGateway";
export * from "./metalIPAttachment";
export * from "./metalOrganization";
export * from "./metalPort";
export * from "./metalPortVlanAttachment";
export * from "./metalProject";
export * from "./metalProjectAPIKey";
export * from "./metalProjectSSHKey";
export * from "./metalReservedIPBlock";
export * from "./metalSSHKey";
export * from "./metalSpotMarketRequest";
export * from "./metalUserAPIKey";
export * from "./metalVRF";
export * from "./metalVirtualCircuit";
export * from "./metalVlan";
export * from "./networkACLTemplate";
export * from "./networkBGP";
export * from "./networkDevice";
export * from "./networkDeviceLink";
export * from "./networkSSHKey";
export * from "./networkSSHUser";
export * from "./provider";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ECXL2Connection } from "./ecxl2connection";
import { ECXL2ConnectionAccepter } from "./ecxl2connectionAccepter";
import { ECXL2Serviceprofile } from "./ecxl2serviceprofile";
import { MetalBGPSession } from "./metalBGPSession";
import { MetalConnection } from "./metalConnection";
import { MetalDevice } from "./metalDevice";
import { MetalDeviceNetworkType } from "./metalDeviceNetworkType";
import { MetalGateway } from "./metalGateway";
import { MetalIPAttachment } from "./metalIPAttachment";
import { MetalOrganization } from "./metalOrganization";
import { MetalPort } from "./metalPort";
import { MetalPortVlanAttachment } from "./metalPortVlanAttachment";
import { MetalProject } from "./metalProject";
import { MetalProjectAPIKey } from "./metalProjectAPIKey";
import { MetalProjectSSHKey } from "./metalProjectSSHKey";
import { MetalReservedIPBlock } from "./metalReservedIPBlock";
import { MetalSSHKey } from "./metalSSHKey";
import { MetalSpotMarketRequest } from "./metalSpotMarketRequest";
import { MetalUserAPIKey } from "./metalUserAPIKey";
import { MetalVRF } from "./metalVRF";
import { MetalVirtualCircuit } from "./metalVirtualCircuit";
import { MetalVlan } from "./metalVlan";
import { NetworkACLTemplate } from "./networkACLTemplate";
import { NetworkBGP } from "./networkBGP";
import { NetworkDevice } from "./networkDevice";
import { NetworkDeviceLink } from "./networkDeviceLink";
import { NetworkSSHKey } from "./networkSSHKey";
import { NetworkSSHUser } from "./networkSSHUser";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "equinix:index/eCXL2Connection:ECXL2Connection":
                return new ECXL2Connection(name, <any>undefined, { urn })
            case "equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter":
                return new ECXL2ConnectionAccepter(name, <any>undefined, { urn })
            case "equinix:index/eCXL2Serviceprofile:ECXL2Serviceprofile":
                return new ECXL2Serviceprofile(name, <any>undefined, { urn })
            case "equinix:index/metalBGPSession:MetalBGPSession":
                return new MetalBGPSession(name, <any>undefined, { urn })
            case "equinix:index/metalConnection:MetalConnection":
                return new MetalConnection(name, <any>undefined, { urn })
            case "equinix:index/metalDevice:MetalDevice":
                return new MetalDevice(name, <any>undefined, { urn })
            case "equinix:index/metalDeviceNetworkType:MetalDeviceNetworkType":
                return new MetalDeviceNetworkType(name, <any>undefined, { urn })
            case "equinix:index/metalGateway:MetalGateway":
                return new MetalGateway(name, <any>undefined, { urn })
            case "equinix:index/metalIPAttachment:MetalIPAttachment":
                return new MetalIPAttachment(name, <any>undefined, { urn })
            case "equinix:index/metalOrganization:MetalOrganization":
                return new MetalOrganization(name, <any>undefined, { urn })
            case "equinix:index/metalPort:MetalPort":
                return new MetalPort(name, <any>undefined, { urn })
            case "equinix:index/metalPortVlanAttachment:MetalPortVlanAttachment":
                return new MetalPortVlanAttachment(name, <any>undefined, { urn })
            case "equinix:index/metalProject:MetalProject":
                return new MetalProject(name, <any>undefined, { urn })
            case "equinix:index/metalProjectAPIKey:MetalProjectAPIKey":
                return new MetalProjectAPIKey(name, <any>undefined, { urn })
            case "equinix:index/metalProjectSSHKey:MetalProjectSSHKey":
                return new MetalProjectSSHKey(name, <any>undefined, { urn })
            case "equinix:index/metalReservedIPBlock:MetalReservedIPBlock":
                return new MetalReservedIPBlock(name, <any>undefined, { urn })
            case "equinix:index/metalSSHKey:MetalSSHKey":
                return new MetalSSHKey(name, <any>undefined, { urn })
            case "equinix:index/metalSpotMarketRequest:MetalSpotMarketRequest":
                return new MetalSpotMarketRequest(name, <any>undefined, { urn })
            case "equinix:index/metalUserAPIKey:MetalUserAPIKey":
                return new MetalUserAPIKey(name, <any>undefined, { urn })
            case "equinix:index/metalVRF:MetalVRF":
                return new MetalVRF(name, <any>undefined, { urn })
            case "equinix:index/metalVirtualCircuit:MetalVirtualCircuit":
                return new MetalVirtualCircuit(name, <any>undefined, { urn })
            case "equinix:index/metalVlan:MetalVlan":
                return new MetalVlan(name, <any>undefined, { urn })
            case "equinix:index/networkACLTemplate:NetworkACLTemplate":
                return new NetworkACLTemplate(name, <any>undefined, { urn })
            case "equinix:index/networkBGP:NetworkBGP":
                return new NetworkBGP(name, <any>undefined, { urn })
            case "equinix:index/networkDevice:NetworkDevice":
                return new NetworkDevice(name, <any>undefined, { urn })
            case "equinix:index/networkDeviceLink:NetworkDeviceLink":
                return new NetworkDeviceLink(name, <any>undefined, { urn })
            case "equinix:index/networkSSHKey:NetworkSSHKey":
                return new NetworkSSHKey(name, <any>undefined, { urn })
            case "equinix:index/networkSSHUser:NetworkSSHUser":
                return new NetworkSSHUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("equinix", "index/eCXL2Connection", _module)
pulumi.runtime.registerResourceModule("equinix", "index/eCXL2ConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("equinix", "index/eCXL2Serviceprofile", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalBGPSession", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalConnection", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalDevice", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalDeviceNetworkType", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalGateway", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalIPAttachment", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalOrganization", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalPort", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalPortVlanAttachment", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalProject", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalProjectAPIKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalProjectSSHKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalReservedIPBlock", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalSSHKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalSpotMarketRequest", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalUserAPIKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalVRF", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalVirtualCircuit", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalVlan", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkACLTemplate", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkBGP", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkDevice", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkDeviceLink", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkSSHKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkSSHUser", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("equinix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:equinix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
