// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get details of Equinix Fabric port with a given name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const tf-pri-dot1q = equinix.GetECXPort({
 *     name: "sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157",
 * });
 * export const id = tf_pri_dot1q.then(tf_pri_dot1q => tf_pri_dot1q.id);
 * ```
 */
export function getECXPort(args: GetECXPortArgs, opts?: pulumi.InvokeOptions): Promise<GetECXPortResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("equinix:index/getECXPort:GetECXPort", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking GetECXPort.
 */
export interface GetECXPortArgs {
    /**
     * Name of the port.
     */
    name: string;
}

/**
 * A collection of values returned by GetECXPort.
 */
export interface GetECXPortResult {
    /**
     * Port Bandwidth in bytes.
     */
    readonly bandwidth: string;
    /**
     * Boolean value that indicates whether the port supports unlimited connections. If
     * `false`, the port is a standard port with limited connections. If `true`, the port is an
     * `unlimited connections` port that allows multiple connections at no additional charge.
     */
    readonly buyout: boolean;
    /**
     * The VLAN encapsulation of the port (Dot1q or QinQ).
     */
    readonly encapsulation: string;
    /**
     * Port location Equinix Business Exchange (IBX).
     */
    readonly ibx: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Port location metro code.
     */
    readonly metroCode: string;
    readonly name: string;
    /**
     * The priority of the device (primary / secondary) where the port
     * resides.
     */
    readonly priority: string;
    /**
     * Port location region.
     */
    readonly region: string;
    /**
     * Port status that indicates whether a port has been assigned or is ready for
     * connection.
     */
    readonly status: string;
    /**
     * Unique identifier of the port.
     */
    readonly uuid: string;
}

export function getECXPortOutput(args: GetECXPortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetECXPortResult> {
    return pulumi.output(args).apply(a => getECXPort(a, opts))
}

/**
 * A collection of arguments for invoking GetECXPort.
 */
export interface GetECXPortOutputArgs {
    /**
     * Name of the port.
     */
    name: pulumi.Input<string>;
}
