// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Resource `equinix.ECXL2Connection` allows creation and management of Equinix Fabric
 * layer 2 connections.
 *
 * ## Example Usage
 * ### Non-redundant Connection from own Equinix Fabric Port
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const aws = equinix.GetECXL2Sellerprofile({
 *     name: "AWS Direct Connect",
 * });
 * const sv-qinq-pri = equinix.GetECXPort({
 *     name: "CX-SV5-NL-Dot1q-BO-10G-PRI",
 * });
 * const port_2_aws = new equinix.ECXL2Connection("port-2-aws", {
 *     profileUuid: aws.then(aws => aws.id),
 *     speed: 200,
 *     speedUnit: "MB",
 *     notifications: [
 *         "marry@equinix.com",
 *         "john@equinix.com",
 *     ],
 *     portUuid: sv_qinq_pri.then(sv_qinq_pri => sv_qinq_pri.id),
 *     vlanStag: 777,
 *     vlanCtag: 1000,
 *     sellerRegion: "us-west-1",
 *     sellerMetroCode: "SV",
 *     authorizationKey: "345742915919",
 * });
 * ```
 * ### Non-redundant Connection from Network Edge device
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const gcp-1 = equinix.GetECXL2Sellerprofile({
 *     name: "Google Cloud Partner Interconnect Zone 1",
 * });
 * const router_to_gcp = new equinix.ECXL2Connection("router-to-gcp", {
 *     profileUuid: gcp_1.then(gcp_1 => gcp_1.id),
 *     deviceUuid: equinix_network_device.myrouter.id,
 *     deviceInterfaceId: 5,
 *     speed: 100,
 *     speedUnit: "MB",
 *     notifications: [
 *         "john@equinix.com",
 *         "marry@equinix.com",
 *     ],
 *     sellerMetroCode: "SV",
 *     sellerRegion: "us-west1",
 *     authorizationKey: "4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1",
 * });
 * ```
 * ### Non-redundant Connection from an Equinix customer port using A-Side Service token
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const gcp = equinix.GetECXL2Sellerprofile({
 *     name: "Google Cloud Partner Interconnect Zone 1",
 * });
 * const token_to_gcp = new equinix.ECXL2Connection("token-to-gcp", {
 *     profileUuid: data.equinix_ecx_l2_sellerprofile["gcp-1"].id,
 *     serviceToken: "e9c22453-d3a7-4d5d-9112-d50173531392",
 *     speed: 100,
 *     speedUnit: "MB",
 *     notifications: [
 *         "john@equinix.com",
 *         "marry@equinix.com",
 *     ],
 *     sellerMetroCode: "SV",
 *     sellerRegion: "us-west1",
 *     authorizationKey: "4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1",
 * });
 * ```
 * ### Non-redundant Connection from own Equinix Fabric Port to an Equinix customer port using Z-Side Service token
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const sv-qinq-pri = equinix.GetECXPort({
 *     name: "CX-SV5-NL-Dot1q-BO-10G-PRI",
 * });
 * const port_to_token = new equinix.ECXL2Connection("port-to-token", {
 *     zsideServiceToken: "e9c22453-d3a7-4d5d-9112-d50173531392",
 *     speed: 200,
 *     speedUnit: "MB",
 *     notifications: [
 *         "john@equinix.com",
 *         "marry@equinix.com",
 *     ],
 *     sellerMetroCode: "FR",
 *     portUuid: sv_qinq_pri.then(sv_qinq_pri => sv_qinq_pri.id),
 *     vlanStag: 1000,
 * });
 * ```
 *
 * > **NOTE:** See Equinix Fabric connecting to the cloud
 * guide for more details on how to connect to a CSP.
 * ## Update operation behavior
 *
 * Update of most arguments will force replacement of a connection (including related redundant
 * connection in HA setup).
 *
 * Following arguments can be updated. **NOTE** that Equinix Fabric may still forbid updates depending
 * on current connection state, used service provider or number of updates requested during the day.
 *
 * * `name`
 * * `speed` and `speedUnit`
 *
 * ## Import
 *
 * into `vendor_token` but `service_token` and `zside_service_token` will remain empty. Equinix L2 connections can be imported using an existing `id`existing_connection_id='example-uuid-1'
 *
 * ```sh
 *  $ pulumi import equinix:index/eCXL2Connection:ECXL2Connection example ${existing_connection_id}
 * ```
 *
 *  (primary and secondary) into a single string separated by `:`. To import a redundant Equinix L2 connectionexisting_primary_connection_id='example-uuid-1' existing_secondary_connection_id='example-uuid-2'
 *
 * ```sh
 *  $ pulumi import equinix:index/eCXL2Connection:ECXL2Connection example ${existing_primary_connection_id}:${existing_secondary_connection_id}
 * ```
 */
export class ECXL2Connection extends pulumi.CustomResource {
    /**
     * Get an existing ECXL2Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ECXL2ConnectionState, opts?: pulumi.CustomResourceOptions): ECXL2Connection {
        return new ECXL2Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/eCXL2Connection:ECXL2Connection';

    /**
     * Returns true if the given object is an instance of ECXL2Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ECXL2Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ECXL2Connection.__pulumiType;
    }

    /**
     * One or more pending actions to complete connection provisioning.
     */
    public /*out*/ readonly actions!: pulumi.Output<outputs.ECXL2ConnectionAction[]>;
    /**
     * one or more additional information key-value objects
     */
    public readonly additionalInfos!: pulumi.Output<outputs.ECXL2ConnectionAdditionalInfo[] | undefined>;
    /**
     * Unique identifier authorizing Equinix to provision a connection
     * towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
     * encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
     * key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
     * more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
     */
    public readonly authorizationKey!: pulumi.Output<string>;
    /**
     * Applicable with `deviceUuid`, identifier of network interface
     * on a given device, used for a connection. If not specified then first available interface will be
     * selected.
     */
    public readonly deviceInterfaceId!: pulumi.Output<number | undefined>;
    /**
     * Unique identifier of
     * the Network Edge virtual device from which the connection would originate.
     */
    public readonly deviceUuid!: pulumi.Output<string | undefined>;
    /**
     * additional information key
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of peering to set up when connecting to Azure Express Route.
     * Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
     */
    public readonly namedTag!: pulumi.Output<string | undefined>;
    /**
     * A list of email addresses used for sending connection update
     * notifications.
     */
    public readonly notifications!: pulumi.Output<string[]>;
    /**
     * Unique identifier of
     * the Equinix Fabric Port from which the connection would originate.
     */
    public readonly portUuid!: pulumi.Output<string>;
    /**
     * Unique identifier of the service provider's profile.
     */
    public readonly profileUuid!: pulumi.Output<string>;
    /**
     * Connection provisioning status on service provider's side.
     */
    public /*out*/ readonly providerStatus!: pulumi.Output<string>;
    /**
     * Connection's purchase order number to reflect on the invoice
     */
    public readonly purchaseOrderNumber!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of group containing a primary and secondary connection.
     */
    public /*out*/ readonly redundancyGroup!: pulumi.Output<string>;
    /**
     * Connection redundancy type, applicable for HA connections. Valid values are
     * `PRIMARY`, `SECONDARY`.
     */
    public /*out*/ readonly redundancyType!: pulumi.Output<string>;
    /**
     * Unique identifier of the redundant connection, applicable for HA connections.
     */
    public /*out*/ readonly redundantUuid!: pulumi.Output<string>;
    /**
     * Definition of secondary connection for redundant, HA
     * connectivity. See Secondary Connection below for more details.
     */
    public readonly secondaryConnection!: pulumi.Output<outputs.ECXL2ConnectionSecondaryConnection | undefined>;
    /**
     * The metro code that denotes the connectionâ€™s remote/destination
     * side (z-side).
     */
    public readonly sellerMetroCode!: pulumi.Output<string>;
    /**
     * The region in which the seller port resides.
     */
    public readonly sellerRegion!: pulumi.Output<string | undefined>;
    /**
     * - A-side
     * service tokens authorize you to create a connection from a customer port, which created the token
     * for you, to a service profile or your own port.
     * More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
     */
    public readonly serviceToken!: pulumi.Output<string | undefined>;
    /**
     * Speed/Bandwidth to be allocated to the connection.
     */
    public readonly speed!: pulumi.Output<number>;
    /**
     * Unit of the speed/bandwidth to be allocated to the connection.
     */
    public readonly speedUnit!: pulumi.Output<string>;
    /**
     * Connection provisioning status on Equinix Fabric side.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Unique identifier of the connection.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The Equinix Fabric Token the connection was created with. Applicable if the
     * connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
     * * `secondaryConnection`:
     * * `zsidePortUuid`
     * * `zsideVlanStag`
     * * `zsideVlanCtag`
     * * `redundancyType`
     * * `redundancyGroup`
     * * `vendorToken`
     */
    public /*out*/ readonly vendorToken!: pulumi.Output<string>;
    /**
     * C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
     * \- 4094.
     */
    public readonly vlanCtag!: pulumi.Output<number | undefined>;
    /**
     * S-Tag/Outer-Tag of the connection - a numeric
     * character ranging from 2 - 4094.
     */
    public readonly vlanStag!: pulumi.Output<number>;
    /**
     * Unique identifier of the port on the remote/destination side
     * (z-side). Allows you to connect between your own ports or virtual devices across your company's
     * Equinix Fabric deployment, with no need for a private service profile.
     */
    public readonly zsidePortUuid!: pulumi.Output<string>;
    /**
     * - Z-side
     * service tokens authorize you to create a connection from your port or virtual device to a customer
     * port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
     * More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
     */
    public readonly zsideServiceToken!: pulumi.Output<string | undefined>;
    /**
     * C-Tag/Inner-Tag of the connection on the remote/destination
     * side (z-side) - a numeric character ranging from 2 - 4094.
     * `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
     * connection.
     */
    public readonly zsideVlanCtag!: pulumi.Output<number>;
    /**
     * S-Tag/Outer-Tag of the connection on the remote/destination
     * side (z-side) - a numeric character ranging from 2 - 4094.
     */
    public readonly zsideVlanStag!: pulumi.Output<number>;

    /**
     * Create a ECXL2Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ECXL2ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ECXL2ConnectionArgs | ECXL2ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ECXL2ConnectionState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["additionalInfos"] = state ? state.additionalInfos : undefined;
            resourceInputs["authorizationKey"] = state ? state.authorizationKey : undefined;
            resourceInputs["deviceInterfaceId"] = state ? state.deviceInterfaceId : undefined;
            resourceInputs["deviceUuid"] = state ? state.deviceUuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namedTag"] = state ? state.namedTag : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["portUuid"] = state ? state.portUuid : undefined;
            resourceInputs["profileUuid"] = state ? state.profileUuid : undefined;
            resourceInputs["providerStatus"] = state ? state.providerStatus : undefined;
            resourceInputs["purchaseOrderNumber"] = state ? state.purchaseOrderNumber : undefined;
            resourceInputs["redundancyGroup"] = state ? state.redundancyGroup : undefined;
            resourceInputs["redundancyType"] = state ? state.redundancyType : undefined;
            resourceInputs["redundantUuid"] = state ? state.redundantUuid : undefined;
            resourceInputs["secondaryConnection"] = state ? state.secondaryConnection : undefined;
            resourceInputs["sellerMetroCode"] = state ? state.sellerMetroCode : undefined;
            resourceInputs["sellerRegion"] = state ? state.sellerRegion : undefined;
            resourceInputs["serviceToken"] = state ? state.serviceToken : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["speedUnit"] = state ? state.speedUnit : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vendorToken"] = state ? state.vendorToken : undefined;
            resourceInputs["vlanCtag"] = state ? state.vlanCtag : undefined;
            resourceInputs["vlanStag"] = state ? state.vlanStag : undefined;
            resourceInputs["zsidePortUuid"] = state ? state.zsidePortUuid : undefined;
            resourceInputs["zsideServiceToken"] = state ? state.zsideServiceToken : undefined;
            resourceInputs["zsideVlanCtag"] = state ? state.zsideVlanCtag : undefined;
            resourceInputs["zsideVlanStag"] = state ? state.zsideVlanStag : undefined;
        } else {
            const args = argsOrState as ECXL2ConnectionArgs | undefined;
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.speed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'speed'");
            }
            if ((!args || args.speedUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'speedUnit'");
            }
            resourceInputs["additionalInfos"] = args ? args.additionalInfos : undefined;
            resourceInputs["authorizationKey"] = args ? args.authorizationKey : undefined;
            resourceInputs["deviceInterfaceId"] = args ? args.deviceInterfaceId : undefined;
            resourceInputs["deviceUuid"] = args ? args.deviceUuid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namedTag"] = args ? args.namedTag : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["portUuid"] = args ? args.portUuid : undefined;
            resourceInputs["profileUuid"] = args ? args.profileUuid : undefined;
            resourceInputs["purchaseOrderNumber"] = args ? args.purchaseOrderNumber : undefined;
            resourceInputs["secondaryConnection"] = args ? args.secondaryConnection : undefined;
            resourceInputs["sellerMetroCode"] = args ? args.sellerMetroCode : undefined;
            resourceInputs["sellerRegion"] = args ? args.sellerRegion : undefined;
            resourceInputs["serviceToken"] = args ? args.serviceToken : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["speedUnit"] = args ? args.speedUnit : undefined;
            resourceInputs["vlanCtag"] = args ? args.vlanCtag : undefined;
            resourceInputs["vlanStag"] = args ? args.vlanStag : undefined;
            resourceInputs["zsidePortUuid"] = args ? args.zsidePortUuid : undefined;
            resourceInputs["zsideServiceToken"] = args ? args.zsideServiceToken : undefined;
            resourceInputs["zsideVlanCtag"] = args ? args.zsideVlanCtag : undefined;
            resourceInputs["zsideVlanStag"] = args ? args.zsideVlanStag : undefined;
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["providerStatus"] = undefined /*out*/;
            resourceInputs["redundancyGroup"] = undefined /*out*/;
            resourceInputs["redundancyType"] = undefined /*out*/;
            resourceInputs["redundantUuid"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["vendorToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ECXL2Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ECXL2Connection resources.
 */
export interface ECXL2ConnectionState {
    /**
     * One or more pending actions to complete connection provisioning.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.ECXL2ConnectionAction>[]>;
    /**
     * one or more additional information key-value objects
     */
    additionalInfos?: pulumi.Input<pulumi.Input<inputs.ECXL2ConnectionAdditionalInfo>[]>;
    /**
     * Unique identifier authorizing Equinix to provision a connection
     * towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
     * encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
     * key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
     * more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
     */
    authorizationKey?: pulumi.Input<string>;
    /**
     * Applicable with `deviceUuid`, identifier of network interface
     * on a given device, used for a connection. If not specified then first available interface will be
     * selected.
     */
    deviceInterfaceId?: pulumi.Input<number>;
    /**
     * Unique identifier of
     * the Network Edge virtual device from which the connection would originate.
     */
    deviceUuid?: pulumi.Input<string>;
    /**
     * additional information key
     */
    name?: pulumi.Input<string>;
    /**
     * The type of peering to set up when connecting to Azure Express Route.
     * Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
     */
    namedTag?: pulumi.Input<string>;
    /**
     * A list of email addresses used for sending connection update
     * notifications.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of
     * the Equinix Fabric Port from which the connection would originate.
     */
    portUuid?: pulumi.Input<string>;
    /**
     * Unique identifier of the service provider's profile.
     */
    profileUuid?: pulumi.Input<string>;
    /**
     * Connection provisioning status on service provider's side.
     */
    providerStatus?: pulumi.Input<string>;
    /**
     * Connection's purchase order number to reflect on the invoice
     */
    purchaseOrderNumber?: pulumi.Input<string>;
    /**
     * Unique identifier of group containing a primary and secondary connection.
     */
    redundancyGroup?: pulumi.Input<string>;
    /**
     * Connection redundancy type, applicable for HA connections. Valid values are
     * `PRIMARY`, `SECONDARY`.
     */
    redundancyType?: pulumi.Input<string>;
    /**
     * Unique identifier of the redundant connection, applicable for HA connections.
     */
    redundantUuid?: pulumi.Input<string>;
    /**
     * Definition of secondary connection for redundant, HA
     * connectivity. See Secondary Connection below for more details.
     */
    secondaryConnection?: pulumi.Input<inputs.ECXL2ConnectionSecondaryConnection>;
    /**
     * The metro code that denotes the connectionâ€™s remote/destination
     * side (z-side).
     */
    sellerMetroCode?: pulumi.Input<string>;
    /**
     * The region in which the seller port resides.
     */
    sellerRegion?: pulumi.Input<string>;
    /**
     * - A-side
     * service tokens authorize you to create a connection from a customer port, which created the token
     * for you, to a service profile or your own port.
     * More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
     */
    serviceToken?: pulumi.Input<string>;
    /**
     * Speed/Bandwidth to be allocated to the connection.
     */
    speed?: pulumi.Input<number>;
    /**
     * Unit of the speed/bandwidth to be allocated to the connection.
     */
    speedUnit?: pulumi.Input<string>;
    /**
     * Connection provisioning status on Equinix Fabric side.
     */
    status?: pulumi.Input<string>;
    /**
     * Unique identifier of the connection.
     */
    uuid?: pulumi.Input<string>;
    /**
     * The Equinix Fabric Token the connection was created with. Applicable if the
     * connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
     * * `secondaryConnection`:
     * * `zsidePortUuid`
     * * `zsideVlanStag`
     * * `zsideVlanCtag`
     * * `redundancyType`
     * * `redundancyGroup`
     * * `vendorToken`
     */
    vendorToken?: pulumi.Input<string>;
    /**
     * C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
     * \- 4094.
     */
    vlanCtag?: pulumi.Input<number>;
    /**
     * S-Tag/Outer-Tag of the connection - a numeric
     * character ranging from 2 - 4094.
     */
    vlanStag?: pulumi.Input<number>;
    /**
     * Unique identifier of the port on the remote/destination side
     * (z-side). Allows you to connect between your own ports or virtual devices across your company's
     * Equinix Fabric deployment, with no need for a private service profile.
     */
    zsidePortUuid?: pulumi.Input<string>;
    /**
     * - Z-side
     * service tokens authorize you to create a connection from your port or virtual device to a customer
     * port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
     * More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
     */
    zsideServiceToken?: pulumi.Input<string>;
    /**
     * C-Tag/Inner-Tag of the connection on the remote/destination
     * side (z-side) - a numeric character ranging from 2 - 4094.
     * `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
     * connection.
     */
    zsideVlanCtag?: pulumi.Input<number>;
    /**
     * S-Tag/Outer-Tag of the connection on the remote/destination
     * side (z-side) - a numeric character ranging from 2 - 4094.
     */
    zsideVlanStag?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ECXL2Connection resource.
 */
export interface ECXL2ConnectionArgs {
    /**
     * one or more additional information key-value objects
     */
    additionalInfos?: pulumi.Input<pulumi.Input<inputs.ECXL2ConnectionAdditionalInfo>[]>;
    /**
     * Unique identifier authorizing Equinix to provision a connection
     * towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
     * encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
     * key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
     * more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
     */
    authorizationKey?: pulumi.Input<string>;
    /**
     * Applicable with `deviceUuid`, identifier of network interface
     * on a given device, used for a connection. If not specified then first available interface will be
     * selected.
     */
    deviceInterfaceId?: pulumi.Input<number>;
    /**
     * Unique identifier of
     * the Network Edge virtual device from which the connection would originate.
     */
    deviceUuid?: pulumi.Input<string>;
    /**
     * additional information key
     */
    name?: pulumi.Input<string>;
    /**
     * The type of peering to set up when connecting to Azure Express Route.
     * Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
     */
    namedTag?: pulumi.Input<string>;
    /**
     * A list of email addresses used for sending connection update
     * notifications.
     */
    notifications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of
     * the Equinix Fabric Port from which the connection would originate.
     */
    portUuid?: pulumi.Input<string>;
    /**
     * Unique identifier of the service provider's profile.
     */
    profileUuid?: pulumi.Input<string>;
    /**
     * Connection's purchase order number to reflect on the invoice
     */
    purchaseOrderNumber?: pulumi.Input<string>;
    /**
     * Definition of secondary connection for redundant, HA
     * connectivity. See Secondary Connection below for more details.
     */
    secondaryConnection?: pulumi.Input<inputs.ECXL2ConnectionSecondaryConnection>;
    /**
     * The metro code that denotes the connectionâ€™s remote/destination
     * side (z-side).
     */
    sellerMetroCode?: pulumi.Input<string>;
    /**
     * The region in which the seller port resides.
     */
    sellerRegion?: pulumi.Input<string>;
    /**
     * - A-side
     * service tokens authorize you to create a connection from a customer port, which created the token
     * for you, to a service profile or your own port.
     * More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
     */
    serviceToken?: pulumi.Input<string>;
    /**
     * Speed/Bandwidth to be allocated to the connection.
     */
    speed: pulumi.Input<number>;
    /**
     * Unit of the speed/bandwidth to be allocated to the connection.
     */
    speedUnit: pulumi.Input<string>;
    /**
     * C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
     * \- 4094.
     */
    vlanCtag?: pulumi.Input<number>;
    /**
     * S-Tag/Outer-Tag of the connection - a numeric
     * character ranging from 2 - 4094.
     */
    vlanStag?: pulumi.Input<number>;
    /**
     * Unique identifier of the port on the remote/destination side
     * (z-side). Allows you to connect between your own ports or virtual devices across your company's
     * Equinix Fabric deployment, with no need for a private service profile.
     */
    zsidePortUuid?: pulumi.Input<string>;
    /**
     * - Z-side
     * service tokens authorize you to create a connection from your port or virtual device to a customer
     * port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
     * More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
     */
    zsideServiceToken?: pulumi.Input<string>;
    /**
     * C-Tag/Inner-Tag of the connection on the remote/destination
     * side (z-side) - a numeric character ranging from 2 - 4094.
     * `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
     * connection.
     */
    zsideVlanCtag?: pulumi.Input<number>;
    /**
     * S-Tag/Outer-Tag of the connection on the remote/destination
     * side (z-side) - a numeric character ranging from 2 - 4094.
     */
    zsideVlanStag?: pulumi.Input<number>;
}
