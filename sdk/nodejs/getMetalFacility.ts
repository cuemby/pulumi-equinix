// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides an Equinix Metal facility datasource.
 */
export function getMetalFacility(args: GetMetalFacilityArgs, opts?: pulumi.InvokeOptions): Promise<GetMetalFacilityResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("equinix:index/getMetalFacility:GetMetalFacility", {
        "capacities": args.capacities,
        "code": args.code,
        "featuresRequireds": args.featuresRequireds,
    }, opts);
}

/**
 * A collection of arguments for invoking GetMetalFacility.
 */
export interface GetMetalFacilityArgs {
    /**
     * One or more device plans for which the facility must have capacity.
     */
    capacities?: inputs.GetMetalFacilityCapacity[];
    /**
     * The facility code to search for facilities.
     */
    code: string;
    /**
     * Set of feature strings that the facility must have. Some
     * possible values are `baremetal`, `ibx`, `storage`, `globalIpv4`, `backendTransfer`, `layer2`.
     */
    featuresRequireds?: string[];
}

/**
 * A collection of values returned by GetMetalFacility.
 */
export interface GetMetalFacilityResult {
    readonly capacities?: outputs.GetMetalFacilityCapacity[];
    readonly code: string;
    /**
     * The features of the facility.
     */
    readonly features: string[];
    readonly featuresRequireds?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The metro code the facility is part of.
     */
    readonly metro: string;
    /**
     * The name of the facility.
     */
    readonly name: string;
}

export function getMetalFacilityOutput(args: GetMetalFacilityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetalFacilityResult> {
    return pulumi.output(args).apply(a => getMetalFacility(a, opts))
}

/**
 * A collection of arguments for invoking GetMetalFacility.
 */
export interface GetMetalFacilityOutputArgs {
    /**
     * One or more device plans for which the facility must have capacity.
     */
    capacities?: pulumi.Input<pulumi.Input<inputs.GetMetalFacilityCapacityArgs>[]>;
    /**
     * The facility code to search for facilities.
     */
    code: pulumi.Input<string>;
    /**
     * Set of feature strings that the facility must have. Some
     * possible values are `baremetal`, `ibx`, `storage`, `globalIpv4`, `backendTransfer`, `layer2`.
     */
    featuresRequireds?: pulumi.Input<pulumi.Input<string>[]>;
}
