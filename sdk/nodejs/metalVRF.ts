// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this resource to manage a VRF.
 *
 * > VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
 *
 * ## Import
 *
 * This resource can be imported using an existing VRF ID
 *
 * ```sh
 *  $ pulumi import equinix:index/metalVRF:MetalVRF equinix_metal_vrf {existing_id}
 * ```
 */
export class MetalVRF extends pulumi.CustomResource {
    /**
     * Get an existing MetalVRF resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetalVRFState, opts?: pulumi.CustomResourceOptions): MetalVRF {
        return new MetalVRF(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/metalVRF:MetalVRF';

    /**
     * Returns true if the given object is an instance of MetalVRF.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetalVRF {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetalVRF.__pulumiType;
    }

    /**
     * Description of the VRF.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     */
    public readonly ipRanges!: pulumi.Output<string[] | undefined>;
    /**
     * The 4-byte ASN set on the VRF.
     */
    public readonly localAsn!: pulumi.Output<number>;
    /**
     * Metro ID or Code where the VRF will be deployed.
     */
    public readonly metro!: pulumi.Output<string>;
    /**
     * User-supplied name of the VRF, unique to the project
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID where the VRF will be deployed.
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a MetalVRF resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetalVRFArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetalVRFArgs | MetalVRFState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetalVRFState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["localAsn"] = state ? state.localAsn : undefined;
            resourceInputs["metro"] = state ? state.metro : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as MetalVRFArgs | undefined;
            if ((!args || args.metro === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metro'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["localAsn"] = args ? args.localAsn : undefined;
            resourceInputs["metro"] = args ? args.metro : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetalVRF.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetalVRF resources.
 */
export interface MetalVRFState {
    /**
     * Description of the VRF.
     */
    description?: pulumi.Input<string>;
    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     */
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The 4-byte ASN set on the VRF.
     */
    localAsn?: pulumi.Input<number>;
    /**
     * Metro ID or Code where the VRF will be deployed.
     */
    metro?: pulumi.Input<string>;
    /**
     * User-supplied name of the VRF, unique to the project
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID where the VRF will be deployed.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetalVRF resource.
 */
export interface MetalVRFArgs {
    /**
     * Description of the VRF.
     */
    description?: pulumi.Input<string>;
    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     */
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The 4-byte ASN set on the VRF.
     */
    localAsn?: pulumi.Input<number>;
    /**
     * Metro ID or Code where the VRF will be deployed.
     */
    metro: pulumi.Input<string>;
    /**
     * User-supplied name of the VRF, unique to the project
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID where the VRF will be deployed.
     */
    projectId: pulumi.Input<string>;
}
