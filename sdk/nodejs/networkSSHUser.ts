// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource `equinix.NetworkSSHUser` allows creation and management of Equinix Network
 * Edge SSH users.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@cuemby/equinix";
 *
 * // Create SSH user with password auth method and associate it with
 * // two virtual network devices
 * const john = new equinix.NetworkSSHUser("john", {
 *     username: "john",
 *     password: "secret",
 *     deviceIds: [
 *         equinix_ne_device["csr1000v-ha"].uuid,
 *         equinix_ne_device["csr1000v-ha"].redundant_uuid,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using an existing ID
 *
 * ```sh
 *  $ pulumi import equinix:index/networkSSHUser:NetworkSSHUser example {existing_id}
 * ```
 */
export class NetworkSSHUser extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSSHUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSSHUserState, opts?: pulumi.CustomResourceOptions): NetworkSSHUser {
        return new NetworkSSHUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/networkSSHUser:NetworkSSHUser';

    /**
     * Returns true if the given object is an instance of NetworkSSHUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSSHUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSSHUser.__pulumiType;
    }

    /**
     * list of device identifiers to which user will have access.
     */
    public readonly deviceIds!: pulumi.Output<string[]>;
    /**
     * SSH user password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * SSH user login name.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * SSH user unique identifier.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetworkSSHUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSSHUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSSHUserArgs | NetworkSSHUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSSHUserState | undefined;
            resourceInputs["deviceIds"] = state ? state.deviceIds : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetworkSSHUserArgs | undefined;
            if ((!args || args.deviceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceIds'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["deviceIds"] = args ? args.deviceIds : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSSHUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkSSHUser resources.
 */
export interface NetworkSSHUserState {
    /**
     * list of device identifiers to which user will have access.
     */
    deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SSH user password.
     */
    password?: pulumi.Input<string>;
    /**
     * SSH user login name.
     */
    username?: pulumi.Input<string>;
    /**
     * SSH user unique identifier.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkSSHUser resource.
 */
export interface NetworkSSHUserArgs {
    /**
     * list of device identifiers to which user will have access.
     */
    deviceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SSH user password.
     */
    password: pulumi.Input<string>;
    /**
     * SSH user login name.
     */
    username: pulumi.Input<string>;
}
