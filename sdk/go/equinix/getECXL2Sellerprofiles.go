// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get details of available Equinix Fabric layer 2 seller profiles. It is
// possible to apply filtering criteria for returned list of profiles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.GetECXL2Sellerprofiles(ctx, &GetECXL2SellerprofilesArgs{
// 			MetroCodes: []string{
// 				"SV",
// 				"DC",
// 			},
// 			OrganizationGlobalName: pulumi.StringRef("AWS"),
// 			SpeedBands: []string{
// 				"1GB",
// 				"500MB",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetECXL2Sellerprofiles(ctx *pulumi.Context, args *GetECXL2SellerprofilesArgs, opts ...pulumi.InvokeOption) (*GetECXL2SellerprofilesResult, error) {
	var rv GetECXL2SellerprofilesResult
	err := ctx.Invoke("equinix:index/getECXL2Sellerprofiles:GetECXL2Sellerprofiles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetECXL2Sellerprofiles.
type GetECXL2SellerprofilesArgs struct {
	// List of metro codes of locations that should be served by resulting
	// profiles.
	MetroCodes []string `pulumi:"metroCodes"`
	// A regex string to apply on returned seller profile names and filter
	// search results.
	NameRegex *string `pulumi:"nameRegex"`
	// Name of seller's global organization.
	OrganizationGlobalName *string `pulumi:"organizationGlobalName"`
	// Name of seller's organization.
	OrganizationName *string `pulumi:"organizationName"`
	// List of speed bands that should be supported by resulting profiles.
	SpeedBands []string `pulumi:"speedBands"`
}

// A collection of values returned by GetECXL2Sellerprofiles.
type GetECXL2SellerprofilesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                     string   `pulumi:"id"`
	MetroCodes             []string `pulumi:"metroCodes"`
	NameRegex              *string  `pulumi:"nameRegex"`
	OrganizationGlobalName *string  `pulumi:"organizationGlobalName"`
	OrganizationName       *string  `pulumi:"organizationName"`
	// List of resulting profiles. Each element in the `profiles` list exports all
	// Service Profile Attributes.
	Profiles   []GetECXL2SellerprofilesProfile `pulumi:"profiles"`
	SpeedBands []string                        `pulumi:"speedBands"`
}

func GetECXL2SellerprofilesOutput(ctx *pulumi.Context, args GetECXL2SellerprofilesOutputArgs, opts ...pulumi.InvokeOption) GetECXL2SellerprofilesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetECXL2SellerprofilesResult, error) {
			args := v.(GetECXL2SellerprofilesArgs)
			r, err := GetECXL2Sellerprofiles(ctx, &args, opts...)
			var s GetECXL2SellerprofilesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetECXL2SellerprofilesResultOutput)
}

// A collection of arguments for invoking GetECXL2Sellerprofiles.
type GetECXL2SellerprofilesOutputArgs struct {
	// List of metro codes of locations that should be served by resulting
	// profiles.
	MetroCodes pulumi.StringArrayInput `pulumi:"metroCodes"`
	// A regex string to apply on returned seller profile names and filter
	// search results.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// Name of seller's global organization.
	OrganizationGlobalName pulumi.StringPtrInput `pulumi:"organizationGlobalName"`
	// Name of seller's organization.
	OrganizationName pulumi.StringPtrInput `pulumi:"organizationName"`
	// List of speed bands that should be supported by resulting profiles.
	SpeedBands pulumi.StringArrayInput `pulumi:"speedBands"`
}

func (GetECXL2SellerprofilesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesArgs)(nil)).Elem()
}

// A collection of values returned by GetECXL2Sellerprofiles.
type GetECXL2SellerprofilesResultOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesResult)(nil)).Elem()
}

func (o GetECXL2SellerprofilesResultOutput) ToGetECXL2SellerprofilesResultOutput() GetECXL2SellerprofilesResultOutput {
	return o
}

func (o GetECXL2SellerprofilesResultOutput) ToGetECXL2SellerprofilesResultOutputWithContext(ctx context.Context) GetECXL2SellerprofilesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetECXL2SellerprofilesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesResultOutput) MetroCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) []string { return v.MetroCodes }).(pulumi.StringArrayOutput)
}

func (o GetECXL2SellerprofilesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetECXL2SellerprofilesResultOutput) OrganizationGlobalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) *string { return v.OrganizationGlobalName }).(pulumi.StringPtrOutput)
}

func (o GetECXL2SellerprofilesResultOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) *string { return v.OrganizationName }).(pulumi.StringPtrOutput)
}

// List of resulting profiles. Each element in the `profiles` list exports all
// Service Profile Attributes.
func (o GetECXL2SellerprofilesResultOutput) Profiles() GetECXL2SellerprofilesProfileArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) []GetECXL2SellerprofilesProfile { return v.Profiles }).(GetECXL2SellerprofilesProfileArrayOutput)
}

func (o GetECXL2SellerprofilesResultOutput) SpeedBands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesResult) []string { return v.SpeedBands }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetECXL2SellerprofilesResultOutput{})
}
