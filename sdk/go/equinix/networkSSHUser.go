// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `NetworkSSHUser` allows creation and management of Equinix Network
// Edge SSH users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.NewNetworkSSHUser(ctx, "john", &equinix.NetworkSSHUserArgs{
// 			Username: pulumi.String("john"),
// 			Password: pulumi.String("secret"),
// 			DeviceIds: pulumi.StringArray{
// 				pulumi.Any(equinix_ne_device.Csr1000v - ha.Uuid),
// 				pulumi.Any(equinix_ne_device.Csr1000v - ha.Redundant_uuid),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/networkSSHUser:NetworkSSHUser example {existing_id}
// ```
type NetworkSSHUser struct {
	pulumi.CustomResourceState

	// list of device identifiers to which user will have access.
	DeviceIds pulumi.StringArrayOutput `pulumi:"deviceIds"`
	// SSH user password.
	Password pulumi.StringOutput `pulumi:"password"`
	// SSH user login name.
	Username pulumi.StringOutput `pulumi:"username"`
	// SSH user unique identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewNetworkSSHUser registers a new resource with the given unique name, arguments, and options.
func NewNetworkSSHUser(ctx *pulumi.Context,
	name string, args *NetworkSSHUserArgs, opts ...pulumi.ResourceOption) (*NetworkSSHUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceIds == nil {
		return nil, errors.New("invalid value for required argument 'DeviceIds'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource NetworkSSHUser
	err := ctx.RegisterResource("equinix:index/networkSSHUser:NetworkSSHUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSSHUser gets an existing NetworkSSHUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSSHUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSSHUserState, opts ...pulumi.ResourceOption) (*NetworkSSHUser, error) {
	var resource NetworkSSHUser
	err := ctx.ReadResource("equinix:index/networkSSHUser:NetworkSSHUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSSHUser resources.
type networkSSHUserState struct {
	// list of device identifiers to which user will have access.
	DeviceIds []string `pulumi:"deviceIds"`
	// SSH user password.
	Password *string `pulumi:"password"`
	// SSH user login name.
	Username *string `pulumi:"username"`
	// SSH user unique identifier.
	Uuid *string `pulumi:"uuid"`
}

type NetworkSSHUserState struct {
	// list of device identifiers to which user will have access.
	DeviceIds pulumi.StringArrayInput
	// SSH user password.
	Password pulumi.StringPtrInput
	// SSH user login name.
	Username pulumi.StringPtrInput
	// SSH user unique identifier.
	Uuid pulumi.StringPtrInput
}

func (NetworkSSHUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSSHUserState)(nil)).Elem()
}

type networkSSHUserArgs struct {
	// list of device identifiers to which user will have access.
	DeviceIds []string `pulumi:"deviceIds"`
	// SSH user password.
	Password string `pulumi:"password"`
	// SSH user login name.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a NetworkSSHUser resource.
type NetworkSSHUserArgs struct {
	// list of device identifiers to which user will have access.
	DeviceIds pulumi.StringArrayInput
	// SSH user password.
	Password pulumi.StringInput
	// SSH user login name.
	Username pulumi.StringInput
}

func (NetworkSSHUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSSHUserArgs)(nil)).Elem()
}

type NetworkSSHUserInput interface {
	pulumi.Input

	ToNetworkSSHUserOutput() NetworkSSHUserOutput
	ToNetworkSSHUserOutputWithContext(ctx context.Context) NetworkSSHUserOutput
}

func (*NetworkSSHUser) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSSHUser)(nil)).Elem()
}

func (i *NetworkSSHUser) ToNetworkSSHUserOutput() NetworkSSHUserOutput {
	return i.ToNetworkSSHUserOutputWithContext(context.Background())
}

func (i *NetworkSSHUser) ToNetworkSSHUserOutputWithContext(ctx context.Context) NetworkSSHUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSSHUserOutput)
}

// NetworkSSHUserArrayInput is an input type that accepts NetworkSSHUserArray and NetworkSSHUserArrayOutput values.
// You can construct a concrete instance of `NetworkSSHUserArrayInput` via:
//
//          NetworkSSHUserArray{ NetworkSSHUserArgs{...} }
type NetworkSSHUserArrayInput interface {
	pulumi.Input

	ToNetworkSSHUserArrayOutput() NetworkSSHUserArrayOutput
	ToNetworkSSHUserArrayOutputWithContext(context.Context) NetworkSSHUserArrayOutput
}

type NetworkSSHUserArray []NetworkSSHUserInput

func (NetworkSSHUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSSHUser)(nil)).Elem()
}

func (i NetworkSSHUserArray) ToNetworkSSHUserArrayOutput() NetworkSSHUserArrayOutput {
	return i.ToNetworkSSHUserArrayOutputWithContext(context.Background())
}

func (i NetworkSSHUserArray) ToNetworkSSHUserArrayOutputWithContext(ctx context.Context) NetworkSSHUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSSHUserArrayOutput)
}

// NetworkSSHUserMapInput is an input type that accepts NetworkSSHUserMap and NetworkSSHUserMapOutput values.
// You can construct a concrete instance of `NetworkSSHUserMapInput` via:
//
//          NetworkSSHUserMap{ "key": NetworkSSHUserArgs{...} }
type NetworkSSHUserMapInput interface {
	pulumi.Input

	ToNetworkSSHUserMapOutput() NetworkSSHUserMapOutput
	ToNetworkSSHUserMapOutputWithContext(context.Context) NetworkSSHUserMapOutput
}

type NetworkSSHUserMap map[string]NetworkSSHUserInput

func (NetworkSSHUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSSHUser)(nil)).Elem()
}

func (i NetworkSSHUserMap) ToNetworkSSHUserMapOutput() NetworkSSHUserMapOutput {
	return i.ToNetworkSSHUserMapOutputWithContext(context.Background())
}

func (i NetworkSSHUserMap) ToNetworkSSHUserMapOutputWithContext(ctx context.Context) NetworkSSHUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSSHUserMapOutput)
}

type NetworkSSHUserOutput struct{ *pulumi.OutputState }

func (NetworkSSHUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSSHUser)(nil)).Elem()
}

func (o NetworkSSHUserOutput) ToNetworkSSHUserOutput() NetworkSSHUserOutput {
	return o
}

func (o NetworkSSHUserOutput) ToNetworkSSHUserOutputWithContext(ctx context.Context) NetworkSSHUserOutput {
	return o
}

// list of device identifiers to which user will have access.
func (o NetworkSSHUserOutput) DeviceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSSHUser) pulumi.StringArrayOutput { return v.DeviceIds }).(pulumi.StringArrayOutput)
}

// SSH user password.
func (o NetworkSSHUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSSHUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// SSH user login name.
func (o NetworkSSHUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSSHUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// SSH user unique identifier.
func (o NetworkSSHUserOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSSHUser) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type NetworkSSHUserArrayOutput struct{ *pulumi.OutputState }

func (NetworkSSHUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSSHUser)(nil)).Elem()
}

func (o NetworkSSHUserArrayOutput) ToNetworkSSHUserArrayOutput() NetworkSSHUserArrayOutput {
	return o
}

func (o NetworkSSHUserArrayOutput) ToNetworkSSHUserArrayOutputWithContext(ctx context.Context) NetworkSSHUserArrayOutput {
	return o
}

func (o NetworkSSHUserArrayOutput) Index(i pulumi.IntInput) NetworkSSHUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSSHUser {
		return vs[0].([]*NetworkSSHUser)[vs[1].(int)]
	}).(NetworkSSHUserOutput)
}

type NetworkSSHUserMapOutput struct{ *pulumi.OutputState }

func (NetworkSSHUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSSHUser)(nil)).Elem()
}

func (o NetworkSSHUserMapOutput) ToNetworkSSHUserMapOutput() NetworkSSHUserMapOutput {
	return o
}

func (o NetworkSSHUserMapOutput) ToNetworkSSHUserMapOutputWithContext(ctx context.Context) NetworkSSHUserMapOutput {
	return o
}

func (o NetworkSSHUserMapOutput) MapIndex(k pulumi.StringInput) NetworkSSHUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSSHUser {
		return vs[0].(map[string]*NetworkSSHUser)[vs[1].(string)]
	}).(NetworkSSHUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSSHUserInput)(nil)).Elem(), &NetworkSSHUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSSHUserArrayInput)(nil)).Elem(), NetworkSSHUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSSHUserMapInput)(nil)).Elem(), NetworkSSHUserMap{})
	pulumi.RegisterOutputType(NetworkSSHUserOutput{})
	pulumi.RegisterOutputType(NetworkSSHUserArrayOutput{})
	pulumi.RegisterOutputType(NetworkSSHUserMapOutput{})
}
