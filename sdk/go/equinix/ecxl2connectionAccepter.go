// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter example {existing_id}
// ```
type ECXL2ConnectionAccepter struct {
	pulumi.CustomResourceState

	// Access Key used to accept connection on provider side.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Identifier of a hosted Direct Connect connection on AWS side,
	// applicable for accepter resource with connections to AWS only.
	AwsConnectionId pulumi.StringOutput `pulumi:"awsConnectionId"`
	// AWS Profile Name for retrieving credentials from.
	// shared credentials file
	AwsProfile pulumi.StringPtrOutput `pulumi:"awsProfile"`
	// Identifier of Layer 2 connection that will be accepted.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Secret Key used to accept connection on provider side.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
}

// NewECXL2ConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewECXL2ConnectionAccepter(ctx *pulumi.Context,
	name string, args *ECXL2ConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*ECXL2ConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	var resource ECXL2ConnectionAccepter
	err := ctx.RegisterResource("equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetECXL2ConnectionAccepter gets an existing ECXL2ConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetECXL2ConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ECXL2ConnectionAccepterState, opts ...pulumi.ResourceOption) (*ECXL2ConnectionAccepter, error) {
	var resource ECXL2ConnectionAccepter
	err := ctx.ReadResource("equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ECXL2ConnectionAccepter resources.
type ecxl2connectionAccepterState struct {
	// Access Key used to accept connection on provider side.
	AccessKey *string `pulumi:"accessKey"`
	// Identifier of a hosted Direct Connect connection on AWS side,
	// applicable for accepter resource with connections to AWS only.
	AwsConnectionId *string `pulumi:"awsConnectionId"`
	// AWS Profile Name for retrieving credentials from.
	// shared credentials file
	AwsProfile *string `pulumi:"awsProfile"`
	// Identifier of Layer 2 connection that will be accepted.
	ConnectionId *string `pulumi:"connectionId"`
	// Secret Key used to accept connection on provider side.
	SecretKey *string `pulumi:"secretKey"`
}

type ECXL2ConnectionAccepterState struct {
	// Access Key used to accept connection on provider side.
	AccessKey pulumi.StringPtrInput
	// Identifier of a hosted Direct Connect connection on AWS side,
	// applicable for accepter resource with connections to AWS only.
	AwsConnectionId pulumi.StringPtrInput
	// AWS Profile Name for retrieving credentials from.
	// shared credentials file
	AwsProfile pulumi.StringPtrInput
	// Identifier of Layer 2 connection that will be accepted.
	ConnectionId pulumi.StringPtrInput
	// Secret Key used to accept connection on provider side.
	SecretKey pulumi.StringPtrInput
}

func (ECXL2ConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecxl2connectionAccepterState)(nil)).Elem()
}

type ecxl2connectionAccepterArgs struct {
	// Access Key used to accept connection on provider side.
	AccessKey *string `pulumi:"accessKey"`
	// AWS Profile Name for retrieving credentials from.
	// shared credentials file
	AwsProfile *string `pulumi:"awsProfile"`
	// Identifier of Layer 2 connection that will be accepted.
	ConnectionId string `pulumi:"connectionId"`
	// Secret Key used to accept connection on provider side.
	SecretKey *string `pulumi:"secretKey"`
}

// The set of arguments for constructing a ECXL2ConnectionAccepter resource.
type ECXL2ConnectionAccepterArgs struct {
	// Access Key used to accept connection on provider side.
	AccessKey pulumi.StringPtrInput
	// AWS Profile Name for retrieving credentials from.
	// shared credentials file
	AwsProfile pulumi.StringPtrInput
	// Identifier of Layer 2 connection that will be accepted.
	ConnectionId pulumi.StringInput
	// Secret Key used to accept connection on provider side.
	SecretKey pulumi.StringPtrInput
}

func (ECXL2ConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecxl2connectionAccepterArgs)(nil)).Elem()
}

type ECXL2ConnectionAccepterInput interface {
	pulumi.Input

	ToECXL2ConnectionAccepterOutput() ECXL2ConnectionAccepterOutput
	ToECXL2ConnectionAccepterOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterOutput
}

func (*ECXL2ConnectionAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2ConnectionAccepter)(nil)).Elem()
}

func (i *ECXL2ConnectionAccepter) ToECXL2ConnectionAccepterOutput() ECXL2ConnectionAccepterOutput {
	return i.ToECXL2ConnectionAccepterOutputWithContext(context.Background())
}

func (i *ECXL2ConnectionAccepter) ToECXL2ConnectionAccepterOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionAccepterOutput)
}

// ECXL2ConnectionAccepterArrayInput is an input type that accepts ECXL2ConnectionAccepterArray and ECXL2ConnectionAccepterArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionAccepterArrayInput` via:
//
//          ECXL2ConnectionAccepterArray{ ECXL2ConnectionAccepterArgs{...} }
type ECXL2ConnectionAccepterArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionAccepterArrayOutput() ECXL2ConnectionAccepterArrayOutput
	ToECXL2ConnectionAccepterArrayOutputWithContext(context.Context) ECXL2ConnectionAccepterArrayOutput
}

type ECXL2ConnectionAccepterArray []ECXL2ConnectionAccepterInput

func (ECXL2ConnectionAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECXL2ConnectionAccepter)(nil)).Elem()
}

func (i ECXL2ConnectionAccepterArray) ToECXL2ConnectionAccepterArrayOutput() ECXL2ConnectionAccepterArrayOutput {
	return i.ToECXL2ConnectionAccepterArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionAccepterArray) ToECXL2ConnectionAccepterArrayOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionAccepterArrayOutput)
}

// ECXL2ConnectionAccepterMapInput is an input type that accepts ECXL2ConnectionAccepterMap and ECXL2ConnectionAccepterMapOutput values.
// You can construct a concrete instance of `ECXL2ConnectionAccepterMapInput` via:
//
//          ECXL2ConnectionAccepterMap{ "key": ECXL2ConnectionAccepterArgs{...} }
type ECXL2ConnectionAccepterMapInput interface {
	pulumi.Input

	ToECXL2ConnectionAccepterMapOutput() ECXL2ConnectionAccepterMapOutput
	ToECXL2ConnectionAccepterMapOutputWithContext(context.Context) ECXL2ConnectionAccepterMapOutput
}

type ECXL2ConnectionAccepterMap map[string]ECXL2ConnectionAccepterInput

func (ECXL2ConnectionAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECXL2ConnectionAccepter)(nil)).Elem()
}

func (i ECXL2ConnectionAccepterMap) ToECXL2ConnectionAccepterMapOutput() ECXL2ConnectionAccepterMapOutput {
	return i.ToECXL2ConnectionAccepterMapOutputWithContext(context.Background())
}

func (i ECXL2ConnectionAccepterMap) ToECXL2ConnectionAccepterMapOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionAccepterMapOutput)
}

type ECXL2ConnectionAccepterOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2ConnectionAccepter)(nil)).Elem()
}

func (o ECXL2ConnectionAccepterOutput) ToECXL2ConnectionAccepterOutput() ECXL2ConnectionAccepterOutput {
	return o
}

func (o ECXL2ConnectionAccepterOutput) ToECXL2ConnectionAccepterOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterOutput {
	return o
}

// Access Key used to accept connection on provider side.
func (o ECXL2ConnectionAccepterOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2ConnectionAccepter) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// Identifier of a hosted Direct Connect connection on AWS side,
// applicable for accepter resource with connections to AWS only.
func (o ECXL2ConnectionAccepterOutput) AwsConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2ConnectionAccepter) pulumi.StringOutput { return v.AwsConnectionId }).(pulumi.StringOutput)
}

// AWS Profile Name for retrieving credentials from.
// shared credentials file
func (o ECXL2ConnectionAccepterOutput) AwsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionAccepter) pulumi.StringPtrOutput { return v.AwsProfile }).(pulumi.StringPtrOutput)
}

// Identifier of Layer 2 connection that will be accepted.
func (o ECXL2ConnectionAccepterOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2ConnectionAccepter) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Secret Key used to accept connection on provider side.
func (o ECXL2ConnectionAccepterOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2ConnectionAccepter) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

type ECXL2ConnectionAccepterArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECXL2ConnectionAccepter)(nil)).Elem()
}

func (o ECXL2ConnectionAccepterArrayOutput) ToECXL2ConnectionAccepterArrayOutput() ECXL2ConnectionAccepterArrayOutput {
	return o
}

func (o ECXL2ConnectionAccepterArrayOutput) ToECXL2ConnectionAccepterArrayOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterArrayOutput {
	return o
}

func (o ECXL2ConnectionAccepterArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ECXL2ConnectionAccepter {
		return vs[0].([]*ECXL2ConnectionAccepter)[vs[1].(int)]
	}).(ECXL2ConnectionAccepterOutput)
}

type ECXL2ConnectionAccepterMapOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECXL2ConnectionAccepter)(nil)).Elem()
}

func (o ECXL2ConnectionAccepterMapOutput) ToECXL2ConnectionAccepterMapOutput() ECXL2ConnectionAccepterMapOutput {
	return o
}

func (o ECXL2ConnectionAccepterMapOutput) ToECXL2ConnectionAccepterMapOutputWithContext(ctx context.Context) ECXL2ConnectionAccepterMapOutput {
	return o
}

func (o ECXL2ConnectionAccepterMapOutput) MapIndex(k pulumi.StringInput) ECXL2ConnectionAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ECXL2ConnectionAccepter {
		return vs[0].(map[string]*ECXL2ConnectionAccepter)[vs[1].(string)]
	}).(ECXL2ConnectionAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionAccepterInput)(nil)).Elem(), &ECXL2ConnectionAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionAccepterArrayInput)(nil)).Elem(), ECXL2ConnectionAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionAccepterMapInput)(nil)).Elem(), ECXL2ConnectionAccepterMap{})
	pulumi.RegisterOutputType(ECXL2ConnectionAccepterOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionAccepterArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionAccepterMapOutput{})
}
