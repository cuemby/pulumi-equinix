// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `ECXL2Connection` allows creation and management of Equinix Fabric
// layer 2 connections.
//
// ## Example Usage
// ### Non-redundant Connection from own Equinix Fabric Port
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		aws, err := equinix.GetECXL2Sellerprofile(ctx, &GetECXL2SellerprofileArgs{
// 			Name: pulumi.StringRef("AWS Direct Connect"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		sv_qinq_pri, err := equinix.GetECXPort(ctx, &GetECXPortArgs{
// 			Name: "CX-SV5-NL-Dot1q-BO-10G-PRI",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewECXL2Connection(ctx, "port-2-aws", &equinix.ECXL2ConnectionArgs{
// 			ProfileUuid: pulumi.String(aws.Id),
// 			Speed:       pulumi.Int(200),
// 			SpeedUnit:   pulumi.String("MB"),
// 			Notifications: pulumi.StringArray{
// 				pulumi.String("marry@equinix.com"),
// 				pulumi.String("john@equinix.com"),
// 			},
// 			PortUuid:         pulumi.String(sv_qinq_pri.Id),
// 			VlanStag:         pulumi.Int(777),
// 			VlanCtag:         pulumi.Int(1000),
// 			SellerRegion:     pulumi.String("us-west-1"),
// 			SellerMetroCode:  pulumi.String("SV"),
// 			AuthorizationKey: pulumi.String("345742915919"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Non-redundant Connection from Network Edge device
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		gcp_1, err := equinix.GetECXL2Sellerprofile(ctx, &GetECXL2SellerprofileArgs{
// 			Name: pulumi.StringRef("Google Cloud Partner Interconnect Zone 1"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewECXL2Connection(ctx, "router-to-gcp", &equinix.ECXL2ConnectionArgs{
// 			ProfileUuid:       pulumi.String(gcp_1.Id),
// 			DeviceUuid:        pulumi.Any(equinix_network_device.Myrouter.Id),
// 			DeviceInterfaceId: pulumi.Int(5),
// 			Speed:             pulumi.Int(100),
// 			SpeedUnit:         pulumi.String("MB"),
// 			Notifications: pulumi.StringArray{
// 				pulumi.String("john@equinix.com"),
// 				pulumi.String("marry@equinix.com"),
// 			},
// 			SellerMetroCode:  pulumi.String("SV"),
// 			SellerRegion:     pulumi.String("us-west1"),
// 			AuthorizationKey: pulumi.String("4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Non-redundant Connection from own Equinix Fabric Port to an Equinix customer port using Z-Side Service token
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		sv_qinq_pri, err := equinix.GetECXPort(ctx, &GetECXPortArgs{
// 			Name: "CX-SV5-NL-Dot1q-BO-10G-PRI",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewECXL2Connection(ctx, "port-to-token", &equinix.ECXL2ConnectionArgs{
// 			ZsideServiceToken: pulumi.String("e9c22453-d3a7-4d5d-9112-d50173531392"),
// 			Speed:             pulumi.Int(200),
// 			SpeedUnit:         pulumi.String("MB"),
// 			Notifications: pulumi.StringArray{
// 				pulumi.String("john@equinix.com"),
// 				pulumi.String("marry@equinix.com"),
// 			},
// 			SellerMetroCode: pulumi.String("FR"),
// 			PortUuid:        pulumi.String(sv_qinq_pri.Id),
// 			VlanStag:        pulumi.Int(1000),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > **NOTE:** See Equinix Fabric connecting to the cloud
// guide for more details on how to connect to a CSP.
// ## Update operation behavior
//
// Update of most arguments will force replacement of a connection (including related redundant
// connection in HA setup).
//
// Following arguments can be updated. **NOTE** that Equinix Fabric may still forbid updates depending
// on current connection state, used service provider or number of updates requested during the day.
//
// * `name`
// * `speed` and `speedUnit`
//
// ## Import
//
// into `vendor_token` but `service_token` and `zside_service_token` will remain empty. Equinix L2 connections can be imported using an existing `id`existing_connection_id='example-uuid-1'
//
// ```sh
//  $ pulumi import equinix:index/eCXL2Connection:ECXL2Connection example ${existing_connection_id}
// ```
//
//  (primary and secondary) into a single string separated by `:`. To import a redundant Equinix L2 connectionexisting_primary_connection_id='example-uuid-1' existing_secondary_connection_id='example-uuid-2'
//
// ```sh
//  $ pulumi import equinix:index/eCXL2Connection:ECXL2Connection example ${existing_primary_connection_id}:${existing_secondary_connection_id}
// ```
type ECXL2Connection struct {
	pulumi.CustomResourceState

	// One or more pending actions to complete connection provisioning.
	Actions ECXL2ConnectionActionArrayOutput `pulumi:"actions"`
	// one or more additional information key-value objects
	AdditionalInfos ECXL2ConnectionAdditionalInfoArrayOutput `pulumi:"additionalInfos"`
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
	// encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
	// key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
	// more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey pulumi.StringOutput `pulumi:"authorizationKey"`
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device, used for a connection. If not specified then first available interface will be
	// selected.
	DeviceInterfaceId pulumi.IntPtrOutput `pulumi:"deviceInterfaceId"`
	// Unique identifier of
	// the Network Edge virtual device from which the connection would originate.
	DeviceUuid pulumi.StringPtrOutput `pulumi:"deviceUuid"`
	// additional information key
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of peering to set up when connecting to Azure Express Route.
	// Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
	NamedTag pulumi.StringPtrOutput `pulumi:"namedTag"`
	// A list of email addresses used for sending connection update
	// notifications.
	Notifications pulumi.StringArrayOutput `pulumi:"notifications"`
	// Unique identifier of
	// the Equinix Fabric Port from which the connection would originate.
	PortUuid pulumi.StringOutput `pulumi:"portUuid"`
	// Unique identifier of the service provider's profile.
	ProfileUuid pulumi.StringOutput `pulumi:"profileUuid"`
	// Connection provisioning status on service provider's side.
	ProviderStatus pulumi.StringOutput `pulumi:"providerStatus"`
	// Connection's purchase order number to reflect on the invoice
	PurchaseOrderNumber pulumi.StringPtrOutput `pulumi:"purchaseOrderNumber"`
	// Unique identifier of group containing a primary and secondary connection.
	RedundancyGroup pulumi.StringOutput `pulumi:"redundancyGroup"`
	// Connection redundancy type, applicable for HA connections. Valid values are
	// `PRIMARY`, `SECONDARY`.
	RedundancyType pulumi.StringOutput `pulumi:"redundancyType"`
	// Unique identifier of the redundant connection, applicable for HA connections.
	RedundantUuid pulumi.StringOutput `pulumi:"redundantUuid"`
	// Definition of secondary connection for redundant, HA
	// connectivity. See Secondary Connection below for more details.
	SecondaryConnection ECXL2ConnectionSecondaryConnectionPtrOutput `pulumi:"secondaryConnection"`
	// The metro code that denotes the connectionâ€™s remote/destination
	// side (z-side).
	SellerMetroCode pulumi.StringOutput `pulumi:"sellerMetroCode"`
	// The region in which the seller port resides.
	SellerRegion pulumi.StringPtrOutput `pulumi:"sellerRegion"`
	// - A-side
	//   service tokens authorize you to create a connection from a customer port, which created the token
	//   for you, to a service profile or your own port.
	//   More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
	ServiceToken pulumi.StringPtrOutput `pulumi:"serviceToken"`
	// Speed/Bandwidth to be allocated to the connection.
	Speed pulumi.IntOutput `pulumi:"speed"`
	// Unit of the speed/bandwidth to be allocated to the connection.
	SpeedUnit pulumi.StringOutput `pulumi:"speedUnit"`
	// Connection provisioning status on Equinix Fabric side.
	Status pulumi.StringOutput `pulumi:"status"`
	// Unique identifier of the connection.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The Equinix Fabric Token the connection was created with. Applicable if the
	// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
	// * `secondaryConnection`:
	// * `zsidePortUuid`
	// * `zsideVlanStag`
	// * `zsideVlanCtag`
	// * `redundancyType`
	// * `redundancyGroup`
	// * `vendorToken`
	VendorToken pulumi.StringOutput `pulumi:"vendorToken"`
	// C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
	// \- 4094.
	VlanCtag pulumi.IntPtrOutput `pulumi:"vlanCtag"`
	// S-Tag/Outer-Tag of the connection - a numeric
	// character ranging from 2 - 4094.
	VlanStag pulumi.IntOutput `pulumi:"vlanStag"`
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid pulumi.StringOutput `pulumi:"zsidePortUuid"`
	// - Z-side
	//   service tokens authorize you to create a connection from your port or virtual device to a customer
	//   port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
	//   More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
	ZsideServiceToken pulumi.StringPtrOutput `pulumi:"zsideServiceToken"`
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag pulumi.IntOutput `pulumi:"zsideVlanCtag"`
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag pulumi.IntOutput `pulumi:"zsideVlanStag"`
}

// NewECXL2Connection registers a new resource with the given unique name, arguments, and options.
func NewECXL2Connection(ctx *pulumi.Context,
	name string, args *ECXL2ConnectionArgs, opts ...pulumi.ResourceOption) (*ECXL2Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.Speed == nil {
		return nil, errors.New("invalid value for required argument 'Speed'")
	}
	if args.SpeedUnit == nil {
		return nil, errors.New("invalid value for required argument 'SpeedUnit'")
	}
	var resource ECXL2Connection
	err := ctx.RegisterResource("equinix:index/eCXL2Connection:ECXL2Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetECXL2Connection gets an existing ECXL2Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetECXL2Connection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ECXL2ConnectionState, opts ...pulumi.ResourceOption) (*ECXL2Connection, error) {
	var resource ECXL2Connection
	err := ctx.ReadResource("equinix:index/eCXL2Connection:ECXL2Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ECXL2Connection resources.
type ecxl2connectionState struct {
	// One or more pending actions to complete connection provisioning.
	Actions []ECXL2ConnectionAction `pulumi:"actions"`
	// one or more additional information key-value objects
	AdditionalInfos []ECXL2ConnectionAdditionalInfo `pulumi:"additionalInfos"`
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
	// encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
	// key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
	// more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device, used for a connection. If not specified then first available interface will be
	// selected.
	DeviceInterfaceId *int `pulumi:"deviceInterfaceId"`
	// Unique identifier of
	// the Network Edge virtual device from which the connection would originate.
	DeviceUuid *string `pulumi:"deviceUuid"`
	// additional information key
	Name *string `pulumi:"name"`
	// The type of peering to set up when connecting to Azure Express Route.
	// Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
	NamedTag *string `pulumi:"namedTag"`
	// A list of email addresses used for sending connection update
	// notifications.
	Notifications []string `pulumi:"notifications"`
	// Unique identifier of
	// the Equinix Fabric Port from which the connection would originate.
	PortUuid *string `pulumi:"portUuid"`
	// Unique identifier of the service provider's profile.
	ProfileUuid *string `pulumi:"profileUuid"`
	// Connection provisioning status on service provider's side.
	ProviderStatus *string `pulumi:"providerStatus"`
	// Connection's purchase order number to reflect on the invoice
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Unique identifier of group containing a primary and secondary connection.
	RedundancyGroup *string `pulumi:"redundancyGroup"`
	// Connection redundancy type, applicable for HA connections. Valid values are
	// `PRIMARY`, `SECONDARY`.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier of the redundant connection, applicable for HA connections.
	RedundantUuid *string `pulumi:"redundantUuid"`
	// Definition of secondary connection for redundant, HA
	// connectivity. See Secondary Connection below for more details.
	SecondaryConnection *ECXL2ConnectionSecondaryConnection `pulumi:"secondaryConnection"`
	// The metro code that denotes the connectionâ€™s remote/destination
	// side (z-side).
	SellerMetroCode *string `pulumi:"sellerMetroCode"`
	// The region in which the seller port resides.
	SellerRegion *string `pulumi:"sellerRegion"`
	// - A-side
	//   service tokens authorize you to create a connection from a customer port, which created the token
	//   for you, to a service profile or your own port.
	//   More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
	ServiceToken *string `pulumi:"serviceToken"`
	// Speed/Bandwidth to be allocated to the connection.
	Speed *int `pulumi:"speed"`
	// Unit of the speed/bandwidth to be allocated to the connection.
	SpeedUnit *string `pulumi:"speedUnit"`
	// Connection provisioning status on Equinix Fabric side.
	Status *string `pulumi:"status"`
	// Unique identifier of the connection.
	Uuid *string `pulumi:"uuid"`
	// The Equinix Fabric Token the connection was created with. Applicable if the
	// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
	// * `secondaryConnection`:
	// * `zsidePortUuid`
	// * `zsideVlanStag`
	// * `zsideVlanCtag`
	// * `redundancyType`
	// * `redundancyGroup`
	// * `vendorToken`
	VendorToken *string `pulumi:"vendorToken"`
	// C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
	// \- 4094.
	VlanCtag *int `pulumi:"vlanCtag"`
	// S-Tag/Outer-Tag of the connection - a numeric
	// character ranging from 2 - 4094.
	VlanStag *int `pulumi:"vlanStag"`
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid *string `pulumi:"zsidePortUuid"`
	// - Z-side
	//   service tokens authorize you to create a connection from your port or virtual device to a customer
	//   port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
	//   More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
	ZsideServiceToken *string `pulumi:"zsideServiceToken"`
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag *int `pulumi:"zsideVlanCtag"`
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag *int `pulumi:"zsideVlanStag"`
}

type ECXL2ConnectionState struct {
	// One or more pending actions to complete connection provisioning.
	Actions ECXL2ConnectionActionArrayInput
	// one or more additional information key-value objects
	AdditionalInfos ECXL2ConnectionAdditionalInfoArrayInput
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
	// encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
	// key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
	// more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey pulumi.StringPtrInput
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device, used for a connection. If not specified then first available interface will be
	// selected.
	DeviceInterfaceId pulumi.IntPtrInput
	// Unique identifier of
	// the Network Edge virtual device from which the connection would originate.
	DeviceUuid pulumi.StringPtrInput
	// additional information key
	Name pulumi.StringPtrInput
	// The type of peering to set up when connecting to Azure Express Route.
	// Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
	NamedTag pulumi.StringPtrInput
	// A list of email addresses used for sending connection update
	// notifications.
	Notifications pulumi.StringArrayInput
	// Unique identifier of
	// the Equinix Fabric Port from which the connection would originate.
	PortUuid pulumi.StringPtrInput
	// Unique identifier of the service provider's profile.
	ProfileUuid pulumi.StringPtrInput
	// Connection provisioning status on service provider's side.
	ProviderStatus pulumi.StringPtrInput
	// Connection's purchase order number to reflect on the invoice
	PurchaseOrderNumber pulumi.StringPtrInput
	// Unique identifier of group containing a primary and secondary connection.
	RedundancyGroup pulumi.StringPtrInput
	// Connection redundancy type, applicable for HA connections. Valid values are
	// `PRIMARY`, `SECONDARY`.
	RedundancyType pulumi.StringPtrInput
	// Unique identifier of the redundant connection, applicable for HA connections.
	RedundantUuid pulumi.StringPtrInput
	// Definition of secondary connection for redundant, HA
	// connectivity. See Secondary Connection below for more details.
	SecondaryConnection ECXL2ConnectionSecondaryConnectionPtrInput
	// The metro code that denotes the connectionâ€™s remote/destination
	// side (z-side).
	SellerMetroCode pulumi.StringPtrInput
	// The region in which the seller port resides.
	SellerRegion pulumi.StringPtrInput
	// - A-side
	//   service tokens authorize you to create a connection from a customer port, which created the token
	//   for you, to a service profile or your own port.
	//   More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
	ServiceToken pulumi.StringPtrInput
	// Speed/Bandwidth to be allocated to the connection.
	Speed pulumi.IntPtrInput
	// Unit of the speed/bandwidth to be allocated to the connection.
	SpeedUnit pulumi.StringPtrInput
	// Connection provisioning status on Equinix Fabric side.
	Status pulumi.StringPtrInput
	// Unique identifier of the connection.
	Uuid pulumi.StringPtrInput
	// The Equinix Fabric Token the connection was created with. Applicable if the
	// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
	// * `secondaryConnection`:
	// * `zsidePortUuid`
	// * `zsideVlanStag`
	// * `zsideVlanCtag`
	// * `redundancyType`
	// * `redundancyGroup`
	// * `vendorToken`
	VendorToken pulumi.StringPtrInput
	// C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
	// \- 4094.
	VlanCtag pulumi.IntPtrInput
	// S-Tag/Outer-Tag of the connection - a numeric
	// character ranging from 2 - 4094.
	VlanStag pulumi.IntPtrInput
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid pulumi.StringPtrInput
	// - Z-side
	//   service tokens authorize you to create a connection from your port or virtual device to a customer
	//   port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
	//   More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
	ZsideServiceToken pulumi.StringPtrInput
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag pulumi.IntPtrInput
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag pulumi.IntPtrInput
}

func (ECXL2ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecxl2connectionState)(nil)).Elem()
}

type ecxl2connectionArgs struct {
	// one or more additional information key-value objects
	AdditionalInfos []ECXL2ConnectionAdditionalInfo `pulumi:"additionalInfos"`
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
	// encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
	// key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
	// more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device, used for a connection. If not specified then first available interface will be
	// selected.
	DeviceInterfaceId *int `pulumi:"deviceInterfaceId"`
	// Unique identifier of
	// the Network Edge virtual device from which the connection would originate.
	DeviceUuid *string `pulumi:"deviceUuid"`
	// additional information key
	Name *string `pulumi:"name"`
	// The type of peering to set up when connecting to Azure Express Route.
	// Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
	NamedTag *string `pulumi:"namedTag"`
	// A list of email addresses used for sending connection update
	// notifications.
	Notifications []string `pulumi:"notifications"`
	// Unique identifier of
	// the Equinix Fabric Port from which the connection would originate.
	PortUuid *string `pulumi:"portUuid"`
	// Unique identifier of the service provider's profile.
	ProfileUuid *string `pulumi:"profileUuid"`
	// Connection's purchase order number to reflect on the invoice
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Definition of secondary connection for redundant, HA
	// connectivity. See Secondary Connection below for more details.
	SecondaryConnection *ECXL2ConnectionSecondaryConnection `pulumi:"secondaryConnection"`
	// The metro code that denotes the connectionâ€™s remote/destination
	// side (z-side).
	SellerMetroCode *string `pulumi:"sellerMetroCode"`
	// The region in which the seller port resides.
	SellerRegion *string `pulumi:"sellerRegion"`
	// - A-side
	//   service tokens authorize you to create a connection from a customer port, which created the token
	//   for you, to a service profile or your own port.
	//   More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
	ServiceToken *string `pulumi:"serviceToken"`
	// Speed/Bandwidth to be allocated to the connection.
	Speed int `pulumi:"speed"`
	// Unit of the speed/bandwidth to be allocated to the connection.
	SpeedUnit string `pulumi:"speedUnit"`
	// C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
	// \- 4094.
	VlanCtag *int `pulumi:"vlanCtag"`
	// S-Tag/Outer-Tag of the connection - a numeric
	// character ranging from 2 - 4094.
	VlanStag *int `pulumi:"vlanStag"`
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid *string `pulumi:"zsidePortUuid"`
	// - Z-side
	//   service tokens authorize you to create a connection from your port or virtual device to a customer
	//   port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
	//   More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
	ZsideServiceToken *string `pulumi:"zsideServiceToken"`
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag *int `pulumi:"zsideVlanCtag"`
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag *int `pulumi:"zsideVlanStag"`
}

// The set of arguments for constructing a ECXL2Connection resource.
type ECXL2ConnectionArgs struct {
	// one or more additional information key-value objects
	AdditionalInfos ECXL2ConnectionAdditionalInfoArrayInput
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
	// encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
	// key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
	// more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey pulumi.StringPtrInput
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device, used for a connection. If not specified then first available interface will be
	// selected.
	DeviceInterfaceId pulumi.IntPtrInput
	// Unique identifier of
	// the Network Edge virtual device from which the connection would originate.
	DeviceUuid pulumi.StringPtrInput
	// additional information key
	Name pulumi.StringPtrInput
	// The type of peering to set up when connecting to Azure Express Route.
	// Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
	NamedTag pulumi.StringPtrInput
	// A list of email addresses used for sending connection update
	// notifications.
	Notifications pulumi.StringArrayInput
	// Unique identifier of
	// the Equinix Fabric Port from which the connection would originate.
	PortUuid pulumi.StringPtrInput
	// Unique identifier of the service provider's profile.
	ProfileUuid pulumi.StringPtrInput
	// Connection's purchase order number to reflect on the invoice
	PurchaseOrderNumber pulumi.StringPtrInput
	// Definition of secondary connection for redundant, HA
	// connectivity. See Secondary Connection below for more details.
	SecondaryConnection ECXL2ConnectionSecondaryConnectionPtrInput
	// The metro code that denotes the connectionâ€™s remote/destination
	// side (z-side).
	SellerMetroCode pulumi.StringPtrInput
	// The region in which the seller port resides.
	SellerRegion pulumi.StringPtrInput
	// - A-side
	//   service tokens authorize you to create a connection from a customer port, which created the token
	//   for you, to a service profile or your own port.
	//   More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
	ServiceToken pulumi.StringPtrInput
	// Speed/Bandwidth to be allocated to the connection.
	Speed pulumi.IntInput
	// Unit of the speed/bandwidth to be allocated to the connection.
	SpeedUnit pulumi.StringInput
	// C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
	// \- 4094.
	VlanCtag pulumi.IntPtrInput
	// S-Tag/Outer-Tag of the connection - a numeric
	// character ranging from 2 - 4094.
	VlanStag pulumi.IntPtrInput
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid pulumi.StringPtrInput
	// - Z-side
	//   service tokens authorize you to create a connection from your port or virtual device to a customer
	//   port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
	//   More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
	ZsideServiceToken pulumi.StringPtrInput
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag pulumi.IntPtrInput
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag pulumi.IntPtrInput
}

func (ECXL2ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecxl2connectionArgs)(nil)).Elem()
}

type ECXL2ConnectionInput interface {
	pulumi.Input

	ToECXL2ConnectionOutput() ECXL2ConnectionOutput
	ToECXL2ConnectionOutputWithContext(ctx context.Context) ECXL2ConnectionOutput
}

func (*ECXL2Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2Connection)(nil)).Elem()
}

func (i *ECXL2Connection) ToECXL2ConnectionOutput() ECXL2ConnectionOutput {
	return i.ToECXL2ConnectionOutputWithContext(context.Background())
}

func (i *ECXL2Connection) ToECXL2ConnectionOutputWithContext(ctx context.Context) ECXL2ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionOutput)
}

// ECXL2ConnectionArrayInput is an input type that accepts ECXL2ConnectionArray and ECXL2ConnectionArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionArrayInput` via:
//
//          ECXL2ConnectionArray{ ECXL2ConnectionArgs{...} }
type ECXL2ConnectionArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionArrayOutput() ECXL2ConnectionArrayOutput
	ToECXL2ConnectionArrayOutputWithContext(context.Context) ECXL2ConnectionArrayOutput
}

type ECXL2ConnectionArray []ECXL2ConnectionInput

func (ECXL2ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECXL2Connection)(nil)).Elem()
}

func (i ECXL2ConnectionArray) ToECXL2ConnectionArrayOutput() ECXL2ConnectionArrayOutput {
	return i.ToECXL2ConnectionArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionArray) ToECXL2ConnectionArrayOutputWithContext(ctx context.Context) ECXL2ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionArrayOutput)
}

// ECXL2ConnectionMapInput is an input type that accepts ECXL2ConnectionMap and ECXL2ConnectionMapOutput values.
// You can construct a concrete instance of `ECXL2ConnectionMapInput` via:
//
//          ECXL2ConnectionMap{ "key": ECXL2ConnectionArgs{...} }
type ECXL2ConnectionMapInput interface {
	pulumi.Input

	ToECXL2ConnectionMapOutput() ECXL2ConnectionMapOutput
	ToECXL2ConnectionMapOutputWithContext(context.Context) ECXL2ConnectionMapOutput
}

type ECXL2ConnectionMap map[string]ECXL2ConnectionInput

func (ECXL2ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECXL2Connection)(nil)).Elem()
}

func (i ECXL2ConnectionMap) ToECXL2ConnectionMapOutput() ECXL2ConnectionMapOutput {
	return i.ToECXL2ConnectionMapOutputWithContext(context.Background())
}

func (i ECXL2ConnectionMap) ToECXL2ConnectionMapOutputWithContext(ctx context.Context) ECXL2ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionMapOutput)
}

type ECXL2ConnectionOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2Connection)(nil)).Elem()
}

func (o ECXL2ConnectionOutput) ToECXL2ConnectionOutput() ECXL2ConnectionOutput {
	return o
}

func (o ECXL2ConnectionOutput) ToECXL2ConnectionOutputWithContext(ctx context.Context) ECXL2ConnectionOutput {
	return o
}

// One or more pending actions to complete connection provisioning.
func (o ECXL2ConnectionOutput) Actions() ECXL2ConnectionActionArrayOutput {
	return o.ApplyT(func(v *ECXL2Connection) ECXL2ConnectionActionArrayOutput { return v.Actions }).(ECXL2ConnectionActionArrayOutput)
}

// one or more additional information key-value objects
func (o ECXL2ConnectionOutput) AdditionalInfos() ECXL2ConnectionAdditionalInfoArrayOutput {
	return o.ApplyT(func(v *ECXL2Connection) ECXL2ConnectionAdditionalInfoArrayOutput { return v.AdditionalInfos }).(ECXL2ConnectionAdditionalInfoArrayOutput)
}

// Unique identifier authorizing Equinix to provision a connection
// towards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT
// encrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this
// key such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,
// more information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
func (o ECXL2ConnectionOutput) AuthorizationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.AuthorizationKey }).(pulumi.StringOutput)
}

// Applicable with `deviceUuid`, identifier of network interface
// on a given device, used for a connection. If not specified then first available interface will be
// selected.
func (o ECXL2ConnectionOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.IntPtrOutput { return v.DeviceInterfaceId }).(pulumi.IntPtrOutput)
}

// Unique identifier of
// the Network Edge virtual device from which the connection would originate.
func (o ECXL2ConnectionOutput) DeviceUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringPtrOutput { return v.DeviceUuid }).(pulumi.StringPtrOutput)
}

// additional information key
func (o ECXL2ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of peering to set up when connecting to Azure Express Route.
// Valid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\*, `PUBLIC`\*.
func (o ECXL2ConnectionOutput) NamedTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringPtrOutput { return v.NamedTag }).(pulumi.StringPtrOutput)
}

// A list of email addresses used for sending connection update
// notifications.
func (o ECXL2ConnectionOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringArrayOutput { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Unique identifier of
// the Equinix Fabric Port from which the connection would originate.
func (o ECXL2ConnectionOutput) PortUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.PortUuid }).(pulumi.StringOutput)
}

// Unique identifier of the service provider's profile.
func (o ECXL2ConnectionOutput) ProfileUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.ProfileUuid }).(pulumi.StringOutput)
}

// Connection provisioning status on service provider's side.
func (o ECXL2ConnectionOutput) ProviderStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.ProviderStatus }).(pulumi.StringOutput)
}

// Connection's purchase order number to reflect on the invoice
func (o ECXL2ConnectionOutput) PurchaseOrderNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringPtrOutput { return v.PurchaseOrderNumber }).(pulumi.StringPtrOutput)
}

// Unique identifier of group containing a primary and secondary connection.
func (o ECXL2ConnectionOutput) RedundancyGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.RedundancyGroup }).(pulumi.StringOutput)
}

// Connection redundancy type, applicable for HA connections. Valid values are
// `PRIMARY`, `SECONDARY`.
func (o ECXL2ConnectionOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier of the redundant connection, applicable for HA connections.
func (o ECXL2ConnectionOutput) RedundantUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.RedundantUuid }).(pulumi.StringOutput)
}

// Definition of secondary connection for redundant, HA
// connectivity. See Secondary Connection below for more details.
func (o ECXL2ConnectionOutput) SecondaryConnection() ECXL2ConnectionSecondaryConnectionPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) ECXL2ConnectionSecondaryConnectionPtrOutput { return v.SecondaryConnection }).(ECXL2ConnectionSecondaryConnectionPtrOutput)
}

// The metro code that denotes the connectionâ€™s remote/destination
// side (z-side).
func (o ECXL2ConnectionOutput) SellerMetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.SellerMetroCode }).(pulumi.StringOutput)
}

// The region in which the seller port resides.
func (o ECXL2ConnectionOutput) SellerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringPtrOutput { return v.SellerRegion }).(pulumi.StringPtrOutput)
}

// - A-side
//   service tokens authorize you to create a connection from a customer port, which created the token
//   for you, to a service profile or your own port.
//   More details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).
func (o ECXL2ConnectionOutput) ServiceToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringPtrOutput { return v.ServiceToken }).(pulumi.StringPtrOutput)
}

// Speed/Bandwidth to be allocated to the connection.
func (o ECXL2ConnectionOutput) Speed() pulumi.IntOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.IntOutput { return v.Speed }).(pulumi.IntOutput)
}

// Unit of the speed/bandwidth to be allocated to the connection.
func (o ECXL2ConnectionOutput) SpeedUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.SpeedUnit }).(pulumi.StringOutput)
}

// Connection provisioning status on Equinix Fabric side.
func (o ECXL2ConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Unique identifier of the connection.
func (o ECXL2ConnectionOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// The Equinix Fabric Token the connection was created with. Applicable if the
// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
// * `secondaryConnection`:
// * `zsidePortUuid`
// * `zsideVlanStag`
// * `zsideVlanCtag`
// * `redundancyType`
// * `redundancyGroup`
// * `vendorToken`
func (o ECXL2ConnectionOutput) VendorToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.VendorToken }).(pulumi.StringOutput)
}

// C-Tag/Inner-Tag of the connection - a numeric character ranging from 2
// \- 4094.
func (o ECXL2ConnectionOutput) VlanCtag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.IntPtrOutput { return v.VlanCtag }).(pulumi.IntPtrOutput)
}

// S-Tag/Outer-Tag of the connection - a numeric
// character ranging from 2 - 4094.
func (o ECXL2ConnectionOutput) VlanStag() pulumi.IntOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.IntOutput { return v.VlanStag }).(pulumi.IntOutput)
}

// Unique identifier of the port on the remote/destination side
// (z-side). Allows you to connect between your own ports or virtual devices across your company's
// Equinix Fabric deployment, with no need for a private service profile.
func (o ECXL2ConnectionOutput) ZsidePortUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringOutput { return v.ZsidePortUuid }).(pulumi.StringOutput)
}

// - Z-side
//   service tokens authorize you to create a connection from your port or virtual device to a customer
//   port which created the token for you. `zsideServiceToken` cannot be used with `secondaryConnection`.
//   More details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).
func (o ECXL2ConnectionOutput) ZsideServiceToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.StringPtrOutput { return v.ZsideServiceToken }).(pulumi.StringPtrOutput)
}

// C-Tag/Inner-Tag of the connection on the remote/destination
// side (z-side) - a numeric character ranging from 2 - 4094.
// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
// connection.
func (o ECXL2ConnectionOutput) ZsideVlanCtag() pulumi.IntOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.IntOutput { return v.ZsideVlanCtag }).(pulumi.IntOutput)
}

// S-Tag/Outer-Tag of the connection on the remote/destination
// side (z-side) - a numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionOutput) ZsideVlanStag() pulumi.IntOutput {
	return o.ApplyT(func(v *ECXL2Connection) pulumi.IntOutput { return v.ZsideVlanStag }).(pulumi.IntOutput)
}

type ECXL2ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECXL2Connection)(nil)).Elem()
}

func (o ECXL2ConnectionArrayOutput) ToECXL2ConnectionArrayOutput() ECXL2ConnectionArrayOutput {
	return o
}

func (o ECXL2ConnectionArrayOutput) ToECXL2ConnectionArrayOutputWithContext(ctx context.Context) ECXL2ConnectionArrayOutput {
	return o
}

func (o ECXL2ConnectionArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ECXL2Connection {
		return vs[0].([]*ECXL2Connection)[vs[1].(int)]
	}).(ECXL2ConnectionOutput)
}

type ECXL2ConnectionMapOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECXL2Connection)(nil)).Elem()
}

func (o ECXL2ConnectionMapOutput) ToECXL2ConnectionMapOutput() ECXL2ConnectionMapOutput {
	return o
}

func (o ECXL2ConnectionMapOutput) ToECXL2ConnectionMapOutputWithContext(ctx context.Context) ECXL2ConnectionMapOutput {
	return o
}

func (o ECXL2ConnectionMapOutput) MapIndex(k pulumi.StringInput) ECXL2ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ECXL2Connection {
		return vs[0].(map[string]*ECXL2Connection)[vs[1].(string)]
	}).(ECXL2ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionInput)(nil)).Elem(), &ECXL2Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionArrayInput)(nil)).Elem(), ECXL2ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionMapInput)(nil)).Elem(), ECXL2ConnectionMap{})
	pulumi.RegisterOutputType(ECXL2ConnectionOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionMapOutput{})
}
