// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create Metal Gateway resources in Equinix Metal.
//
// > VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testMetalVlan, err := equinix.NewMetalVlan(ctx, "testMetalVlan", &equinix.MetalVlanArgs{
// 			Description: pulumi.String("test VLAN in SV"),
// 			Metro:       pulumi.String("sv"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewMetalGateway(ctx, "testMetalGateway", &equinix.MetalGatewayArgs{
// 			ProjectId:             pulumi.Any(local.Project_id),
// 			VlanId:                testMetalVlan.ID(),
// 			PrivateIpv4SubnetSize: pulumi.Int(8),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testMetalVlan, err := equinix.NewMetalVlan(ctx, "testMetalVlan", &equinix.MetalVlanArgs{
// 			Description: pulumi.String("test VLAN in SV"),
// 			Metro:       pulumi.String("sv"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testMetalReservedIPBlock, err := equinix.NewMetalReservedIPBlock(ctx, "testMetalReservedIPBlock", &equinix.MetalReservedIPBlockArgs{
// 			ProjectId: pulumi.Any(local.Project_id),
// 			Metro:     pulumi.String("sv"),
// 			Quantity:  pulumi.Int(2),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewMetalGateway(ctx, "testMetalGateway", &equinix.MetalGatewayArgs{
// 			ProjectId:       pulumi.Any(local.Project_id),
// 			VlanId:          testMetalVlan.ID(),
// 			IpReservationId: testMetalReservedIPBlock.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MetalGateway struct {
	pulumi.CustomResourceState

	// UUID of Public or VRF IP Reservation to associate with the gateway, the
	// reservation must be in the same metro as the VLAN, conflicts with `privateIpv4SubnetSize`.
	IpReservationId pulumi.StringPtrOutput `pulumi:"ipReservationId"`
	// Size of the private IPv4 subnet to create for this metal
	// gateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ipReservationId`.
	PrivateIpv4SubnetSize pulumi.IntOutput `pulumi:"privateIpv4SubnetSize"`
	// UUID of the project where the gateway is scoped to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Status of the gateway resource.
	State pulumi.StringOutput `pulumi:"state"`
	// UUID of the VLAN where the gateway is scoped to.
	VlanId pulumi.StringOutput `pulumi:"vlanId"`
	// UUID of the VRF associated with the IP Reservation
	VrfId pulumi.StringOutput `pulumi:"vrfId"`
}

// NewMetalGateway registers a new resource with the given unique name, arguments, and options.
func NewMetalGateway(ctx *pulumi.Context,
	name string, args *MetalGatewayArgs, opts ...pulumi.ResourceOption) (*MetalGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.VlanId == nil {
		return nil, errors.New("invalid value for required argument 'VlanId'")
	}
	var resource MetalGateway
	err := ctx.RegisterResource("equinix:index/metalGateway:MetalGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetalGateway gets an existing MetalGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetalGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetalGatewayState, opts ...pulumi.ResourceOption) (*MetalGateway, error) {
	var resource MetalGateway
	err := ctx.ReadResource("equinix:index/metalGateway:MetalGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetalGateway resources.
type metalGatewayState struct {
	// UUID of Public or VRF IP Reservation to associate with the gateway, the
	// reservation must be in the same metro as the VLAN, conflicts with `privateIpv4SubnetSize`.
	IpReservationId *string `pulumi:"ipReservationId"`
	// Size of the private IPv4 subnet to create for this metal
	// gateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ipReservationId`.
	PrivateIpv4SubnetSize *int `pulumi:"privateIpv4SubnetSize"`
	// UUID of the project where the gateway is scoped to.
	ProjectId *string `pulumi:"projectId"`
	// Status of the gateway resource.
	State *string `pulumi:"state"`
	// UUID of the VLAN where the gateway is scoped to.
	VlanId *string `pulumi:"vlanId"`
	// UUID of the VRF associated with the IP Reservation
	VrfId *string `pulumi:"vrfId"`
}

type MetalGatewayState struct {
	// UUID of Public or VRF IP Reservation to associate with the gateway, the
	// reservation must be in the same metro as the VLAN, conflicts with `privateIpv4SubnetSize`.
	IpReservationId pulumi.StringPtrInput
	// Size of the private IPv4 subnet to create for this metal
	// gateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ipReservationId`.
	PrivateIpv4SubnetSize pulumi.IntPtrInput
	// UUID of the project where the gateway is scoped to.
	ProjectId pulumi.StringPtrInput
	// Status of the gateway resource.
	State pulumi.StringPtrInput
	// UUID of the VLAN where the gateway is scoped to.
	VlanId pulumi.StringPtrInput
	// UUID of the VRF associated with the IP Reservation
	VrfId pulumi.StringPtrInput
}

func (MetalGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*metalGatewayState)(nil)).Elem()
}

type metalGatewayArgs struct {
	// UUID of Public or VRF IP Reservation to associate with the gateway, the
	// reservation must be in the same metro as the VLAN, conflicts with `privateIpv4SubnetSize`.
	IpReservationId *string `pulumi:"ipReservationId"`
	// Size of the private IPv4 subnet to create for this metal
	// gateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ipReservationId`.
	PrivateIpv4SubnetSize *int `pulumi:"privateIpv4SubnetSize"`
	// UUID of the project where the gateway is scoped to.
	ProjectId string `pulumi:"projectId"`
	// UUID of the VLAN where the gateway is scoped to.
	VlanId string `pulumi:"vlanId"`
}

// The set of arguments for constructing a MetalGateway resource.
type MetalGatewayArgs struct {
	// UUID of Public or VRF IP Reservation to associate with the gateway, the
	// reservation must be in the same metro as the VLAN, conflicts with `privateIpv4SubnetSize`.
	IpReservationId pulumi.StringPtrInput
	// Size of the private IPv4 subnet to create for this metal
	// gateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ipReservationId`.
	PrivateIpv4SubnetSize pulumi.IntPtrInput
	// UUID of the project where the gateway is scoped to.
	ProjectId pulumi.StringInput
	// UUID of the VLAN where the gateway is scoped to.
	VlanId pulumi.StringInput
}

func (MetalGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metalGatewayArgs)(nil)).Elem()
}

type MetalGatewayInput interface {
	pulumi.Input

	ToMetalGatewayOutput() MetalGatewayOutput
	ToMetalGatewayOutputWithContext(ctx context.Context) MetalGatewayOutput
}

func (*MetalGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalGateway)(nil)).Elem()
}

func (i *MetalGateway) ToMetalGatewayOutput() MetalGatewayOutput {
	return i.ToMetalGatewayOutputWithContext(context.Background())
}

func (i *MetalGateway) ToMetalGatewayOutputWithContext(ctx context.Context) MetalGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalGatewayOutput)
}

// MetalGatewayArrayInput is an input type that accepts MetalGatewayArray and MetalGatewayArrayOutput values.
// You can construct a concrete instance of `MetalGatewayArrayInput` via:
//
//          MetalGatewayArray{ MetalGatewayArgs{...} }
type MetalGatewayArrayInput interface {
	pulumi.Input

	ToMetalGatewayArrayOutput() MetalGatewayArrayOutput
	ToMetalGatewayArrayOutputWithContext(context.Context) MetalGatewayArrayOutput
}

type MetalGatewayArray []MetalGatewayInput

func (MetalGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalGateway)(nil)).Elem()
}

func (i MetalGatewayArray) ToMetalGatewayArrayOutput() MetalGatewayArrayOutput {
	return i.ToMetalGatewayArrayOutputWithContext(context.Background())
}

func (i MetalGatewayArray) ToMetalGatewayArrayOutputWithContext(ctx context.Context) MetalGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalGatewayArrayOutput)
}

// MetalGatewayMapInput is an input type that accepts MetalGatewayMap and MetalGatewayMapOutput values.
// You can construct a concrete instance of `MetalGatewayMapInput` via:
//
//          MetalGatewayMap{ "key": MetalGatewayArgs{...} }
type MetalGatewayMapInput interface {
	pulumi.Input

	ToMetalGatewayMapOutput() MetalGatewayMapOutput
	ToMetalGatewayMapOutputWithContext(context.Context) MetalGatewayMapOutput
}

type MetalGatewayMap map[string]MetalGatewayInput

func (MetalGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalGateway)(nil)).Elem()
}

func (i MetalGatewayMap) ToMetalGatewayMapOutput() MetalGatewayMapOutput {
	return i.ToMetalGatewayMapOutputWithContext(context.Background())
}

func (i MetalGatewayMap) ToMetalGatewayMapOutputWithContext(ctx context.Context) MetalGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalGatewayMapOutput)
}

type MetalGatewayOutput struct{ *pulumi.OutputState }

func (MetalGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalGateway)(nil)).Elem()
}

func (o MetalGatewayOutput) ToMetalGatewayOutput() MetalGatewayOutput {
	return o
}

func (o MetalGatewayOutput) ToMetalGatewayOutputWithContext(ctx context.Context) MetalGatewayOutput {
	return o
}

// UUID of Public or VRF IP Reservation to associate with the gateway, the
// reservation must be in the same metro as the VLAN, conflicts with `privateIpv4SubnetSize`.
func (o MetalGatewayOutput) IpReservationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalGateway) pulumi.StringPtrOutput { return v.IpReservationId }).(pulumi.StringPtrOutput)
}

// Size of the private IPv4 subnet to create for this metal
// gateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ipReservationId`.
func (o MetalGatewayOutput) PrivateIpv4SubnetSize() pulumi.IntOutput {
	return o.ApplyT(func(v *MetalGateway) pulumi.IntOutput { return v.PrivateIpv4SubnetSize }).(pulumi.IntOutput)
}

// UUID of the project where the gateway is scoped to.
func (o MetalGatewayOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalGateway) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Status of the gateway resource.
func (o MetalGatewayOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalGateway) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// UUID of the VLAN where the gateway is scoped to.
func (o MetalGatewayOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalGateway) pulumi.StringOutput { return v.VlanId }).(pulumi.StringOutput)
}

// UUID of the VRF associated with the IP Reservation
func (o MetalGatewayOutput) VrfId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalGateway) pulumi.StringOutput { return v.VrfId }).(pulumi.StringOutput)
}

type MetalGatewayArrayOutput struct{ *pulumi.OutputState }

func (MetalGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalGateway)(nil)).Elem()
}

func (o MetalGatewayArrayOutput) ToMetalGatewayArrayOutput() MetalGatewayArrayOutput {
	return o
}

func (o MetalGatewayArrayOutput) ToMetalGatewayArrayOutputWithContext(ctx context.Context) MetalGatewayArrayOutput {
	return o
}

func (o MetalGatewayArrayOutput) Index(i pulumi.IntInput) MetalGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetalGateway {
		return vs[0].([]*MetalGateway)[vs[1].(int)]
	}).(MetalGatewayOutput)
}

type MetalGatewayMapOutput struct{ *pulumi.OutputState }

func (MetalGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalGateway)(nil)).Elem()
}

func (o MetalGatewayMapOutput) ToMetalGatewayMapOutput() MetalGatewayMapOutput {
	return o
}

func (o MetalGatewayMapOutput) ToMetalGatewayMapOutputWithContext(ctx context.Context) MetalGatewayMapOutput {
	return o
}

func (o MetalGatewayMapOutput) MapIndex(k pulumi.StringInput) MetalGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetalGateway {
		return vs[0].(map[string]*MetalGateway)[vs[1].(string)]
	}).(MetalGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetalGatewayInput)(nil)).Elem(), &MetalGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalGatewayArrayInput)(nil)).Elem(), MetalGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalGatewayMapInput)(nil)).Elem(), MetalGatewayMap{})
	pulumi.RegisterOutputType(MetalGatewayOutput{})
	pulumi.RegisterOutputType(MetalGatewayArrayOutput{})
	pulumi.RegisterOutputType(MetalGatewayMapOutput{})
}
