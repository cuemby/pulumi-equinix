// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to allow users to manage Virtual Networks in their projects.
//
// To learn more about Layer 2 networking in Equinix Metal, refer to
//
// * <https://metal.equinix.com/developers/docs/networking/layer2/>
// * <https://metal.equinix.com/developers/docs/networking/layer2-configs/>
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.NewMetalVlan(ctx, "vlan1MetalVlan", &equinix.MetalVlanArgs{
// 			Description: pulumi.String("VLAN in New Jersey"),
// 			Facility:    pulumi.String("sv15"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewMetalVlan(ctx, "vlan1Index/metalVlanMetalVlan", &equinix.MetalVlanArgs{
// 			Description: pulumi.String("VLAN in New Jersey"),
// 			Metro:       pulumi.String("sv"),
// 			ProjectId:   pulumi.Any(local.Project_id),
// 			Vxlan:       pulumi.Int(1040),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an existing VLAN ID (UUID)
//
// ```sh
//  $ pulumi import equinix:index/metalVlan:MetalVlan equinix_metal_vlan {existing_vlan_id}
// ```
type MetalVlan struct {
	pulumi.CustomResourceState

	// Description string.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Facility where to create the VLAN.
	Facility pulumi.StringPtrOutput `pulumi:"facility"`
	Metro    pulumi.StringPtrOutput `pulumi:"metro"`
	// ID of parent project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// VLAN ID, must be unique in metro.
	Vxlan pulumi.IntOutput `pulumi:"vxlan"`
}

// NewMetalVlan registers a new resource with the given unique name, arguments, and options.
func NewMetalVlan(ctx *pulumi.Context,
	name string, args *MetalVlanArgs, opts ...pulumi.ResourceOption) (*MetalVlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource MetalVlan
	err := ctx.RegisterResource("equinix:index/metalVlan:MetalVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetalVlan gets an existing MetalVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetalVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetalVlanState, opts ...pulumi.ResourceOption) (*MetalVlan, error) {
	var resource MetalVlan
	err := ctx.ReadResource("equinix:index/metalVlan:MetalVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetalVlan resources.
type metalVlanState struct {
	// Description string.
	Description *string `pulumi:"description"`
	// Facility where to create the VLAN.
	Facility *string `pulumi:"facility"`
	Metro    *string `pulumi:"metro"`
	// ID of parent project.
	ProjectId *string `pulumi:"projectId"`
	// VLAN ID, must be unique in metro.
	Vxlan *int `pulumi:"vxlan"`
}

type MetalVlanState struct {
	// Description string.
	Description pulumi.StringPtrInput
	// Facility where to create the VLAN.
	Facility pulumi.StringPtrInput
	Metro    pulumi.StringPtrInput
	// ID of parent project.
	ProjectId pulumi.StringPtrInput
	// VLAN ID, must be unique in metro.
	Vxlan pulumi.IntPtrInput
}

func (MetalVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*metalVlanState)(nil)).Elem()
}

type metalVlanArgs struct {
	// Description string.
	Description *string `pulumi:"description"`
	// Facility where to create the VLAN.
	Facility *string `pulumi:"facility"`
	Metro    *string `pulumi:"metro"`
	// ID of parent project.
	ProjectId string `pulumi:"projectId"`
	// VLAN ID, must be unique in metro.
	Vxlan *int `pulumi:"vxlan"`
}

// The set of arguments for constructing a MetalVlan resource.
type MetalVlanArgs struct {
	// Description string.
	Description pulumi.StringPtrInput
	// Facility where to create the VLAN.
	Facility pulumi.StringPtrInput
	Metro    pulumi.StringPtrInput
	// ID of parent project.
	ProjectId pulumi.StringInput
	// VLAN ID, must be unique in metro.
	Vxlan pulumi.IntPtrInput
}

func (MetalVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metalVlanArgs)(nil)).Elem()
}

type MetalVlanInput interface {
	pulumi.Input

	ToMetalVlanOutput() MetalVlanOutput
	ToMetalVlanOutputWithContext(ctx context.Context) MetalVlanOutput
}

func (*MetalVlan) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalVlan)(nil)).Elem()
}

func (i *MetalVlan) ToMetalVlanOutput() MetalVlanOutput {
	return i.ToMetalVlanOutputWithContext(context.Background())
}

func (i *MetalVlan) ToMetalVlanOutputWithContext(ctx context.Context) MetalVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalVlanOutput)
}

// MetalVlanArrayInput is an input type that accepts MetalVlanArray and MetalVlanArrayOutput values.
// You can construct a concrete instance of `MetalVlanArrayInput` via:
//
//          MetalVlanArray{ MetalVlanArgs{...} }
type MetalVlanArrayInput interface {
	pulumi.Input

	ToMetalVlanArrayOutput() MetalVlanArrayOutput
	ToMetalVlanArrayOutputWithContext(context.Context) MetalVlanArrayOutput
}

type MetalVlanArray []MetalVlanInput

func (MetalVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalVlan)(nil)).Elem()
}

func (i MetalVlanArray) ToMetalVlanArrayOutput() MetalVlanArrayOutput {
	return i.ToMetalVlanArrayOutputWithContext(context.Background())
}

func (i MetalVlanArray) ToMetalVlanArrayOutputWithContext(ctx context.Context) MetalVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalVlanArrayOutput)
}

// MetalVlanMapInput is an input type that accepts MetalVlanMap and MetalVlanMapOutput values.
// You can construct a concrete instance of `MetalVlanMapInput` via:
//
//          MetalVlanMap{ "key": MetalVlanArgs{...} }
type MetalVlanMapInput interface {
	pulumi.Input

	ToMetalVlanMapOutput() MetalVlanMapOutput
	ToMetalVlanMapOutputWithContext(context.Context) MetalVlanMapOutput
}

type MetalVlanMap map[string]MetalVlanInput

func (MetalVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalVlan)(nil)).Elem()
}

func (i MetalVlanMap) ToMetalVlanMapOutput() MetalVlanMapOutput {
	return i.ToMetalVlanMapOutputWithContext(context.Background())
}

func (i MetalVlanMap) ToMetalVlanMapOutputWithContext(ctx context.Context) MetalVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalVlanMapOutput)
}

type MetalVlanOutput struct{ *pulumi.OutputState }

func (MetalVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalVlan)(nil)).Elem()
}

func (o MetalVlanOutput) ToMetalVlanOutput() MetalVlanOutput {
	return o
}

func (o MetalVlanOutput) ToMetalVlanOutputWithContext(ctx context.Context) MetalVlanOutput {
	return o
}

// Description string.
func (o MetalVlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalVlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Facility where to create the VLAN.
func (o MetalVlanOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalVlan) pulumi.StringPtrOutput { return v.Facility }).(pulumi.StringPtrOutput)
}

func (o MetalVlanOutput) Metro() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalVlan) pulumi.StringPtrOutput { return v.Metro }).(pulumi.StringPtrOutput)
}

// ID of parent project.
func (o MetalVlanOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalVlan) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// VLAN ID, must be unique in metro.
func (o MetalVlanOutput) Vxlan() pulumi.IntOutput {
	return o.ApplyT(func(v *MetalVlan) pulumi.IntOutput { return v.Vxlan }).(pulumi.IntOutput)
}

type MetalVlanArrayOutput struct{ *pulumi.OutputState }

func (MetalVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalVlan)(nil)).Elem()
}

func (o MetalVlanArrayOutput) ToMetalVlanArrayOutput() MetalVlanArrayOutput {
	return o
}

func (o MetalVlanArrayOutput) ToMetalVlanArrayOutputWithContext(ctx context.Context) MetalVlanArrayOutput {
	return o
}

func (o MetalVlanArrayOutput) Index(i pulumi.IntInput) MetalVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetalVlan {
		return vs[0].([]*MetalVlan)[vs[1].(int)]
	}).(MetalVlanOutput)
}

type MetalVlanMapOutput struct{ *pulumi.OutputState }

func (MetalVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalVlan)(nil)).Elem()
}

func (o MetalVlanMapOutput) ToMetalVlanMapOutput() MetalVlanMapOutput {
	return o
}

func (o MetalVlanMapOutput) ToMetalVlanMapOutputWithContext(ctx context.Context) MetalVlanMapOutput {
	return o
}

func (o MetalVlanMapOutput) MapIndex(k pulumi.StringInput) MetalVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetalVlan {
		return vs[0].(map[string]*MetalVlan)[vs[1].(string)]
	}).(MetalVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetalVlanInput)(nil)).Elem(), &MetalVlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalVlanArrayInput)(nil)).Elem(), MetalVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalVlanMapInput)(nil)).Elem(), MetalVlanMap{})
	pulumi.RegisterOutputType(MetalVlanOutput{})
	pulumi.RegisterOutputType(MetalVlanArrayOutput{})
	pulumi.RegisterOutputType(MetalVlanMapOutput{})
}
