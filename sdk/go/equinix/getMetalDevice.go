// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Equinix Metal device datasource.
//
// > **Note:** All arguments including the `rootPassword` and `userData` will be stored in
//  the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		test, err := equinix.GetMetalDevice(ctx, &GetMetalDeviceArgs{
// 			ProjectId: pulumi.StringRef(local.Project_id),
// 			Hostname:  pulumi.StringRef("mydevice"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("id", test.Id)
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		test, err := equinix.GetMetalDevice(ctx, &GetMetalDeviceArgs{
// 			DeviceId: pulumi.StringRef("4c641195-25e5-4c3c-b2b7-4cd7a42c7b40"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("ipv4", test.AccessPublicIpv4)
// 		return nil
// 	})
// }
// ```
func LookupMetalDevice(ctx *pulumi.Context, args *LookupMetalDeviceArgs, opts ...pulumi.InvokeOption) (*LookupMetalDeviceResult, error) {
	var rv LookupMetalDeviceResult
	err := ctx.Invoke("equinix:index/getMetalDevice:GetMetalDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetMetalDevice.
type LookupMetalDeviceArgs struct {
	// Device ID.
	DeviceId *string `pulumi:"deviceId"`
	// The device name.
	Hostname *string `pulumi:"hostname"`
	// The id of the project in which the devices exists.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by GetMetalDevice.
type LookupMetalDeviceResult struct {
	// The ipv4 private IP assigned to the device.
	AccessPrivateIpv4 string `pulumi:"accessPrivateIpv4"`
	// The ipv4 management IP assigned to the device.
	AccessPublicIpv4 string `pulumi:"accessPublicIpv4"`
	// The ipv6 management IP assigned to the device.
	AccessPublicIpv6 string `pulumi:"accessPublicIpv6"`
	AlwaysPxe        bool   `pulumi:"alwaysPxe"`
	// The billing cycle of the device (monthly or hourly).
	BillingCycle string `pulumi:"billingCycle"`
	// Description string for the device.
	Description string `pulumi:"description"`
	DeviceId    string `pulumi:"deviceId"`
	// The facility where the device is deployed.
	Facility string `pulumi:"facility"`
	// The id of hardware reservation which this device occupies.
	HardwareReservationId string `pulumi:"hardwareReservationId"`
	Hostname              string `pulumi:"hostname"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	IpxeScriptUrl string `pulumi:"ipxeScriptUrl"`
	// The metro where the device is deployed
	Metro string `pulumi:"metro"`
	// L2 network type of the device, one of `layer3`, `layer2-bonded`,
	// `layer2-individual`, `hybrid`.
	NetworkType string `pulumi:"networkType"`
	// The device's private and public IP (v4 and v6) network details. See
	// Network Attribute below for more details.
	Networks []GetMetalDeviceNetwork `pulumi:"networks"`
	// The operating system running on the device.
	OperatingSystem string `pulumi:"operatingSystem"`
	// The hardware config of the device.
	Plan string `pulumi:"plan"`
	// List of ports assigned to the device. See Ports Attribute below for
	// more details.
	Ports     []GetMetalDevicePort `pulumi:"ports"`
	ProjectId string               `pulumi:"projectId"`
	// Root password to the server (if still available).
	RootPassword string `pulumi:"rootPassword"`
	// List of IDs of SSH keys deployed in the device, can be both user or project SSH keys.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The state of the device.
	State   string `pulumi:"state"`
	Storage string `pulumi:"storage"`
	// Tags attached to the device.
	Tags []string `pulumi:"tags"`
}

func LookupMetalDeviceOutput(ctx *pulumi.Context, args LookupMetalDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupMetalDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetalDeviceResult, error) {
			args := v.(LookupMetalDeviceArgs)
			r, err := LookupMetalDevice(ctx, &args, opts...)
			var s LookupMetalDeviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetalDeviceResultOutput)
}

// A collection of arguments for invoking GetMetalDevice.
type LookupMetalDeviceOutputArgs struct {
	// Device ID.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The device name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The id of the project in which the devices exists.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupMetalDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalDeviceArgs)(nil)).Elem()
}

// A collection of values returned by GetMetalDevice.
type LookupMetalDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupMetalDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalDeviceResult)(nil)).Elem()
}

func (o LookupMetalDeviceResultOutput) ToLookupMetalDeviceResultOutput() LookupMetalDeviceResultOutput {
	return o
}

func (o LookupMetalDeviceResultOutput) ToLookupMetalDeviceResultOutputWithContext(ctx context.Context) LookupMetalDeviceResultOutput {
	return o
}

// The ipv4 private IP assigned to the device.
func (o LookupMetalDeviceResultOutput) AccessPrivateIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.AccessPrivateIpv4 }).(pulumi.StringOutput)
}

// The ipv4 management IP assigned to the device.
func (o LookupMetalDeviceResultOutput) AccessPublicIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.AccessPublicIpv4 }).(pulumi.StringOutput)
}

// The ipv6 management IP assigned to the device.
func (o LookupMetalDeviceResultOutput) AccessPublicIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.AccessPublicIpv6 }).(pulumi.StringOutput)
}

func (o LookupMetalDeviceResultOutput) AlwaysPxe() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) bool { return v.AlwaysPxe }).(pulumi.BoolOutput)
}

// The billing cycle of the device (monthly or hourly).
func (o LookupMetalDeviceResultOutput) BillingCycle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.BillingCycle }).(pulumi.StringOutput)
}

// Description string for the device.
func (o LookupMetalDeviceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupMetalDeviceResultOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.DeviceId }).(pulumi.StringOutput)
}

// The facility where the device is deployed.
func (o LookupMetalDeviceResultOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Facility }).(pulumi.StringOutput)
}

// The id of hardware reservation which this device occupies.
func (o LookupMetalDeviceResultOutput) HardwareReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.HardwareReservationId }).(pulumi.StringOutput)
}

func (o LookupMetalDeviceResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetalDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetalDeviceResultOutput) IpxeScriptUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.IpxeScriptUrl }).(pulumi.StringOutput)
}

// The metro where the device is deployed
func (o LookupMetalDeviceResultOutput) Metro() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Metro }).(pulumi.StringOutput)
}

// L2 network type of the device, one of `layer3`, `layer2-bonded`,
// `layer2-individual`, `hybrid`.
func (o LookupMetalDeviceResultOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The device's private and public IP (v4 and v6) network details. See
// Network Attribute below for more details.
func (o LookupMetalDeviceResultOutput) Networks() GetMetalDeviceNetworkArrayOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) []GetMetalDeviceNetwork { return v.Networks }).(GetMetalDeviceNetworkArrayOutput)
}

// The operating system running on the device.
func (o LookupMetalDeviceResultOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

// The hardware config of the device.
func (o LookupMetalDeviceResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Plan }).(pulumi.StringOutput)
}

// List of ports assigned to the device. See Ports Attribute below for
// more details.
func (o LookupMetalDeviceResultOutput) Ports() GetMetalDevicePortArrayOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) []GetMetalDevicePort { return v.Ports }).(GetMetalDevicePortArrayOutput)
}

func (o LookupMetalDeviceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Root password to the server (if still available).
func (o LookupMetalDeviceResultOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.RootPassword }).(pulumi.StringOutput)
}

// List of IDs of SSH keys deployed in the device, can be both user or project SSH keys.
func (o LookupMetalDeviceResultOutput) SshKeyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) []string { return v.SshKeyIds }).(pulumi.StringArrayOutput)
}

// The state of the device.
func (o LookupMetalDeviceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupMetalDeviceResultOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) string { return v.Storage }).(pulumi.StringOutput)
}

// Tags attached to the device.
func (o LookupMetalDeviceResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMetalDeviceResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetalDeviceResultOutput{})
}
