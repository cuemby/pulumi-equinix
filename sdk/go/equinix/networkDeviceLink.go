// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `NetworkDeviceLink` allows creation and management of Equinix
// Network Edge virtual network device links.
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/networkDeviceLink:NetworkDeviceLink example {existing_id}
// ```
type NetworkDeviceLink struct {
	pulumi.CustomResourceState

	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Devices NetworkDeviceLinkDeviceArrayOutput `pulumi:"devices"`
	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	Links NetworkDeviceLinkLinkArrayOutput `pulumi:"links"`
	// device link name.
	Name pulumi.StringOutput `pulumi:"name"`
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	Subnet pulumi.StringPtrOutput `pulumi:"subnet"`
	// Device link unique identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewNetworkDeviceLink registers a new resource with the given unique name, arguments, and options.
func NewNetworkDeviceLink(ctx *pulumi.Context,
	name string, args *NetworkDeviceLinkArgs, opts ...pulumi.ResourceOption) (*NetworkDeviceLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Devices == nil {
		return nil, errors.New("invalid value for required argument 'Devices'")
	}
	var resource NetworkDeviceLink
	err := ctx.RegisterResource("equinix:index/networkDeviceLink:NetworkDeviceLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkDeviceLink gets an existing NetworkDeviceLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkDeviceLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkDeviceLinkState, opts ...pulumi.ResourceOption) (*NetworkDeviceLink, error) {
	var resource NetworkDeviceLink
	err := ctx.ReadResource("equinix:index/networkDeviceLink:NetworkDeviceLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkDeviceLink resources.
type networkDeviceLinkState struct {
	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Devices []NetworkDeviceLinkDevice `pulumi:"devices"`
	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	Links []NetworkDeviceLinkLink `pulumi:"links"`
	// device link name.
	Name *string `pulumi:"name"`
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status *string `pulumi:"status"`
	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	Subnet *string `pulumi:"subnet"`
	// Device link unique identifier.
	Uuid *string `pulumi:"uuid"`
}

type NetworkDeviceLinkState struct {
	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Devices NetworkDeviceLinkDeviceArrayInput
	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	Links NetworkDeviceLinkLinkArrayInput
	// device link name.
	Name pulumi.StringPtrInput
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status pulumi.StringPtrInput
	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	Subnet pulumi.StringPtrInput
	// Device link unique identifier.
	Uuid pulumi.StringPtrInput
}

func (NetworkDeviceLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkDeviceLinkState)(nil)).Elem()
}

type networkDeviceLinkArgs struct {
	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Devices []NetworkDeviceLinkDevice `pulumi:"devices"`
	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	Links []NetworkDeviceLinkLink `pulumi:"links"`
	// device link name.
	Name *string `pulumi:"name"`
	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	Subnet *string `pulumi:"subnet"`
}

// The set of arguments for constructing a NetworkDeviceLink resource.
type NetworkDeviceLinkArgs struct {
	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Devices NetworkDeviceLinkDeviceArrayInput
	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	Links NetworkDeviceLinkLinkArrayInput
	// device link name.
	Name pulumi.StringPtrInput
	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	Subnet pulumi.StringPtrInput
}

func (NetworkDeviceLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkDeviceLinkArgs)(nil)).Elem()
}

type NetworkDeviceLinkInput interface {
	pulumi.Input

	ToNetworkDeviceLinkOutput() NetworkDeviceLinkOutput
	ToNetworkDeviceLinkOutputWithContext(ctx context.Context) NetworkDeviceLinkOutput
}

func (*NetworkDeviceLink) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceLink)(nil)).Elem()
}

func (i *NetworkDeviceLink) ToNetworkDeviceLinkOutput() NetworkDeviceLinkOutput {
	return i.ToNetworkDeviceLinkOutputWithContext(context.Background())
}

func (i *NetworkDeviceLink) ToNetworkDeviceLinkOutputWithContext(ctx context.Context) NetworkDeviceLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkOutput)
}

// NetworkDeviceLinkArrayInput is an input type that accepts NetworkDeviceLinkArray and NetworkDeviceLinkArrayOutput values.
// You can construct a concrete instance of `NetworkDeviceLinkArrayInput` via:
//
//          NetworkDeviceLinkArray{ NetworkDeviceLinkArgs{...} }
type NetworkDeviceLinkArrayInput interface {
	pulumi.Input

	ToNetworkDeviceLinkArrayOutput() NetworkDeviceLinkArrayOutput
	ToNetworkDeviceLinkArrayOutputWithContext(context.Context) NetworkDeviceLinkArrayOutput
}

type NetworkDeviceLinkArray []NetworkDeviceLinkInput

func (NetworkDeviceLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkDeviceLink)(nil)).Elem()
}

func (i NetworkDeviceLinkArray) ToNetworkDeviceLinkArrayOutput() NetworkDeviceLinkArrayOutput {
	return i.ToNetworkDeviceLinkArrayOutputWithContext(context.Background())
}

func (i NetworkDeviceLinkArray) ToNetworkDeviceLinkArrayOutputWithContext(ctx context.Context) NetworkDeviceLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkArrayOutput)
}

// NetworkDeviceLinkMapInput is an input type that accepts NetworkDeviceLinkMap and NetworkDeviceLinkMapOutput values.
// You can construct a concrete instance of `NetworkDeviceLinkMapInput` via:
//
//          NetworkDeviceLinkMap{ "key": NetworkDeviceLinkArgs{...} }
type NetworkDeviceLinkMapInput interface {
	pulumi.Input

	ToNetworkDeviceLinkMapOutput() NetworkDeviceLinkMapOutput
	ToNetworkDeviceLinkMapOutputWithContext(context.Context) NetworkDeviceLinkMapOutput
}

type NetworkDeviceLinkMap map[string]NetworkDeviceLinkInput

func (NetworkDeviceLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkDeviceLink)(nil)).Elem()
}

func (i NetworkDeviceLinkMap) ToNetworkDeviceLinkMapOutput() NetworkDeviceLinkMapOutput {
	return i.ToNetworkDeviceLinkMapOutputWithContext(context.Background())
}

func (i NetworkDeviceLinkMap) ToNetworkDeviceLinkMapOutputWithContext(ctx context.Context) NetworkDeviceLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkMapOutput)
}

type NetworkDeviceLinkOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceLink)(nil)).Elem()
}

func (o NetworkDeviceLinkOutput) ToNetworkDeviceLinkOutput() NetworkDeviceLinkOutput {
	return o
}

func (o NetworkDeviceLinkOutput) ToNetworkDeviceLinkOutputWithContext(ctx context.Context) NetworkDeviceLinkOutput {
	return o
}

// definition of one or more devices belonging to the
// device link. See Device section below for more details.
func (o NetworkDeviceLinkOutput) Devices() NetworkDeviceLinkDeviceArrayOutput {
	return o.ApplyT(func(v *NetworkDeviceLink) NetworkDeviceLinkDeviceArrayOutput { return v.Devices }).(NetworkDeviceLinkDeviceArrayOutput)
}

// definition of one or more, inter metro, connections belonging
// to the device link. See Link section below for more details.
func (o NetworkDeviceLinkOutput) Links() NetworkDeviceLinkLinkArrayOutput {
	return o.ApplyT(func(v *NetworkDeviceLink) NetworkDeviceLinkLinkArrayOutput { return v.Links }).(NetworkDeviceLinkLinkArrayOutput)
}

// device link name.
func (o NetworkDeviceLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDeviceLink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// device link provisioning status on a given device. One of `PROVISIONING`,
// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
func (o NetworkDeviceLinkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDeviceLink) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// device link subnet in CIDR format. Not required for link
// between self configured devices.
func (o NetworkDeviceLinkOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceLink) pulumi.StringPtrOutput { return v.Subnet }).(pulumi.StringPtrOutput)
}

// Device link unique identifier.
func (o NetworkDeviceLinkOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDeviceLink) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type NetworkDeviceLinkArrayOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkDeviceLink)(nil)).Elem()
}

func (o NetworkDeviceLinkArrayOutput) ToNetworkDeviceLinkArrayOutput() NetworkDeviceLinkArrayOutput {
	return o
}

func (o NetworkDeviceLinkArrayOutput) ToNetworkDeviceLinkArrayOutputWithContext(ctx context.Context) NetworkDeviceLinkArrayOutput {
	return o
}

func (o NetworkDeviceLinkArrayOutput) Index(i pulumi.IntInput) NetworkDeviceLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkDeviceLink {
		return vs[0].([]*NetworkDeviceLink)[vs[1].(int)]
	}).(NetworkDeviceLinkOutput)
}

type NetworkDeviceLinkMapOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkDeviceLink)(nil)).Elem()
}

func (o NetworkDeviceLinkMapOutput) ToNetworkDeviceLinkMapOutput() NetworkDeviceLinkMapOutput {
	return o
}

func (o NetworkDeviceLinkMapOutput) ToNetworkDeviceLinkMapOutputWithContext(ctx context.Context) NetworkDeviceLinkMapOutput {
	return o
}

func (o NetworkDeviceLinkMapOutput) MapIndex(k pulumi.StringInput) NetworkDeviceLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkDeviceLink {
		return vs[0].(map[string]*NetworkDeviceLink)[vs[1].(string)]
	}).(NetworkDeviceLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkInput)(nil)).Elem(), &NetworkDeviceLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkArrayInput)(nil)).Elem(), NetworkDeviceLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkMapInput)(nil)).Elem(), NetworkDeviceLinkMap{})
	pulumi.RegisterOutputType(NetworkDeviceLinkOutput{})
	pulumi.RegisterOutputType(NetworkDeviceLinkArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceLinkMapOutput{})
}
