// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get Equinix Network Edge device type details. For further details, check supported
// [Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/cuemby/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.GetNetworkDeviceType(ctx, &GetNetworkDeviceTypeArgs{
// 			Category: pulumi.StringRef("Router"),
// 			MetroCodes: []string{
// 				"DC",
// 				"SV",
// 			},
// 			Vendor: pulumi.StringRef("Cisco"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetNetworkDeviceType(ctx *pulumi.Context, args *GetNetworkDeviceTypeArgs, opts ...pulumi.InvokeOption) (*GetNetworkDeviceTypeResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetNetworkDeviceTypeResult
	err := ctx.Invoke("equinix:index/getNetworkDeviceType:GetNetworkDeviceType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetNetworkDeviceType.
type GetNetworkDeviceTypeArgs struct {
	// Device type category. One of: `Router`, `Firewall`, `SDWAN`.
	Category *string `pulumi:"category"`
	// List of metro codes where device type has to be available
	MetroCodes []string `pulumi:"metroCodes"`
	// Device type name.
	Name *string `pulumi:"name"`
	// Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.
	Vendor *string `pulumi:"vendor"`
}

// A collection of values returned by GetNetworkDeviceType.
type GetNetworkDeviceTypeResult struct {
	Category string `pulumi:"category"`
	// Device type short code, unique identifier of a network device type
	Code string `pulumi:"code"`
	// Device type textual description
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	MetroCodes []string `pulumi:"metroCodes"`
	Name       string   `pulumi:"name"`
	Vendor     string   `pulumi:"vendor"`
}

func GetNetworkDeviceTypeOutput(ctx *pulumi.Context, args GetNetworkDeviceTypeOutputArgs, opts ...pulumi.InvokeOption) GetNetworkDeviceTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNetworkDeviceTypeResult, error) {
			args := v.(GetNetworkDeviceTypeArgs)
			r, err := GetNetworkDeviceType(ctx, &args, opts...)
			var s GetNetworkDeviceTypeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNetworkDeviceTypeResultOutput)
}

// A collection of arguments for invoking GetNetworkDeviceType.
type GetNetworkDeviceTypeOutputArgs struct {
	// Device type category. One of: `Router`, `Firewall`, `SDWAN`.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// List of metro codes where device type has to be available
	MetroCodes pulumi.StringArrayInput `pulumi:"metroCodes"`
	// Device type name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
}

func (GetNetworkDeviceTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceTypeArgs)(nil)).Elem()
}

// A collection of values returned by GetNetworkDeviceType.
type GetNetworkDeviceTypeResultOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceTypeResult)(nil)).Elem()
}

func (o GetNetworkDeviceTypeResultOutput) ToGetNetworkDeviceTypeResultOutput() GetNetworkDeviceTypeResultOutput {
	return o
}

func (o GetNetworkDeviceTypeResultOutput) ToGetNetworkDeviceTypeResultOutputWithContext(ctx context.Context) GetNetworkDeviceTypeResultOutput {
	return o
}

func (o GetNetworkDeviceTypeResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) string { return v.Category }).(pulumi.StringOutput)
}

// Device type short code, unique identifier of a network device type
func (o GetNetworkDeviceTypeResultOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) string { return v.Code }).(pulumi.StringOutput)
}

// Device type textual description
func (o GetNetworkDeviceTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNetworkDeviceTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceTypeResultOutput) MetroCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) []string { return v.MetroCodes }).(pulumi.StringArrayOutput)
}

func (o GetNetworkDeviceTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceTypeResultOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceTypeResult) string { return v.Vendor }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNetworkDeviceTypeResultOutput{})
}
