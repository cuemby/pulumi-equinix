// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `NetworkBGP` allows creation and management of Equinix Network
// Edge BGP peering configurations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/cuemby/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.NewNetworkBGP(ctx, "test", &equinix.NetworkBGPArgs{
// 			AuthenticationKey: pulumi.String("secret"),
// 			ConnectionId:      pulumi.String("54014acf-9730-4b55-a791-459283d05fb1"),
// 			LocalAsn:          pulumi.Int(12345),
// 			LocalIpAddress:    pulumi.String("10.1.1.1/30"),
// 			RemoteAsn:         pulumi.Int(66123),
// 			RemoteIpAddress:   pulumi.String("10.1.1.2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/networkBGP:NetworkBGP example {existing_id}
// ```
type NetworkBGP struct {
	pulumi.CustomResourceState

	// shared key used for BGP peer authentication.
	AuthenticationKey pulumi.StringPtrOutput `pulumi:"authenticationKey"`
	// identifier of a connection established between.
	// network device and remote service provider that will be used for peering.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// unique identifier of a network device that is a local peer in a given BGP peering
	// configuration.
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// Local ASN number.
	LocalAsn pulumi.IntOutput `pulumi:"localAsn"`
	// IP address in CIDR format of a local device.
	LocalIpAddress pulumi.StringOutput `pulumi:"localIpAddress"`
	// BGP peering configuration provisioning status, one of `PROVISIONING`,
	// `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
	ProvisioningStatus pulumi.StringOutput `pulumi:"provisioningStatus"`
	// Remote ASN number.
	RemoteAsn pulumi.IntOutput `pulumi:"remoteAsn"`
	// IP address of remote peer.
	RemoteIpAddress pulumi.StringOutput `pulumi:"remoteIpAddress"`
	// BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
	// `Established`.
	State pulumi.StringOutput `pulumi:"state"`
	// BGP peering configuration unique identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewNetworkBGP registers a new resource with the given unique name, arguments, and options.
func NewNetworkBGP(ctx *pulumi.Context,
	name string, args *NetworkBGPArgs, opts ...pulumi.ResourceOption) (*NetworkBGP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.LocalAsn == nil {
		return nil, errors.New("invalid value for required argument 'LocalAsn'")
	}
	if args.LocalIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'LocalIpAddress'")
	}
	if args.RemoteAsn == nil {
		return nil, errors.New("invalid value for required argument 'RemoteAsn'")
	}
	if args.RemoteIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'RemoteIpAddress'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NetworkBGP
	err := ctx.RegisterResource("equinix:index/networkBGP:NetworkBGP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkBGP gets an existing NetworkBGP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkBGP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkBGPState, opts ...pulumi.ResourceOption) (*NetworkBGP, error) {
	var resource NetworkBGP
	err := ctx.ReadResource("equinix:index/networkBGP:NetworkBGP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkBGP resources.
type networkBGPState struct {
	// shared key used for BGP peer authentication.
	AuthenticationKey *string `pulumi:"authenticationKey"`
	// identifier of a connection established between.
	// network device and remote service provider that will be used for peering.
	ConnectionId *string `pulumi:"connectionId"`
	// unique identifier of a network device that is a local peer in a given BGP peering
	// configuration.
	DeviceId *string `pulumi:"deviceId"`
	// Local ASN number.
	LocalAsn *int `pulumi:"localAsn"`
	// IP address in CIDR format of a local device.
	LocalIpAddress *string `pulumi:"localIpAddress"`
	// BGP peering configuration provisioning status, one of `PROVISIONING`,
	// `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Remote ASN number.
	RemoteAsn *int `pulumi:"remoteAsn"`
	// IP address of remote peer.
	RemoteIpAddress *string `pulumi:"remoteIpAddress"`
	// BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
	// `Established`.
	State *string `pulumi:"state"`
	// BGP peering configuration unique identifier.
	Uuid *string `pulumi:"uuid"`
}

type NetworkBGPState struct {
	// shared key used for BGP peer authentication.
	AuthenticationKey pulumi.StringPtrInput
	// identifier of a connection established between.
	// network device and remote service provider that will be used for peering.
	ConnectionId pulumi.StringPtrInput
	// unique identifier of a network device that is a local peer in a given BGP peering
	// configuration.
	DeviceId pulumi.StringPtrInput
	// Local ASN number.
	LocalAsn pulumi.IntPtrInput
	// IP address in CIDR format of a local device.
	LocalIpAddress pulumi.StringPtrInput
	// BGP peering configuration provisioning status, one of `PROVISIONING`,
	// `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
	ProvisioningStatus pulumi.StringPtrInput
	// Remote ASN number.
	RemoteAsn pulumi.IntPtrInput
	// IP address of remote peer.
	RemoteIpAddress pulumi.StringPtrInput
	// BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
	// `Established`.
	State pulumi.StringPtrInput
	// BGP peering configuration unique identifier.
	Uuid pulumi.StringPtrInput
}

func (NetworkBGPState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkBGPState)(nil)).Elem()
}

type networkBGPArgs struct {
	// shared key used for BGP peer authentication.
	AuthenticationKey *string `pulumi:"authenticationKey"`
	// identifier of a connection established between.
	// network device and remote service provider that will be used for peering.
	ConnectionId string `pulumi:"connectionId"`
	// Local ASN number.
	LocalAsn int `pulumi:"localAsn"`
	// IP address in CIDR format of a local device.
	LocalIpAddress string `pulumi:"localIpAddress"`
	// Remote ASN number.
	RemoteAsn int `pulumi:"remoteAsn"`
	// IP address of remote peer.
	RemoteIpAddress string `pulumi:"remoteIpAddress"`
}

// The set of arguments for constructing a NetworkBGP resource.
type NetworkBGPArgs struct {
	// shared key used for BGP peer authentication.
	AuthenticationKey pulumi.StringPtrInput
	// identifier of a connection established between.
	// network device and remote service provider that will be used for peering.
	ConnectionId pulumi.StringInput
	// Local ASN number.
	LocalAsn pulumi.IntInput
	// IP address in CIDR format of a local device.
	LocalIpAddress pulumi.StringInput
	// Remote ASN number.
	RemoteAsn pulumi.IntInput
	// IP address of remote peer.
	RemoteIpAddress pulumi.StringInput
}

func (NetworkBGPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkBGPArgs)(nil)).Elem()
}

type NetworkBGPInput interface {
	pulumi.Input

	ToNetworkBGPOutput() NetworkBGPOutput
	ToNetworkBGPOutputWithContext(ctx context.Context) NetworkBGPOutput
}

func (*NetworkBGP) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkBGP)(nil)).Elem()
}

func (i *NetworkBGP) ToNetworkBGPOutput() NetworkBGPOutput {
	return i.ToNetworkBGPOutputWithContext(context.Background())
}

func (i *NetworkBGP) ToNetworkBGPOutputWithContext(ctx context.Context) NetworkBGPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkBGPOutput)
}

// NetworkBGPArrayInput is an input type that accepts NetworkBGPArray and NetworkBGPArrayOutput values.
// You can construct a concrete instance of `NetworkBGPArrayInput` via:
//
//          NetworkBGPArray{ NetworkBGPArgs{...} }
type NetworkBGPArrayInput interface {
	pulumi.Input

	ToNetworkBGPArrayOutput() NetworkBGPArrayOutput
	ToNetworkBGPArrayOutputWithContext(context.Context) NetworkBGPArrayOutput
}

type NetworkBGPArray []NetworkBGPInput

func (NetworkBGPArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkBGP)(nil)).Elem()
}

func (i NetworkBGPArray) ToNetworkBGPArrayOutput() NetworkBGPArrayOutput {
	return i.ToNetworkBGPArrayOutputWithContext(context.Background())
}

func (i NetworkBGPArray) ToNetworkBGPArrayOutputWithContext(ctx context.Context) NetworkBGPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkBGPArrayOutput)
}

// NetworkBGPMapInput is an input type that accepts NetworkBGPMap and NetworkBGPMapOutput values.
// You can construct a concrete instance of `NetworkBGPMapInput` via:
//
//          NetworkBGPMap{ "key": NetworkBGPArgs{...} }
type NetworkBGPMapInput interface {
	pulumi.Input

	ToNetworkBGPMapOutput() NetworkBGPMapOutput
	ToNetworkBGPMapOutputWithContext(context.Context) NetworkBGPMapOutput
}

type NetworkBGPMap map[string]NetworkBGPInput

func (NetworkBGPMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkBGP)(nil)).Elem()
}

func (i NetworkBGPMap) ToNetworkBGPMapOutput() NetworkBGPMapOutput {
	return i.ToNetworkBGPMapOutputWithContext(context.Background())
}

func (i NetworkBGPMap) ToNetworkBGPMapOutputWithContext(ctx context.Context) NetworkBGPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkBGPMapOutput)
}

type NetworkBGPOutput struct{ *pulumi.OutputState }

func (NetworkBGPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkBGP)(nil)).Elem()
}

func (o NetworkBGPOutput) ToNetworkBGPOutput() NetworkBGPOutput {
	return o
}

func (o NetworkBGPOutput) ToNetworkBGPOutputWithContext(ctx context.Context) NetworkBGPOutput {
	return o
}

// shared key used for BGP peer authentication.
func (o NetworkBGPOutput) AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringPtrOutput { return v.AuthenticationKey }).(pulumi.StringPtrOutput)
}

// identifier of a connection established between.
// network device and remote service provider that will be used for peering.
func (o NetworkBGPOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// unique identifier of a network device that is a local peer in a given BGP peering
// configuration.
func (o NetworkBGPOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

// Local ASN number.
func (o NetworkBGPOutput) LocalAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.IntOutput { return v.LocalAsn }).(pulumi.IntOutput)
}

// IP address in CIDR format of a local device.
func (o NetworkBGPOutput) LocalIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.LocalIpAddress }).(pulumi.StringOutput)
}

// BGP peering configuration provisioning status, one of `PROVISIONING`,
// `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
func (o NetworkBGPOutput) ProvisioningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.ProvisioningStatus }).(pulumi.StringOutput)
}

// Remote ASN number.
func (o NetworkBGPOutput) RemoteAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.IntOutput { return v.RemoteAsn }).(pulumi.IntOutput)
}

// IP address of remote peer.
func (o NetworkBGPOutput) RemoteIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.RemoteIpAddress }).(pulumi.StringOutput)
}

// BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
// `Established`.
func (o NetworkBGPOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// BGP peering configuration unique identifier.
func (o NetworkBGPOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBGP) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type NetworkBGPArrayOutput struct{ *pulumi.OutputState }

func (NetworkBGPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkBGP)(nil)).Elem()
}

func (o NetworkBGPArrayOutput) ToNetworkBGPArrayOutput() NetworkBGPArrayOutput {
	return o
}

func (o NetworkBGPArrayOutput) ToNetworkBGPArrayOutputWithContext(ctx context.Context) NetworkBGPArrayOutput {
	return o
}

func (o NetworkBGPArrayOutput) Index(i pulumi.IntInput) NetworkBGPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkBGP {
		return vs[0].([]*NetworkBGP)[vs[1].(int)]
	}).(NetworkBGPOutput)
}

type NetworkBGPMapOutput struct{ *pulumi.OutputState }

func (NetworkBGPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkBGP)(nil)).Elem()
}

func (o NetworkBGPMapOutput) ToNetworkBGPMapOutput() NetworkBGPMapOutput {
	return o
}

func (o NetworkBGPMapOutput) ToNetworkBGPMapOutputWithContext(ctx context.Context) NetworkBGPMapOutput {
	return o
}

func (o NetworkBGPMapOutput) MapIndex(k pulumi.StringInput) NetworkBGPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkBGP {
		return vs[0].(map[string]*NetworkBGP)[vs[1].(string)]
	}).(NetworkBGPOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkBGPInput)(nil)).Elem(), &NetworkBGP{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkBGPArrayInput)(nil)).Elem(), NetworkBGPArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkBGPMapInput)(nil)).Elem(), NetworkBGPMap{})
	pulumi.RegisterOutputType(NetworkBGPOutput{})
	pulumi.RegisterOutputType(NetworkBGPArrayOutput{})
	pulumi.RegisterOutputType(NetworkBGPMapOutput{})
}
