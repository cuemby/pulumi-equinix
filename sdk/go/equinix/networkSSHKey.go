// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `NetworkSSHKey` allows creation and management of Equinix Network Edge SSH keys.
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/networkSSHKey:NetworkSSHKey example {existing_id}
// ```
type NetworkSSHKey struct {
	pulumi.CustomResourceState

	// The name of SSH key used for identification.
	Name pulumi.StringOutput `pulumi:"name"`
	// The SSH public key. If this is a file, it can be read using the file
	// interpolation function.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The unique identifier of the key
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewNetworkSSHKey registers a new resource with the given unique name, arguments, and options.
func NewNetworkSSHKey(ctx *pulumi.Context,
	name string, args *NetworkSSHKeyArgs, opts ...pulumi.ResourceOption) (*NetworkSSHKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	var resource NetworkSSHKey
	err := ctx.RegisterResource("equinix:index/networkSSHKey:NetworkSSHKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSSHKey gets an existing NetworkSSHKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSSHKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSSHKeyState, opts ...pulumi.ResourceOption) (*NetworkSSHKey, error) {
	var resource NetworkSSHKey
	err := ctx.ReadResource("equinix:index/networkSSHKey:NetworkSSHKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSSHKey resources.
type networkSSHKeyState struct {
	// The name of SSH key used for identification.
	Name *string `pulumi:"name"`
	// The SSH public key. If this is a file, it can be read using the file
	// interpolation function.
	PublicKey *string `pulumi:"publicKey"`
	// The unique identifier of the key
	Uuid *string `pulumi:"uuid"`
}

type NetworkSSHKeyState struct {
	// The name of SSH key used for identification.
	Name pulumi.StringPtrInput
	// The SSH public key. If this is a file, it can be read using the file
	// interpolation function.
	PublicKey pulumi.StringPtrInput
	// The unique identifier of the key
	Uuid pulumi.StringPtrInput
}

func (NetworkSSHKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSSHKeyState)(nil)).Elem()
}

type networkSSHKeyArgs struct {
	// The name of SSH key used for identification.
	Name *string `pulumi:"name"`
	// The SSH public key. If this is a file, it can be read using the file
	// interpolation function.
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a NetworkSSHKey resource.
type NetworkSSHKeyArgs struct {
	// The name of SSH key used for identification.
	Name pulumi.StringPtrInput
	// The SSH public key. If this is a file, it can be read using the file
	// interpolation function.
	PublicKey pulumi.StringInput
}

func (NetworkSSHKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSSHKeyArgs)(nil)).Elem()
}

type NetworkSSHKeyInput interface {
	pulumi.Input

	ToNetworkSSHKeyOutput() NetworkSSHKeyOutput
	ToNetworkSSHKeyOutputWithContext(ctx context.Context) NetworkSSHKeyOutput
}

func (*NetworkSSHKey) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSSHKey)(nil)).Elem()
}

func (i *NetworkSSHKey) ToNetworkSSHKeyOutput() NetworkSSHKeyOutput {
	return i.ToNetworkSSHKeyOutputWithContext(context.Background())
}

func (i *NetworkSSHKey) ToNetworkSSHKeyOutputWithContext(ctx context.Context) NetworkSSHKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSSHKeyOutput)
}

// NetworkSSHKeyArrayInput is an input type that accepts NetworkSSHKeyArray and NetworkSSHKeyArrayOutput values.
// You can construct a concrete instance of `NetworkSSHKeyArrayInput` via:
//
//          NetworkSSHKeyArray{ NetworkSSHKeyArgs{...} }
type NetworkSSHKeyArrayInput interface {
	pulumi.Input

	ToNetworkSSHKeyArrayOutput() NetworkSSHKeyArrayOutput
	ToNetworkSSHKeyArrayOutputWithContext(context.Context) NetworkSSHKeyArrayOutput
}

type NetworkSSHKeyArray []NetworkSSHKeyInput

func (NetworkSSHKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSSHKey)(nil)).Elem()
}

func (i NetworkSSHKeyArray) ToNetworkSSHKeyArrayOutput() NetworkSSHKeyArrayOutput {
	return i.ToNetworkSSHKeyArrayOutputWithContext(context.Background())
}

func (i NetworkSSHKeyArray) ToNetworkSSHKeyArrayOutputWithContext(ctx context.Context) NetworkSSHKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSSHKeyArrayOutput)
}

// NetworkSSHKeyMapInput is an input type that accepts NetworkSSHKeyMap and NetworkSSHKeyMapOutput values.
// You can construct a concrete instance of `NetworkSSHKeyMapInput` via:
//
//          NetworkSSHKeyMap{ "key": NetworkSSHKeyArgs{...} }
type NetworkSSHKeyMapInput interface {
	pulumi.Input

	ToNetworkSSHKeyMapOutput() NetworkSSHKeyMapOutput
	ToNetworkSSHKeyMapOutputWithContext(context.Context) NetworkSSHKeyMapOutput
}

type NetworkSSHKeyMap map[string]NetworkSSHKeyInput

func (NetworkSSHKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSSHKey)(nil)).Elem()
}

func (i NetworkSSHKeyMap) ToNetworkSSHKeyMapOutput() NetworkSSHKeyMapOutput {
	return i.ToNetworkSSHKeyMapOutputWithContext(context.Background())
}

func (i NetworkSSHKeyMap) ToNetworkSSHKeyMapOutputWithContext(ctx context.Context) NetworkSSHKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSSHKeyMapOutput)
}

type NetworkSSHKeyOutput struct{ *pulumi.OutputState }

func (NetworkSSHKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSSHKey)(nil)).Elem()
}

func (o NetworkSSHKeyOutput) ToNetworkSSHKeyOutput() NetworkSSHKeyOutput {
	return o
}

func (o NetworkSSHKeyOutput) ToNetworkSSHKeyOutputWithContext(ctx context.Context) NetworkSSHKeyOutput {
	return o
}

// The name of SSH key used for identification.
func (o NetworkSSHKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSSHKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The SSH public key. If this is a file, it can be read using the file
// interpolation function.
func (o NetworkSSHKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSSHKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The unique identifier of the key
func (o NetworkSSHKeyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSSHKey) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type NetworkSSHKeyArrayOutput struct{ *pulumi.OutputState }

func (NetworkSSHKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSSHKey)(nil)).Elem()
}

func (o NetworkSSHKeyArrayOutput) ToNetworkSSHKeyArrayOutput() NetworkSSHKeyArrayOutput {
	return o
}

func (o NetworkSSHKeyArrayOutput) ToNetworkSSHKeyArrayOutputWithContext(ctx context.Context) NetworkSSHKeyArrayOutput {
	return o
}

func (o NetworkSSHKeyArrayOutput) Index(i pulumi.IntInput) NetworkSSHKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSSHKey {
		return vs[0].([]*NetworkSSHKey)[vs[1].(int)]
	}).(NetworkSSHKeyOutput)
}

type NetworkSSHKeyMapOutput struct{ *pulumi.OutputState }

func (NetworkSSHKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSSHKey)(nil)).Elem()
}

func (o NetworkSSHKeyMapOutput) ToNetworkSSHKeyMapOutput() NetworkSSHKeyMapOutput {
	return o
}

func (o NetworkSSHKeyMapOutput) ToNetworkSSHKeyMapOutputWithContext(ctx context.Context) NetworkSSHKeyMapOutput {
	return o
}

func (o NetworkSSHKeyMapOutput) MapIndex(k pulumi.StringInput) NetworkSSHKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSSHKey {
		return vs[0].(map[string]*NetworkSSHKey)[vs[1].(string)]
	}).(NetworkSSHKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSSHKeyInput)(nil)).Elem(), &NetworkSSHKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSSHKeyArrayInput)(nil)).Elem(), NetworkSSHKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSSHKeyMapInput)(nil)).Elem(), NetworkSSHKeyMap{})
	pulumi.RegisterOutputType(NetworkSSHKeyOutput{})
	pulumi.RegisterOutputType(NetworkSSHKeyArrayOutput{})
	pulumi.RegisterOutputType(NetworkSSHKeyMapOutput{})
}
