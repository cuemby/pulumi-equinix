// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get details of Equinix Fabric layer 2 seller profile with a given name
// and / or organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		aws, err := equinix.GetECXL2Sellerprofile(ctx, &GetECXL2SellerprofileArgs{
// 			Name: pulumi.StringRef("AWS Direct Connect"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("id", aws.Id)
// 		return nil
// 	})
// }
// ```
func GetECXL2Sellerprofile(ctx *pulumi.Context, args *GetECXL2SellerprofileArgs, opts ...pulumi.InvokeOption) (*GetECXL2SellerprofileResult, error) {
	var rv GetECXL2SellerprofileResult
	err := ctx.Invoke("equinix:index/getECXL2Sellerprofile:GetECXL2Sellerprofile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetECXL2Sellerprofile.
type GetECXL2SellerprofileArgs struct {
	// Name of the seller profile.
	Name *string `pulumi:"name"`
	// Name of seller's global organization.
	OrganizationGlobalName *string `pulumi:"organizationGlobalName"`
	// Name of seller's organization.
	OrganizationName *string `pulumi:"organizationName"`
}

// A collection of values returned by GetECXL2Sellerprofile.
type GetECXL2SellerprofileResult struct {
	// One or more specifications of additional buyer information attributes that
	// can be provided in connection definition that uses given seller profile.
	// See Additional Info Attribute below for more details.
	AdditionalInfos []GetECXL2SellerprofileAdditionalInfo `pulumi:"additionalInfos"`
	// Textual description of additional information attribute.
	Description string `pulumi:"description"`
	// Seller profile's encapsulation (either Dot1q or QinQ).
	Encapsulation string `pulumi:"encapsulation"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// One or more specifications of metro locations supported by seller profile.
	// See Metro Attribute below for more details.
	Metros []GetECXL2SellerprofileMetro `pulumi:"metros"`
	// Name of additional information attribute.
	Name                   string `pulumi:"name"`
	OrganizationGlobalName string `pulumi:"organizationGlobalName"`
	OrganizationName       string `pulumi:"organizationName"`
	// Boolean that indicate if seller requires connections to be redundant
	RedundancyRequired bool `pulumi:"redundancyRequired"`
	// One or more specifications of speed/bandwidth supported by given seller profile.
	// See Speed Band Attribute below for more details.
	SpeedBands []GetECXL2SellerprofileSpeedBand `pulumi:"speedBands"`
	// Boolean that indicates if seller allows customer to enter a
	// custom connection speed.
	SpeedCustomizationAllowed bool `pulumi:"speedCustomizationAllowed"`
	// Boolean that indicates if seller is deriving connection speed from an API call.
	SpeedFromApi bool `pulumi:"speedFromApi"`
	// Unique identifier of the seller profile.
	Uuid string `pulumi:"uuid"`
}

func GetECXL2SellerprofileOutput(ctx *pulumi.Context, args GetECXL2SellerprofileOutputArgs, opts ...pulumi.InvokeOption) GetECXL2SellerprofileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetECXL2SellerprofileResult, error) {
			args := v.(GetECXL2SellerprofileArgs)
			r, err := GetECXL2Sellerprofile(ctx, &args, opts...)
			var s GetECXL2SellerprofileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetECXL2SellerprofileResultOutput)
}

// A collection of arguments for invoking GetECXL2Sellerprofile.
type GetECXL2SellerprofileOutputArgs struct {
	// Name of the seller profile.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of seller's global organization.
	OrganizationGlobalName pulumi.StringPtrInput `pulumi:"organizationGlobalName"`
	// Name of seller's organization.
	OrganizationName pulumi.StringPtrInput `pulumi:"organizationName"`
}

func (GetECXL2SellerprofileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileArgs)(nil)).Elem()
}

// A collection of values returned by GetECXL2Sellerprofile.
type GetECXL2SellerprofileResultOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileResult)(nil)).Elem()
}

func (o GetECXL2SellerprofileResultOutput) ToGetECXL2SellerprofileResultOutput() GetECXL2SellerprofileResultOutput {
	return o
}

func (o GetECXL2SellerprofileResultOutput) ToGetECXL2SellerprofileResultOutputWithContext(ctx context.Context) GetECXL2SellerprofileResultOutput {
	return o
}

// One or more specifications of additional buyer information attributes that
// can be provided in connection definition that uses given seller profile.
// See Additional Info Attribute below for more details.
func (o GetECXL2SellerprofileResultOutput) AdditionalInfos() GetECXL2SellerprofileAdditionalInfoArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) []GetECXL2SellerprofileAdditionalInfo { return v.AdditionalInfos }).(GetECXL2SellerprofileAdditionalInfoArrayOutput)
}

// Textual description of additional information attribute.
func (o GetECXL2SellerprofileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.Description }).(pulumi.StringOutput)
}

// Seller profile's encapsulation (either Dot1q or QinQ).
func (o GetECXL2SellerprofileResultOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.Encapsulation }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetECXL2SellerprofileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.Id }).(pulumi.StringOutput)
}

// One or more specifications of metro locations supported by seller profile.
// See Metro Attribute below for more details.
func (o GetECXL2SellerprofileResultOutput) Metros() GetECXL2SellerprofileMetroArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) []GetECXL2SellerprofileMetro { return v.Metros }).(GetECXL2SellerprofileMetroArrayOutput)
}

// Name of additional information attribute.
func (o GetECXL2SellerprofileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofileResultOutput) OrganizationGlobalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.OrganizationGlobalName }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofileResultOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.OrganizationName }).(pulumi.StringOutput)
}

// Boolean that indicate if seller requires connections to be redundant
func (o GetECXL2SellerprofileResultOutput) RedundancyRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) bool { return v.RedundancyRequired }).(pulumi.BoolOutput)
}

// One or more specifications of speed/bandwidth supported by given seller profile.
// See Speed Band Attribute below for more details.
func (o GetECXL2SellerprofileResultOutput) SpeedBands() GetECXL2SellerprofileSpeedBandArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) []GetECXL2SellerprofileSpeedBand { return v.SpeedBands }).(GetECXL2SellerprofileSpeedBandArrayOutput)
}

// Boolean that indicates if seller allows customer to enter a
// custom connection speed.
func (o GetECXL2SellerprofileResultOutput) SpeedCustomizationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) bool { return v.SpeedCustomizationAllowed }).(pulumi.BoolOutput)
}

// Boolean that indicates if seller is deriving connection speed from an API call.
func (o GetECXL2SellerprofileResultOutput) SpeedFromApi() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) bool { return v.SpeedFromApi }).(pulumi.BoolOutput)
}

// Unique identifier of the seller profile.
func (o GetECXL2SellerprofileResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetECXL2SellerprofileResultOutput{})
}
