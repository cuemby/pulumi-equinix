// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
// searched by VLAN UUID, or project UUID and vxlan number.
//
// ## Example Usage
//
// Fetch a vlan by ID:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foovlan, err := equinix.NewMetalVlan(ctx, "foovlan", &equinix.MetalVlanArgs{
// 			ProjectId: pulumi.Any(local.Project_id),
// 			Metro:     pulumi.String("sv"),
// 			Vxlan:     pulumi.Int(5),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_ = equinix.GetMetalVlanOutput(ctx, GetMetalVlanOutputArgs{
// 			VlanId: foovlan.ID(),
// 		}, nil)
// 		return nil
// 	})
// }
// ```
//
// Fetch a vlan by project ID, vxlan and metro
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.GetMetalVlan(ctx, &GetMetalVlanArgs{
// 			ProjectId: pulumi.StringRef(local.Project_id),
// 			Vxlan:     pulumi.IntRef(5),
// 			Metro:     pulumi.StringRef("sv"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupMetalVlan(ctx *pulumi.Context, args *LookupMetalVlanArgs, opts ...pulumi.InvokeOption) (*LookupMetalVlanResult, error) {
	var rv LookupMetalVlanResult
	err := ctx.Invoke("equinix:index/getMetalVlan:GetMetalVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetMetalVlan.
type LookupMetalVlanArgs struct {
	// Facility where the VLAN is deployed.
	Facility *string `pulumi:"facility"`
	// Metro where the VLAN is deployed.
	Metro *string `pulumi:"metro"`
	// UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.
	ProjectId *string `pulumi:"projectId"`
	// Metal UUID of the VLAN resource to look up.
	VlanId *string `pulumi:"vlanId"`
	// vxlan number of the VLAN to look up. Use together with the projectId and metro or facility.
	Vxlan *int `pulumi:"vxlan"`
}

// A collection of values returned by GetMetalVlan.
type LookupMetalVlanResult struct {
	// List of device ID to which this VLAN is assigned.
	AssignedDevicesIds []string `pulumi:"assignedDevicesIds"`
	// Description text of the VLAN resource.
	Description string `pulumi:"description"`
	Facility    string `pulumi:"facility"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	Metro     string `pulumi:"metro"`
	ProjectId string `pulumi:"projectId"`
	VlanId    string `pulumi:"vlanId"`
	Vxlan     int    `pulumi:"vxlan"`
}

func LookupMetalVlanOutput(ctx *pulumi.Context, args LookupMetalVlanOutputArgs, opts ...pulumi.InvokeOption) LookupMetalVlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetalVlanResult, error) {
			args := v.(LookupMetalVlanArgs)
			r, err := LookupMetalVlan(ctx, &args, opts...)
			var s LookupMetalVlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetalVlanResultOutput)
}

// A collection of arguments for invoking GetMetalVlan.
type LookupMetalVlanOutputArgs struct {
	// Facility where the VLAN is deployed.
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// Metro where the VLAN is deployed.
	Metro pulumi.StringPtrInput `pulumi:"metro"`
	// UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Metal UUID of the VLAN resource to look up.
	VlanId pulumi.StringPtrInput `pulumi:"vlanId"`
	// vxlan number of the VLAN to look up. Use together with the projectId and metro or facility.
	Vxlan pulumi.IntPtrInput `pulumi:"vxlan"`
}

func (LookupMetalVlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalVlanArgs)(nil)).Elem()
}

// A collection of values returned by GetMetalVlan.
type LookupMetalVlanResultOutput struct{ *pulumi.OutputState }

func (LookupMetalVlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalVlanResult)(nil)).Elem()
}

func (o LookupMetalVlanResultOutput) ToLookupMetalVlanResultOutput() LookupMetalVlanResultOutput {
	return o
}

func (o LookupMetalVlanResultOutput) ToLookupMetalVlanResultOutputWithContext(ctx context.Context) LookupMetalVlanResultOutput {
	return o
}

// List of device ID to which this VLAN is assigned.
func (o LookupMetalVlanResultOutput) AssignedDevicesIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) []string { return v.AssignedDevicesIds }).(pulumi.StringArrayOutput)
}

// Description text of the VLAN resource.
func (o LookupMetalVlanResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupMetalVlanResultOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) string { return v.Facility }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetalVlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetalVlanResultOutput) Metro() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) string { return v.Metro }).(pulumi.StringOutput)
}

func (o LookupMetalVlanResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupMetalVlanResultOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) string { return v.VlanId }).(pulumi.StringOutput)
}

func (o LookupMetalVlanResultOutput) Vxlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMetalVlanResult) int { return v.Vxlan }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetalVlanResultOutput{})
}
