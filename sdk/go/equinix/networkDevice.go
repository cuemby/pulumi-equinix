// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `NetworkDevice` allows creation and management of Equinix Network Edge virtual
// network devices.
//
// Network Edge virtual network devices can be created in two modes:
//
// * **managed** - (default) Where Equinix manages connectivity and services in the device and
//   customer gets limited access to the device.
// * **self-configured** - Where customer provisions and manages own services in the device with less
//   restricted access. Some device types are offered only in this mode.
//
// In addition to management modes, there are two software license modes available:
//
// * **subscription** - Where Equinix provides software license, including end-to-end support, and
//   bills for the service respectively.
// * **BYOL** - [bring your own license] Where customer brings his own, already procured device
//   software license. There are no charges associated with such license. It is the only licensing mode
//   for `self-configured` devices.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		dc, err := equinix.GetNetworkAccount(ctx, &GetNetworkAccountArgs{
// 			MetroCode: "DC",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		sv, err := equinix.GetNetworkAccount(ctx, &GetNetworkAccountArgs{
// 			MetroCode: "SV",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewNetworkDevice(ctx, "csr1000v-ha", &equinix.NetworkDeviceArgs{
// 			Throughput:     pulumi.Int(500),
// 			ThroughputUnit: pulumi.String("Mbps"),
// 			MetroCode:      pulumi.String(dc.MetroCode),
// 			TypeCode:       pulumi.String("CSR1000V"),
// 			PackageCode:    pulumi.String("SEC"),
// 			Notifications: pulumi.StringArray{
// 				pulumi.String("john@equinix.com"),
// 				pulumi.String("marry@equinix.com"),
// 				pulumi.String("fred@equinix.com"),
// 			},
// 			Hostname:      pulumi.String("csr1000v-p"),
// 			TermLength:    pulumi.Int(6),
// 			AccountNumber: pulumi.String(dc.Number),
// 			Version:       pulumi.String("16.09.05"),
// 			CoreCount:     pulumi.Int(2),
// 			SecondaryDevice: &NetworkDeviceSecondaryDeviceArgs{
// 				Name:      pulumi.String("tf-csr1000v-s"),
// 				MetroCode: pulumi.String(sv.MetroCode),
// 				Hostname:  pulumi.String("csr1000v-s"),
// 				Notifications: pulumi.StringArray{
// 					pulumi.String("john@equinix.com"),
// 					pulumi.String("marry@equinix.com"),
// 				},
// 				AccountNumber: pulumi.String(sv.Number),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		sv, err := equinix.GetNetworkAccount(ctx, &GetNetworkAccountArgs{
// 			MetroCode: "SV",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewNetworkDevice(ctx, "panw-cluster", &equinix.NetworkDeviceArgs{
// 			MetroCode:   pulumi.String(sv.MetroCode),
// 			TypeCode:    pulumi.String("PA-VM"),
// 			SelfManaged: pulumi.Bool(true),
// 			Byol:        pulumi.Bool(true),
// 			PackageCode: pulumi.String("VM100"),
// 			Notifications: pulumi.StringArray{
// 				pulumi.String("john@equinix.com"),
// 				pulumi.String("marry@equinix.com"),
// 				pulumi.String("fred@equinix.com"),
// 			},
// 			TermLength:     pulumi.Int(6),
// 			AccountNumber:  pulumi.String(sv.Number),
// 			Version:        pulumi.String("10.1.3"),
// 			InterfaceCount: pulumi.Int(10),
// 			CoreCount:      pulumi.Int(2),
// 			SshKey: &NetworkDeviceSshKeyArgs{
// 				Username: pulumi.String("test"),
// 				KeyName:  pulumi.String("test-key"),
// 			},
// 			AclTemplateId: pulumi.String("0bff6e05-f0e7-44cd-804a-25b92b835f8b"),
// 			ClusterDetails: &NetworkDeviceClusterDetailsArgs{
// 				ClusterName: pulumi.String("tf-panw-cluster"),
// 				Node0: &NetworkDeviceClusterDetailsNode0Args{
// 					VendorConfiguration: &NetworkDeviceClusterDetailsNode0VendorConfigurationArgs{
// 						Hostname: pulumi.String("panw-node0"),
// 					},
// 					LicenseToken: pulumi.String("licenseToken"),
// 				},
// 				Node1: &NetworkDeviceClusterDetailsNode1Args{
// 					VendorConfiguration: &NetworkDeviceClusterDetailsNode1VendorConfigurationArgs{
// 						Hostname: pulumi.String("panw-node1"),
// 					},
// 					LicenseToken: pulumi.String("licenseToken"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/networkDevice:NetworkDevice example {existing_id}
// ```
//
//  The `license_token` and `mgtm_acl_template_uuid` fields can not be imported.
type NetworkDevice struct {
	pulumi.CustomResourceState

	// Billing account number for a device.
	AccountNumber pulumi.StringOutput `pulumi:"accountNumber"`
	// Identifier of an ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrOutput `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntOutput `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntOutput `pulumi:"asn"`
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrOutput `pulumi:"byol"`
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails NetworkDeviceClusterDetailsPtrOutput `pulumi:"clusterDetails"`
	// Number of CPU cores used by device.
	CoreCount pulumi.IntOutput `pulumi:"coreCount"`
	// Device hostname prefix.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringOutput `pulumi:"ibx"`
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount pulumi.IntOutput `pulumi:"interfaceCount"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces NetworkDeviceInterfaceArrayOutput `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrOutput `pulumi:"licenseFile"`
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringOutput `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringOutput `pulumi:"licenseStatus"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrOutput `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode pulumi.StringOutput `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrOutput `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of email addresses that will receive device status
	// notifications.
	Notifications pulumi.StringArrayOutput `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrOutput `pulumi:"orderReference"`
	// Device software package code.
	PackageCode pulumi.StringOutput `pulumi:"packageCode"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrOutput `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType pulumi.StringOutput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringOutput `pulumi:"redundantId"`
	// Device location region.
	Region pulumi.StringOutput `pulumi:"region"`
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice NetworkDeviceSecondaryDevicePtrOutput `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix managed` (default).
	SelfManaged pulumi.BoolPtrOutput `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringOutput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringOutput `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey NetworkDeviceSshKeyPtrOutput `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Device term length.
	TermLength pulumi.IntOutput `pulumi:"termLength"`
	// Device license throughput.
	Throughput pulumi.IntPtrOutput `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrOutput `pulumi:"throughputUnit"`
	// Device type code.
	TypeCode pulumi.StringOutput `pulumi:"typeCode"`
	// Device unique identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration pulumi.StringMapOutput `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version pulumi.StringOutput `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrOutput `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode pulumi.StringOutput `pulumi:"zoneCode"`
}

// NewNetworkDevice registers a new resource with the given unique name, arguments, and options.
func NewNetworkDevice(ctx *pulumi.Context,
	name string, args *NetworkDeviceArgs, opts ...pulumi.ResourceOption) (*NetworkDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountNumber == nil {
		return nil, errors.New("invalid value for required argument 'AccountNumber'")
	}
	if args.CoreCount == nil {
		return nil, errors.New("invalid value for required argument 'CoreCount'")
	}
	if args.MetroCode == nil {
		return nil, errors.New("invalid value for required argument 'MetroCode'")
	}
	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.PackageCode == nil {
		return nil, errors.New("invalid value for required argument 'PackageCode'")
	}
	if args.TermLength == nil {
		return nil, errors.New("invalid value for required argument 'TermLength'")
	}
	if args.TypeCode == nil {
		return nil, errors.New("invalid value for required argument 'TypeCode'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource NetworkDevice
	err := ctx.RegisterResource("equinix:index/networkDevice:NetworkDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkDevice gets an existing NetworkDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkDeviceState, opts ...pulumi.ResourceOption) (*NetworkDevice, error) {
	var resource NetworkDevice
	err := ctx.ReadResource("equinix:index/networkDevice:NetworkDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkDevice resources.
type networkDeviceState struct {
	// Billing account number for a device.
	AccountNumber *string `pulumi:"accountNumber"`
	// Identifier of an ACL template that will be applied on the device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn *int `pulumi:"asn"`
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol *bool `pulumi:"byol"`
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails *NetworkDeviceClusterDetails `pulumi:"clusterDetails"`
	// Number of CPU cores used by device.
	CoreCount *int `pulumi:"coreCount"`
	// Device hostname prefix.
	Hostname *string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx *string `pulumi:"ibx"`
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount *int `pulumi:"interfaceCount"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces []NetworkDeviceInterface `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus *string `pulumi:"licenseStatus"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode *string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name *string `pulumi:"name"`
	// List of email addresses that will receive device status
	// notifications.
	Notifications []string `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference *string `pulumi:"orderReference"`
	// Device software package code.
	PackageCode *string `pulumi:"packageCode"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId *string `pulumi:"redundantId"`
	// Device location region.
	Region *string `pulumi:"region"`
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice *NetworkDeviceSecondaryDevice `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix managed` (default).
	SelfManaged *bool `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress *string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn *string `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *NetworkDeviceSshKey `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// Device term length.
	TermLength *int `pulumi:"termLength"`
	// Device license throughput.
	Throughput *int `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit *string `pulumi:"throughputUnit"`
	// Device type code.
	TypeCode *string `pulumi:"typeCode"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version *string `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode *string `pulumi:"zoneCode"`
}

type NetworkDeviceState struct {
	// Billing account number for a device.
	AccountNumber pulumi.StringPtrInput
	// Identifier of an ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrInput
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntPtrInput
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntPtrInput
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrInput
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails NetworkDeviceClusterDetailsPtrInput
	// Number of CPU cores used by device.
	CoreCount pulumi.IntPtrInput
	// Device hostname prefix.
	Hostname pulumi.StringPtrInput
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringPtrInput
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount pulumi.IntPtrInput
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces NetworkDeviceInterfaceArrayInput
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringPtrInput
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringPtrInput
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrInput
	// Device location metro code.
	MetroCode pulumi.StringPtrInput
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrInput
	// Device name.
	Name pulumi.StringPtrInput
	// List of email addresses that will receive device status
	// notifications.
	Notifications pulumi.StringArrayInput
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrInput
	// Device software package code.
	PackageCode pulumi.StringPtrInput
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrInput
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType pulumi.StringPtrInput
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringPtrInput
	// Device location region.
	Region pulumi.StringPtrInput
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice NetworkDeviceSecondaryDevicePtrInput
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix managed` (default).
	SelfManaged pulumi.BoolPtrInput
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringPtrInput
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringPtrInput
	// Definition of SSH key that will be provisioned on a device
	SshKey NetworkDeviceSshKeyPtrInput
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput
	// Device term length.
	TermLength pulumi.IntPtrInput
	// Device license throughput.
	Throughput pulumi.IntPtrInput
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrInput
	// Device type code.
	TypeCode pulumi.StringPtrInput
	// Device unique identifier.
	Uuid pulumi.StringPtrInput
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration pulumi.StringMapInput
	// Device software software version.
	Version pulumi.StringPtrInput
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput
	// Device location zone code.
	ZoneCode pulumi.StringPtrInput
}

func (NetworkDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkDeviceState)(nil)).Elem()
}

type networkDeviceArgs struct {
	// Billing account number for a device.
	AccountNumber string `pulumi:"accountNumber"`
	// Identifier of an ACL template that will be applied on the device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol *bool `pulumi:"byol"`
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails *NetworkDeviceClusterDetails `pulumi:"clusterDetails"`
	// Number of CPU cores used by device.
	CoreCount int `pulumi:"coreCount"`
	// Device hostname prefix.
	Hostname *string `pulumi:"hostname"`
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount *int `pulumi:"interfaceCount"`
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name *string `pulumi:"name"`
	// List of email addresses that will receive device status
	// notifications.
	Notifications []string `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference *string `pulumi:"orderReference"`
	// Device software package code.
	PackageCode string `pulumi:"packageCode"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice *NetworkDeviceSecondaryDevice `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix managed` (default).
	SelfManaged *bool `pulumi:"selfManaged"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *NetworkDeviceSshKey `pulumi:"sshKey"`
	// Device term length.
	TermLength int `pulumi:"termLength"`
	// Device license throughput.
	Throughput *int `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit *string `pulumi:"throughputUnit"`
	// Device type code.
	TypeCode string `pulumi:"typeCode"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version string `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
}

// The set of arguments for constructing a NetworkDevice resource.
type NetworkDeviceArgs struct {
	// Billing account number for a device.
	AccountNumber pulumi.StringInput
	// Identifier of an ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrInput
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntPtrInput
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrInput
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails NetworkDeviceClusterDetailsPtrInput
	// Number of CPU cores used by device.
	CoreCount pulumi.IntInput
	// Device hostname prefix.
	Hostname pulumi.StringPtrInput
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount pulumi.IntPtrInput
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrInput
	// Device location metro code.
	MetroCode pulumi.StringInput
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrInput
	// Device name.
	Name pulumi.StringPtrInput
	// List of email addresses that will receive device status
	// notifications.
	Notifications pulumi.StringArrayInput
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrInput
	// Device software package code.
	PackageCode pulumi.StringInput
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrInput
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice NetworkDeviceSecondaryDevicePtrInput
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix managed` (default).
	SelfManaged pulumi.BoolPtrInput
	// Definition of SSH key that will be provisioned on a device
	SshKey NetworkDeviceSshKeyPtrInput
	// Device term length.
	TermLength pulumi.IntInput
	// Device license throughput.
	Throughput pulumi.IntPtrInput
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrInput
	// Device type code.
	TypeCode pulumi.StringInput
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration pulumi.StringMapInput
	// Device software software version.
	Version pulumi.StringInput
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput
}

func (NetworkDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkDeviceArgs)(nil)).Elem()
}

type NetworkDeviceInput interface {
	pulumi.Input

	ToNetworkDeviceOutput() NetworkDeviceOutput
	ToNetworkDeviceOutputWithContext(ctx context.Context) NetworkDeviceOutput
}

func (*NetworkDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDevice)(nil)).Elem()
}

func (i *NetworkDevice) ToNetworkDeviceOutput() NetworkDeviceOutput {
	return i.ToNetworkDeviceOutputWithContext(context.Background())
}

func (i *NetworkDevice) ToNetworkDeviceOutputWithContext(ctx context.Context) NetworkDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceOutput)
}

// NetworkDeviceArrayInput is an input type that accepts NetworkDeviceArray and NetworkDeviceArrayOutput values.
// You can construct a concrete instance of `NetworkDeviceArrayInput` via:
//
//          NetworkDeviceArray{ NetworkDeviceArgs{...} }
type NetworkDeviceArrayInput interface {
	pulumi.Input

	ToNetworkDeviceArrayOutput() NetworkDeviceArrayOutput
	ToNetworkDeviceArrayOutputWithContext(context.Context) NetworkDeviceArrayOutput
}

type NetworkDeviceArray []NetworkDeviceInput

func (NetworkDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkDevice)(nil)).Elem()
}

func (i NetworkDeviceArray) ToNetworkDeviceArrayOutput() NetworkDeviceArrayOutput {
	return i.ToNetworkDeviceArrayOutputWithContext(context.Background())
}

func (i NetworkDeviceArray) ToNetworkDeviceArrayOutputWithContext(ctx context.Context) NetworkDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceArrayOutput)
}

// NetworkDeviceMapInput is an input type that accepts NetworkDeviceMap and NetworkDeviceMapOutput values.
// You can construct a concrete instance of `NetworkDeviceMapInput` via:
//
//          NetworkDeviceMap{ "key": NetworkDeviceArgs{...} }
type NetworkDeviceMapInput interface {
	pulumi.Input

	ToNetworkDeviceMapOutput() NetworkDeviceMapOutput
	ToNetworkDeviceMapOutputWithContext(context.Context) NetworkDeviceMapOutput
}

type NetworkDeviceMap map[string]NetworkDeviceInput

func (NetworkDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkDevice)(nil)).Elem()
}

func (i NetworkDeviceMap) ToNetworkDeviceMapOutput() NetworkDeviceMapOutput {
	return i.ToNetworkDeviceMapOutputWithContext(context.Background())
}

func (i NetworkDeviceMap) ToNetworkDeviceMapOutputWithContext(ctx context.Context) NetworkDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceMapOutput)
}

type NetworkDeviceOutput struct{ *pulumi.OutputState }

func (NetworkDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDevice)(nil)).Elem()
}

func (o NetworkDeviceOutput) ToNetworkDeviceOutput() NetworkDeviceOutput {
	return o
}

func (o NetworkDeviceOutput) ToNetworkDeviceOutputWithContext(ctx context.Context) NetworkDeviceOutput {
	return o
}

// Billing account number for a device.
func (o NetworkDeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.AccountNumber }).(pulumi.StringOutput)
}

// Identifier of an ACL template that will be applied on the device.
func (o NetworkDeviceOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.AclTemplateId }).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, that will be
// allocated to the device (in addition to default 15Mbps).
func (o NetworkDeviceOutput) AdditionalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.IntOutput { return v.AdditionalBandwidth }).(pulumi.IntOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o NetworkDeviceOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.IntOutput { return v.Asn }).(pulumi.IntOutput)
}

// Boolean value that determines device licensing mode, i.e.,
// `bring your own license` or `subscription` (default).
func (o NetworkDeviceOutput) Byol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.BoolPtrOutput { return v.Byol }).(pulumi.BoolPtrOutput)
}

// An object that has the cluster details. See
// Cluster Details below for more details.
func (o NetworkDeviceOutput) ClusterDetails() NetworkDeviceClusterDetailsPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) NetworkDeviceClusterDetailsPtrOutput { return v.ClusterDetails }).(NetworkDeviceClusterDetailsPtrOutput)
}

// Number of CPU cores used by device.
func (o NetworkDeviceOutput) CoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.IntOutput { return v.CoreCount }).(pulumi.IntOutput)
}

// Device hostname prefix.
func (o NetworkDeviceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Device location Equinix Business Exchange name.
func (o NetworkDeviceOutput) Ibx() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Ibx }).(pulumi.StringOutput)
}

// Number of network interfaces on a device. If not specified,
// default number for a given device type will be used.
func (o NetworkDeviceOutput) InterfaceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.IntOutput { return v.InterfaceCount }).(pulumi.IntOutput)
}

// List of device interfaces. See Interface Attribute below
// for more details.
func (o NetworkDeviceOutput) Interfaces() NetworkDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v *NetworkDevice) NetworkDeviceInterfaceArrayOutput { return v.Interfaces }).(NetworkDeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a
// device. Applicable for some devices types in BYOL licensing mode.
func (o NetworkDeviceOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.LicenseFile }).(pulumi.StringPtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceOutput) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.LicenseFileId }).(pulumi.StringOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`,
// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o NetworkDeviceOutput) LicenseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.LicenseStatus }).(pulumi.StringOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o NetworkDeviceOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device location metro code.
func (o NetworkDeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.MetroCode }).(pulumi.StringOutput)
}

// Identifier of an MGMT interface ACL template that will be
// applied on the device.
func (o NetworkDeviceOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.MgmtAclTemplateUuid }).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of email addresses that will receive device status
// notifications.
func (o NetworkDeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringArrayOutput { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Name/number used to identify device order on the invoice.
func (o NetworkDeviceOutput) OrderReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.OrderReference }).(pulumi.StringPtrOutput)
}

// Device software package code.
func (o NetworkDeviceOutput) PackageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.PackageCode }).(pulumi.StringOutput)
}

// Purchase order number associated with a device order.
func (o NetworkDeviceOutput) PurchaseOrderNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.PurchaseOrderNumber }).(pulumi.StringPtrOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary.
func (o NetworkDeviceOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o NetworkDeviceOutput) RedundantId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.RedundantId }).(pulumi.StringOutput)
}

// Device location region.
func (o NetworkDeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Definition of secondary device for redundant
// device configurations. See Secondary Device below for more details.
func (o NetworkDeviceOutput) SecondaryDevice() NetworkDeviceSecondaryDevicePtrOutput {
	return o.ApplyT(func(v *NetworkDevice) NetworkDeviceSecondaryDevicePtrOutput { return v.SecondaryDevice }).(NetworkDeviceSecondaryDevicePtrOutput)
}

// Boolean value that determines device management mode, i.e.,
// `self-managed` or `Equinix managed` (default).
func (o NetworkDeviceOutput) SelfManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.BoolPtrOutput { return v.SelfManaged }).(pulumi.BoolPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o NetworkDeviceOutput) SshIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.SshIpAddress }).(pulumi.StringOutput)
}

// FQDN of SSH enabled interface on the device.
func (o NetworkDeviceOutput) SshIpFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.SshIpFqdn }).(pulumi.StringOutput)
}

// Definition of SSH key that will be provisioned on a device
func (o NetworkDeviceOutput) SshKey() NetworkDeviceSshKeyPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) NetworkDeviceSshKeyPtrOutput { return v.SshKey }).(NetworkDeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o NetworkDeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Device term length.
func (o NetworkDeviceOutput) TermLength() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.IntOutput { return v.TermLength }).(pulumi.IntOutput)
}

// Device license throughput.
func (o NetworkDeviceOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.IntPtrOutput { return v.Throughput }).(pulumi.IntPtrOutput)
}

// License throughput unit. One of `Mbps` or `Gbps`.
func (o NetworkDeviceOutput) ThroughputUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.ThroughputUnit }).(pulumi.StringPtrOutput)
}

// Device type code.
func (o NetworkDeviceOutput) TypeCode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.TypeCode }).(pulumi.StringOutput)
}

// Device unique identifier.
func (o NetworkDeviceOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o NetworkDeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringMapOutput { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

// Device software software version.
func (o NetworkDeviceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// device interface id picked for WAN
func (o NetworkDeviceOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringPtrOutput { return v.WanInterfaceId }).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o NetworkDeviceOutput) ZoneCode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkDevice) pulumi.StringOutput { return v.ZoneCode }).(pulumi.StringOutput)
}

type NetworkDeviceArrayOutput struct{ *pulumi.OutputState }

func (NetworkDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkDevice)(nil)).Elem()
}

func (o NetworkDeviceArrayOutput) ToNetworkDeviceArrayOutput() NetworkDeviceArrayOutput {
	return o
}

func (o NetworkDeviceArrayOutput) ToNetworkDeviceArrayOutputWithContext(ctx context.Context) NetworkDeviceArrayOutput {
	return o
}

func (o NetworkDeviceArrayOutput) Index(i pulumi.IntInput) NetworkDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkDevice {
		return vs[0].([]*NetworkDevice)[vs[1].(int)]
	}).(NetworkDeviceOutput)
}

type NetworkDeviceMapOutput struct{ *pulumi.OutputState }

func (NetworkDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkDevice)(nil)).Elem()
}

func (o NetworkDeviceMapOutput) ToNetworkDeviceMapOutput() NetworkDeviceMapOutput {
	return o
}

func (o NetworkDeviceMapOutput) ToNetworkDeviceMapOutputWithContext(ctx context.Context) NetworkDeviceMapOutput {
	return o
}

func (o NetworkDeviceMapOutput) MapIndex(k pulumi.StringInput) NetworkDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkDevice {
		return vs[0].(map[string]*NetworkDevice)[vs[1].(string)]
	}).(NetworkDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceInput)(nil)).Elem(), &NetworkDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceArrayInput)(nil)).Elem(), NetworkDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceMapInput)(nil)).Elem(), NetworkDeviceMap{})
	pulumi.RegisterOutputType(NetworkDeviceOutput{})
	pulumi.RegisterOutputType(NetworkDeviceArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceMapOutput{})
}
