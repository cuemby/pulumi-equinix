// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Equinix Metal project SSH key resource to manage project-specific SSH keys.
// Project SSH keys will only be populated onto servers that belong to that project, in contrast to
// User SSH Keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/cuemby/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		projectId := "<UUID_of_your_project>"
// 		testMetalProjectSSHKey, err := equinix.NewMetalProjectSSHKey(ctx, "testMetalProjectSSHKey", &equinix.MetalProjectSSHKeyArgs{
// 			PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2"),
// 			ProjectId: pulumi.String(projectId),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = equinix.NewMetalDevice(ctx, "testMetalDevice", &equinix.MetalDeviceArgs{
// 			Hostname: pulumi.String("test"),
// 			Plan:     pulumi.String("c3.medium.x86"),
// 			Facilities: pulumi.StringArray{
// 				pulumi.String("ny5"),
// 			},
// 			OperatingSystem: pulumi.String("ubuntu_20_04"),
// 			BillingCycle:    pulumi.String("hourly"),
// 			ProjectSshKeyIds: pulumi.StringArray{
// 				testMetalProjectSSHKey.ID(),
// 			},
// 			ProjectId: pulumi.String(projectId),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MetalProjectSSHKey struct {
	pulumi.CustomResourceState

	// The timestamp for when the SSH key was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The fingerprint of the SSH key.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The name of the SSH key for identification.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of parent project (same as project_id).
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// The ID of parent project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public key. If this is a file, it can be read using the file interpolation function.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The timestamp for the last time the SSH key was updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewMetalProjectSSHKey registers a new resource with the given unique name, arguments, and options.
func NewMetalProjectSSHKey(ctx *pulumi.Context,
	name string, args *MetalProjectSSHKeyArgs, opts ...pulumi.ResourceOption) (*MetalProjectSSHKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MetalProjectSSHKey
	err := ctx.RegisterResource("equinix:index/metalProjectSSHKey:MetalProjectSSHKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetalProjectSSHKey gets an existing MetalProjectSSHKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetalProjectSSHKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetalProjectSSHKeyState, opts ...pulumi.ResourceOption) (*MetalProjectSSHKey, error) {
	var resource MetalProjectSSHKey
	err := ctx.ReadResource("equinix:index/metalProjectSSHKey:MetalProjectSSHKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetalProjectSSHKey resources.
type metalProjectSSHKeyState struct {
	// The timestamp for when the SSH key was created.
	Created *string `pulumi:"created"`
	// The fingerprint of the SSH key.
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the SSH key for identification.
	Name *string `pulumi:"name"`
	// The ID of parent project (same as project_id).
	OwnerId *string `pulumi:"ownerId"`
	// The ID of parent project.
	ProjectId *string `pulumi:"projectId"`
	// The public key. If this is a file, it can be read using the file interpolation function.
	PublicKey *string `pulumi:"publicKey"`
	// The timestamp for the last time the SSH key was updated.
	Updated *string `pulumi:"updated"`
}

type MetalProjectSSHKeyState struct {
	// The timestamp for when the SSH key was created.
	Created pulumi.StringPtrInput
	// The fingerprint of the SSH key.
	Fingerprint pulumi.StringPtrInput
	// The name of the SSH key for identification.
	Name pulumi.StringPtrInput
	// The ID of parent project (same as project_id).
	OwnerId pulumi.StringPtrInput
	// The ID of parent project.
	ProjectId pulumi.StringPtrInput
	// The public key. If this is a file, it can be read using the file interpolation function.
	PublicKey pulumi.StringPtrInput
	// The timestamp for the last time the SSH key was updated.
	Updated pulumi.StringPtrInput
}

func (MetalProjectSSHKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*metalProjectSSHKeyState)(nil)).Elem()
}

type metalProjectSSHKeyArgs struct {
	// The name of the SSH key for identification.
	Name *string `pulumi:"name"`
	// The ID of parent project.
	ProjectId string `pulumi:"projectId"`
	// The public key. If this is a file, it can be read using the file interpolation function.
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a MetalProjectSSHKey resource.
type MetalProjectSSHKeyArgs struct {
	// The name of the SSH key for identification.
	Name pulumi.StringPtrInput
	// The ID of parent project.
	ProjectId pulumi.StringInput
	// The public key. If this is a file, it can be read using the file interpolation function.
	PublicKey pulumi.StringInput
}

func (MetalProjectSSHKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metalProjectSSHKeyArgs)(nil)).Elem()
}

type MetalProjectSSHKeyInput interface {
	pulumi.Input

	ToMetalProjectSSHKeyOutput() MetalProjectSSHKeyOutput
	ToMetalProjectSSHKeyOutputWithContext(ctx context.Context) MetalProjectSSHKeyOutput
}

func (*MetalProjectSSHKey) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalProjectSSHKey)(nil)).Elem()
}

func (i *MetalProjectSSHKey) ToMetalProjectSSHKeyOutput() MetalProjectSSHKeyOutput {
	return i.ToMetalProjectSSHKeyOutputWithContext(context.Background())
}

func (i *MetalProjectSSHKey) ToMetalProjectSSHKeyOutputWithContext(ctx context.Context) MetalProjectSSHKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectSSHKeyOutput)
}

// MetalProjectSSHKeyArrayInput is an input type that accepts MetalProjectSSHKeyArray and MetalProjectSSHKeyArrayOutput values.
// You can construct a concrete instance of `MetalProjectSSHKeyArrayInput` via:
//
//          MetalProjectSSHKeyArray{ MetalProjectSSHKeyArgs{...} }
type MetalProjectSSHKeyArrayInput interface {
	pulumi.Input

	ToMetalProjectSSHKeyArrayOutput() MetalProjectSSHKeyArrayOutput
	ToMetalProjectSSHKeyArrayOutputWithContext(context.Context) MetalProjectSSHKeyArrayOutput
}

type MetalProjectSSHKeyArray []MetalProjectSSHKeyInput

func (MetalProjectSSHKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalProjectSSHKey)(nil)).Elem()
}

func (i MetalProjectSSHKeyArray) ToMetalProjectSSHKeyArrayOutput() MetalProjectSSHKeyArrayOutput {
	return i.ToMetalProjectSSHKeyArrayOutputWithContext(context.Background())
}

func (i MetalProjectSSHKeyArray) ToMetalProjectSSHKeyArrayOutputWithContext(ctx context.Context) MetalProjectSSHKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectSSHKeyArrayOutput)
}

// MetalProjectSSHKeyMapInput is an input type that accepts MetalProjectSSHKeyMap and MetalProjectSSHKeyMapOutput values.
// You can construct a concrete instance of `MetalProjectSSHKeyMapInput` via:
//
//          MetalProjectSSHKeyMap{ "key": MetalProjectSSHKeyArgs{...} }
type MetalProjectSSHKeyMapInput interface {
	pulumi.Input

	ToMetalProjectSSHKeyMapOutput() MetalProjectSSHKeyMapOutput
	ToMetalProjectSSHKeyMapOutputWithContext(context.Context) MetalProjectSSHKeyMapOutput
}

type MetalProjectSSHKeyMap map[string]MetalProjectSSHKeyInput

func (MetalProjectSSHKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalProjectSSHKey)(nil)).Elem()
}

func (i MetalProjectSSHKeyMap) ToMetalProjectSSHKeyMapOutput() MetalProjectSSHKeyMapOutput {
	return i.ToMetalProjectSSHKeyMapOutputWithContext(context.Background())
}

func (i MetalProjectSSHKeyMap) ToMetalProjectSSHKeyMapOutputWithContext(ctx context.Context) MetalProjectSSHKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectSSHKeyMapOutput)
}

type MetalProjectSSHKeyOutput struct{ *pulumi.OutputState }

func (MetalProjectSSHKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalProjectSSHKey)(nil)).Elem()
}

func (o MetalProjectSSHKeyOutput) ToMetalProjectSSHKeyOutput() MetalProjectSSHKeyOutput {
	return o
}

func (o MetalProjectSSHKeyOutput) ToMetalProjectSSHKeyOutputWithContext(ctx context.Context) MetalProjectSSHKeyOutput {
	return o
}

// The timestamp for when the SSH key was created.
func (o MetalProjectSSHKeyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The fingerprint of the SSH key.
func (o MetalProjectSSHKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The name of the SSH key for identification.
func (o MetalProjectSSHKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of parent project (same as project_id).
func (o MetalProjectSSHKeyOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// The ID of parent project.
func (o MetalProjectSSHKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The public key. If this is a file, it can be read using the file interpolation function.
func (o MetalProjectSSHKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The timestamp for the last time the SSH key was updated.
func (o MetalProjectSSHKeyOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProjectSSHKey) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

type MetalProjectSSHKeyArrayOutput struct{ *pulumi.OutputState }

func (MetalProjectSSHKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalProjectSSHKey)(nil)).Elem()
}

func (o MetalProjectSSHKeyArrayOutput) ToMetalProjectSSHKeyArrayOutput() MetalProjectSSHKeyArrayOutput {
	return o
}

func (o MetalProjectSSHKeyArrayOutput) ToMetalProjectSSHKeyArrayOutputWithContext(ctx context.Context) MetalProjectSSHKeyArrayOutput {
	return o
}

func (o MetalProjectSSHKeyArrayOutput) Index(i pulumi.IntInput) MetalProjectSSHKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetalProjectSSHKey {
		return vs[0].([]*MetalProjectSSHKey)[vs[1].(int)]
	}).(MetalProjectSSHKeyOutput)
}

type MetalProjectSSHKeyMapOutput struct{ *pulumi.OutputState }

func (MetalProjectSSHKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalProjectSSHKey)(nil)).Elem()
}

func (o MetalProjectSSHKeyMapOutput) ToMetalProjectSSHKeyMapOutput() MetalProjectSSHKeyMapOutput {
	return o
}

func (o MetalProjectSSHKeyMapOutput) ToMetalProjectSSHKeyMapOutputWithContext(ctx context.Context) MetalProjectSSHKeyMapOutput {
	return o
}

func (o MetalProjectSSHKeyMapOutput) MapIndex(k pulumi.StringInput) MetalProjectSSHKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetalProjectSSHKey {
		return vs[0].(map[string]*MetalProjectSSHKey)[vs[1].(string)]
	}).(MetalProjectSSHKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectSSHKeyInput)(nil)).Elem(), &MetalProjectSSHKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectSSHKeyArrayInput)(nil)).Elem(), MetalProjectSSHKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectSSHKeyMapInput)(nil)).Elem(), MetalProjectSSHKeyMap{})
	pulumi.RegisterOutputType(MetalProjectSSHKeyOutput{})
	pulumi.RegisterOutputType(MetalProjectSSHKeyArrayOutput{})
	pulumi.RegisterOutputType(MetalProjectSSHKeyMapOutput{})
}
