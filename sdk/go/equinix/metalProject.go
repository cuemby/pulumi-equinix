// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This resource can be imported using an existing project ID
//
// ```sh
//  $ pulumi import equinix:index/metalProject:MetalProject equinix_metal_project {existing_project_id}
// ```
type MetalProject struct {
	pulumi.CustomResourceState

	// Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.
	BackendTransfer pulumi.BoolPtrOutput `pulumi:"backendTransfer"`
	// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
	BgpConfig MetalProjectBgpConfigPtrOutput `pulumi:"bgpConfig"`
	// The timestamp for when the project was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The UUID of organization under which you want to create the project. If you
	// leave it out, the project will be create under your the default organization of your account.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The UUID of payment method for this project. The payment method and the
	// project need to belong to the same organization (passed with `organizationId`, or default).
	PaymentMethodId pulumi.StringOutput `pulumi:"paymentMethodId"`
	// The timestamp for the last time the project was updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewMetalProject registers a new resource with the given unique name, arguments, and options.
func NewMetalProject(ctx *pulumi.Context,
	name string, args *MetalProjectArgs, opts ...pulumi.ResourceOption) (*MetalProject, error) {
	if args == nil {
		args = &MetalProjectArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource MetalProject
	err := ctx.RegisterResource("equinix:index/metalProject:MetalProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetalProject gets an existing MetalProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetalProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetalProjectState, opts ...pulumi.ResourceOption) (*MetalProject, error) {
	var resource MetalProject
	err := ctx.ReadResource("equinix:index/metalProject:MetalProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetalProject resources.
type metalProjectState struct {
	// Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.
	BackendTransfer *bool `pulumi:"backendTransfer"`
	// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
	BgpConfig *MetalProjectBgpConfig `pulumi:"bgpConfig"`
	// The timestamp for when the project was created.
	Created *string `pulumi:"created"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The UUID of organization under which you want to create the project. If you
	// leave it out, the project will be create under your the default organization of your account.
	OrganizationId *string `pulumi:"organizationId"`
	// The UUID of payment method for this project. The payment method and the
	// project need to belong to the same organization (passed with `organizationId`, or default).
	PaymentMethodId *string `pulumi:"paymentMethodId"`
	// The timestamp for the last time the project was updated.
	Updated *string `pulumi:"updated"`
}

type MetalProjectState struct {
	// Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.
	BackendTransfer pulumi.BoolPtrInput
	// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
	BgpConfig MetalProjectBgpConfigPtrInput
	// The timestamp for when the project was created.
	Created pulumi.StringPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The UUID of organization under which you want to create the project. If you
	// leave it out, the project will be create under your the default organization of your account.
	OrganizationId pulumi.StringPtrInput
	// The UUID of payment method for this project. The payment method and the
	// project need to belong to the same organization (passed with `organizationId`, or default).
	PaymentMethodId pulumi.StringPtrInput
	// The timestamp for the last time the project was updated.
	Updated pulumi.StringPtrInput
}

func (MetalProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*metalProjectState)(nil)).Elem()
}

type metalProjectArgs struct {
	// Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.
	BackendTransfer *bool `pulumi:"backendTransfer"`
	// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
	BgpConfig *MetalProjectBgpConfig `pulumi:"bgpConfig"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The UUID of organization under which you want to create the project. If you
	// leave it out, the project will be create under your the default organization of your account.
	OrganizationId *string `pulumi:"organizationId"`
	// The UUID of payment method for this project. The payment method and the
	// project need to belong to the same organization (passed with `organizationId`, or default).
	PaymentMethodId *string `pulumi:"paymentMethodId"`
}

// The set of arguments for constructing a MetalProject resource.
type MetalProjectArgs struct {
	// Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.
	BackendTransfer pulumi.BoolPtrInput
	// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
	BgpConfig MetalProjectBgpConfigPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// The UUID of organization under which you want to create the project. If you
	// leave it out, the project will be create under your the default organization of your account.
	OrganizationId pulumi.StringPtrInput
	// The UUID of payment method for this project. The payment method and the
	// project need to belong to the same organization (passed with `organizationId`, or default).
	PaymentMethodId pulumi.StringPtrInput
}

func (MetalProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metalProjectArgs)(nil)).Elem()
}

type MetalProjectInput interface {
	pulumi.Input

	ToMetalProjectOutput() MetalProjectOutput
	ToMetalProjectOutputWithContext(ctx context.Context) MetalProjectOutput
}

func (*MetalProject) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalProject)(nil)).Elem()
}

func (i *MetalProject) ToMetalProjectOutput() MetalProjectOutput {
	return i.ToMetalProjectOutputWithContext(context.Background())
}

func (i *MetalProject) ToMetalProjectOutputWithContext(ctx context.Context) MetalProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectOutput)
}

// MetalProjectArrayInput is an input type that accepts MetalProjectArray and MetalProjectArrayOutput values.
// You can construct a concrete instance of `MetalProjectArrayInput` via:
//
//          MetalProjectArray{ MetalProjectArgs{...} }
type MetalProjectArrayInput interface {
	pulumi.Input

	ToMetalProjectArrayOutput() MetalProjectArrayOutput
	ToMetalProjectArrayOutputWithContext(context.Context) MetalProjectArrayOutput
}

type MetalProjectArray []MetalProjectInput

func (MetalProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalProject)(nil)).Elem()
}

func (i MetalProjectArray) ToMetalProjectArrayOutput() MetalProjectArrayOutput {
	return i.ToMetalProjectArrayOutputWithContext(context.Background())
}

func (i MetalProjectArray) ToMetalProjectArrayOutputWithContext(ctx context.Context) MetalProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectArrayOutput)
}

// MetalProjectMapInput is an input type that accepts MetalProjectMap and MetalProjectMapOutput values.
// You can construct a concrete instance of `MetalProjectMapInput` via:
//
//          MetalProjectMap{ "key": MetalProjectArgs{...} }
type MetalProjectMapInput interface {
	pulumi.Input

	ToMetalProjectMapOutput() MetalProjectMapOutput
	ToMetalProjectMapOutputWithContext(context.Context) MetalProjectMapOutput
}

type MetalProjectMap map[string]MetalProjectInput

func (MetalProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalProject)(nil)).Elem()
}

func (i MetalProjectMap) ToMetalProjectMapOutput() MetalProjectMapOutput {
	return i.ToMetalProjectMapOutputWithContext(context.Background())
}

func (i MetalProjectMap) ToMetalProjectMapOutputWithContext(ctx context.Context) MetalProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectMapOutput)
}

type MetalProjectOutput struct{ *pulumi.OutputState }

func (MetalProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalProject)(nil)).Elem()
}

func (o MetalProjectOutput) ToMetalProjectOutput() MetalProjectOutput {
	return o
}

func (o MetalProjectOutput) ToMetalProjectOutputWithContext(ctx context.Context) MetalProjectOutput {
	return o
}

// Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.
func (o MetalProjectOutput) BackendTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalProject) pulumi.BoolPtrOutput { return v.BackendTransfer }).(pulumi.BoolPtrOutput)
}

// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
func (o MetalProjectOutput) BgpConfig() MetalProjectBgpConfigPtrOutput {
	return o.ApplyT(func(v *MetalProject) MetalProjectBgpConfigPtrOutput { return v.BgpConfig }).(MetalProjectBgpConfigPtrOutput)
}

// The timestamp for when the project was created.
func (o MetalProjectOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProject) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The name of the project.
func (o MetalProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The UUID of organization under which you want to create the project. If you
// leave it out, the project will be create under your the default organization of your account.
func (o MetalProjectOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProject) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The UUID of payment method for this project. The payment method and the
// project need to belong to the same organization (passed with `organizationId`, or default).
func (o MetalProjectOutput) PaymentMethodId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProject) pulumi.StringOutput { return v.PaymentMethodId }).(pulumi.StringOutput)
}

// The timestamp for the last time the project was updated.
func (o MetalProjectOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalProject) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

type MetalProjectArrayOutput struct{ *pulumi.OutputState }

func (MetalProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalProject)(nil)).Elem()
}

func (o MetalProjectArrayOutput) ToMetalProjectArrayOutput() MetalProjectArrayOutput {
	return o
}

func (o MetalProjectArrayOutput) ToMetalProjectArrayOutputWithContext(ctx context.Context) MetalProjectArrayOutput {
	return o
}

func (o MetalProjectArrayOutput) Index(i pulumi.IntInput) MetalProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetalProject {
		return vs[0].([]*MetalProject)[vs[1].(int)]
	}).(MetalProjectOutput)
}

type MetalProjectMapOutput struct{ *pulumi.OutputState }

func (MetalProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalProject)(nil)).Elem()
}

func (o MetalProjectMapOutput) ToMetalProjectMapOutput() MetalProjectMapOutput {
	return o
}

func (o MetalProjectMapOutput) ToMetalProjectMapOutputWithContext(ctx context.Context) MetalProjectMapOutput {
	return o
}

func (o MetalProjectMapOutput) MapIndex(k pulumi.StringInput) MetalProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetalProject {
		return vs[0].(map[string]*MetalProject)[vs[1].(string)]
	}).(MetalProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectInput)(nil)).Elem(), &MetalProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectArrayInput)(nil)).Elem(), MetalProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectMapInput)(nil)).Elem(), MetalProjectMap{})
	pulumi.RegisterOutputType(MetalProjectOutput{})
	pulumi.RegisterOutputType(MetalProjectArrayOutput{})
	pulumi.RegisterOutputType(MetalProjectMapOutput{})
}
