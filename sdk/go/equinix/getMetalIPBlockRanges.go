// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
//
// There are four types of IP blocks in Equinix: equinixMetalGlobal IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
//
// The datasource has 4 list attributes: `globalIpv4`, `publicIpv4`, `privateIpv4` and `ipv6`, each listing CIDR notation (`<network>/<mask>`) of respective blocks from the project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/cuemby/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		projectId := "<UUID_of_your_project>"
// 		test, err := equinix.GetMetalIPBlockRanges(ctx, &GetMetalIPBlockRangesArgs{
// 			ProjectId: projectId,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("out", test)
// 		return nil
// 	})
// }
// ```
func GetMetalIPBlockRanges(ctx *pulumi.Context, args *GetMetalIPBlockRangesArgs, opts ...pulumi.InvokeOption) (*GetMetalIPBlockRangesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetMetalIPBlockRangesResult
	err := ctx.Invoke("equinix:index/getMetalIPBlockRanges:GetMetalIPBlockRanges", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetMetalIPBlockRanges.
type GetMetalIPBlockRangesArgs struct {
	// Facility code filtering the IP blocks. Global IPv4 blcoks will be listed
	// anyway. If you omit this and metro, all the block from the project will be listed.
	Facility *string `pulumi:"facility"`
	// Metro code filtering the IP blocks. Global IPv4 blcoks will be listed
	// anyway. If you omit this and facility, all the block from the project will be listed.
	Metro *string `pulumi:"metro"`
	// ID of the project from which to list the blocks.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by GetMetalIPBlockRanges.
type GetMetalIPBlockRangesResult struct {
	Facility *string `pulumi:"facility"`
	// list of CIDR expressions for Global IPv4 blocks in the project.
	GlobalIpv4s []string `pulumi:"globalIpv4s"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// list of CIDR expressions for IPv6 blocks in the project.
	Ipv6s []string `pulumi:"ipv6s"`
	Metro *string  `pulumi:"metro"`
	// list of CIDR expressions for Private IPv4 blocks in the project.
	PrivateIpv4s []string `pulumi:"privateIpv4s"`
	ProjectId    string   `pulumi:"projectId"`
	// list of CIDR expressions for Public IPv4 blocks in the project.
	PublicIpv4s []string `pulumi:"publicIpv4s"`
}

func GetMetalIPBlockRangesOutput(ctx *pulumi.Context, args GetMetalIPBlockRangesOutputArgs, opts ...pulumi.InvokeOption) GetMetalIPBlockRangesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMetalIPBlockRangesResult, error) {
			args := v.(GetMetalIPBlockRangesArgs)
			r, err := GetMetalIPBlockRanges(ctx, &args, opts...)
			var s GetMetalIPBlockRangesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMetalIPBlockRangesResultOutput)
}

// A collection of arguments for invoking GetMetalIPBlockRanges.
type GetMetalIPBlockRangesOutputArgs struct {
	// Facility code filtering the IP blocks. Global IPv4 blcoks will be listed
	// anyway. If you omit this and metro, all the block from the project will be listed.
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// Metro code filtering the IP blocks. Global IPv4 blcoks will be listed
	// anyway. If you omit this and facility, all the block from the project will be listed.
	Metro pulumi.StringPtrInput `pulumi:"metro"`
	// ID of the project from which to list the blocks.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (GetMetalIPBlockRangesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalIPBlockRangesArgs)(nil)).Elem()
}

// A collection of values returned by GetMetalIPBlockRanges.
type GetMetalIPBlockRangesResultOutput struct{ *pulumi.OutputState }

func (GetMetalIPBlockRangesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalIPBlockRangesResult)(nil)).Elem()
}

func (o GetMetalIPBlockRangesResultOutput) ToGetMetalIPBlockRangesResultOutput() GetMetalIPBlockRangesResultOutput {
	return o
}

func (o GetMetalIPBlockRangesResultOutput) ToGetMetalIPBlockRangesResultOutputWithContext(ctx context.Context) GetMetalIPBlockRangesResultOutput {
	return o
}

func (o GetMetalIPBlockRangesResultOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// list of CIDR expressions for Global IPv4 blocks in the project.
func (o GetMetalIPBlockRangesResultOutput) GlobalIpv4s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) []string { return v.GlobalIpv4s }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMetalIPBlockRangesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) string { return v.Id }).(pulumi.StringOutput)
}

// list of CIDR expressions for IPv6 blocks in the project.
func (o GetMetalIPBlockRangesResultOutput) Ipv6s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) []string { return v.Ipv6s }).(pulumi.StringArrayOutput)
}

func (o GetMetalIPBlockRangesResultOutput) Metro() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) *string { return v.Metro }).(pulumi.StringPtrOutput)
}

// list of CIDR expressions for Private IPv4 blocks in the project.
func (o GetMetalIPBlockRangesResultOutput) PrivateIpv4s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) []string { return v.PrivateIpv4s }).(pulumi.StringArrayOutput)
}

func (o GetMetalIPBlockRangesResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// list of CIDR expressions for Public IPv4 blocks in the project.
func (o GetMetalIPBlockRangesResultOutput) PublicIpv4s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalIPBlockRangesResult) []string { return v.PublicIpv4s }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMetalIPBlockRangesResultOutput{})
}
