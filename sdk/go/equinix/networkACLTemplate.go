// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `NetworkACLTemplate` allows creation and management of
// Equinix Network Edge device Access Control List templates.
//
// Device ACL templates give possibility to define set of rules will allowed inbound
// traffic. Templates can be assigned to the network devices.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.NewNetworkACLTemplate(ctx, "myacl", &equinix.NetworkACLTemplateArgs{
// 			Description: pulumi.String("Test ACL template"),
// 			InboundRules: NetworkACLTemplateInboundRuleArray{
// 				&NetworkACLTemplateInboundRuleArgs{
// 					DstPort:  pulumi.String("any"),
// 					Protocol: pulumi.String("IP"),
// 					SrcPort:  pulumi.String("any"),
// 					Subnet:   pulumi.String("1.1.1.1/32"),
// 				},
// 				&NetworkACLTemplateInboundRuleArgs{
// 					DstPort:  pulumi.String("53,1045,2041"),
// 					Protocol: pulumi.String("UDP"),
// 					SrcPort:  pulumi.String("any"),
// 					Subnet:   pulumi.String("172.16.25.0/24"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/networkACLTemplate:NetworkACLTemplate example {existing_id}
// ```
type NetworkACLTemplate struct {
	pulumi.CustomResourceState

	// ACL template description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Status of ACL template provisioning process, where template was applied.
	// One of `PROVISIONING`, `PROVISIONED`.
	DeviceAclStatus pulumi.StringOutput `pulumi:"deviceAclStatus"`
	// List of the devices where the ACL template is applied.
	DeviceDetails NetworkACLTemplateDeviceDetailArrayOutput `pulumi:"deviceDetails"`
	// (Deprecated) Identifier of a network device where template was applied.
	//
	// Deprecated: Refer to device details get device information
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// One or more rules to specify allowed inbound traffic.
	// Rules are ordered, matching traffic rule stops processing subsequent ones.
	InboundRules NetworkACLTemplateInboundRuleArrayOutput `pulumi:"inboundRules"`
	// ACL template location metro code.
	//
	// Deprecated: Metro Code is no longer required
	MetroCode pulumi.StringPtrOutput `pulumi:"metroCode"`
	// ACL template name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Device uuid.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewNetworkACLTemplate registers a new resource with the given unique name, arguments, and options.
func NewNetworkACLTemplate(ctx *pulumi.Context,
	name string, args *NetworkACLTemplateArgs, opts ...pulumi.ResourceOption) (*NetworkACLTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InboundRules == nil {
		return nil, errors.New("invalid value for required argument 'InboundRules'")
	}
	var resource NetworkACLTemplate
	err := ctx.RegisterResource("equinix:index/networkACLTemplate:NetworkACLTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkACLTemplate gets an existing NetworkACLTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkACLTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkACLTemplateState, opts ...pulumi.ResourceOption) (*NetworkACLTemplate, error) {
	var resource NetworkACLTemplate
	err := ctx.ReadResource("equinix:index/networkACLTemplate:NetworkACLTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkACLTemplate resources.
type networkACLTemplateState struct {
	// ACL template description.
	Description *string `pulumi:"description"`
	// Status of ACL template provisioning process, where template was applied.
	// One of `PROVISIONING`, `PROVISIONED`.
	DeviceAclStatus *string `pulumi:"deviceAclStatus"`
	// List of the devices where the ACL template is applied.
	DeviceDetails []NetworkACLTemplateDeviceDetail `pulumi:"deviceDetails"`
	// (Deprecated) Identifier of a network device where template was applied.
	//
	// Deprecated: Refer to device details get device information
	DeviceId *string `pulumi:"deviceId"`
	// One or more rules to specify allowed inbound traffic.
	// Rules are ordered, matching traffic rule stops processing subsequent ones.
	InboundRules []NetworkACLTemplateInboundRule `pulumi:"inboundRules"`
	// ACL template location metro code.
	//
	// Deprecated: Metro Code is no longer required
	MetroCode *string `pulumi:"metroCode"`
	// ACL template name.
	Name *string `pulumi:"name"`
	// Device uuid.
	Uuid *string `pulumi:"uuid"`
}

type NetworkACLTemplateState struct {
	// ACL template description.
	Description pulumi.StringPtrInput
	// Status of ACL template provisioning process, where template was applied.
	// One of `PROVISIONING`, `PROVISIONED`.
	DeviceAclStatus pulumi.StringPtrInput
	// List of the devices where the ACL template is applied.
	DeviceDetails NetworkACLTemplateDeviceDetailArrayInput
	// (Deprecated) Identifier of a network device where template was applied.
	//
	// Deprecated: Refer to device details get device information
	DeviceId pulumi.StringPtrInput
	// One or more rules to specify allowed inbound traffic.
	// Rules are ordered, matching traffic rule stops processing subsequent ones.
	InboundRules NetworkACLTemplateInboundRuleArrayInput
	// ACL template location metro code.
	//
	// Deprecated: Metro Code is no longer required
	MetroCode pulumi.StringPtrInput
	// ACL template name.
	Name pulumi.StringPtrInput
	// Device uuid.
	Uuid pulumi.StringPtrInput
}

func (NetworkACLTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkACLTemplateState)(nil)).Elem()
}

type networkACLTemplateArgs struct {
	// ACL template description.
	Description *string `pulumi:"description"`
	// One or more rules to specify allowed inbound traffic.
	// Rules are ordered, matching traffic rule stops processing subsequent ones.
	InboundRules []NetworkACLTemplateInboundRule `pulumi:"inboundRules"`
	// ACL template location metro code.
	//
	// Deprecated: Metro Code is no longer required
	MetroCode *string `pulumi:"metroCode"`
	// ACL template name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a NetworkACLTemplate resource.
type NetworkACLTemplateArgs struct {
	// ACL template description.
	Description pulumi.StringPtrInput
	// One or more rules to specify allowed inbound traffic.
	// Rules are ordered, matching traffic rule stops processing subsequent ones.
	InboundRules NetworkACLTemplateInboundRuleArrayInput
	// ACL template location metro code.
	//
	// Deprecated: Metro Code is no longer required
	MetroCode pulumi.StringPtrInput
	// ACL template name.
	Name pulumi.StringPtrInput
}

func (NetworkACLTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkACLTemplateArgs)(nil)).Elem()
}

type NetworkACLTemplateInput interface {
	pulumi.Input

	ToNetworkACLTemplateOutput() NetworkACLTemplateOutput
	ToNetworkACLTemplateOutputWithContext(ctx context.Context) NetworkACLTemplateOutput
}

func (*NetworkACLTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACLTemplate)(nil)).Elem()
}

func (i *NetworkACLTemplate) ToNetworkACLTemplateOutput() NetworkACLTemplateOutput {
	return i.ToNetworkACLTemplateOutputWithContext(context.Background())
}

func (i *NetworkACLTemplate) ToNetworkACLTemplateOutputWithContext(ctx context.Context) NetworkACLTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateOutput)
}

// NetworkACLTemplateArrayInput is an input type that accepts NetworkACLTemplateArray and NetworkACLTemplateArrayOutput values.
// You can construct a concrete instance of `NetworkACLTemplateArrayInput` via:
//
//          NetworkACLTemplateArray{ NetworkACLTemplateArgs{...} }
type NetworkACLTemplateArrayInput interface {
	pulumi.Input

	ToNetworkACLTemplateArrayOutput() NetworkACLTemplateArrayOutput
	ToNetworkACLTemplateArrayOutputWithContext(context.Context) NetworkACLTemplateArrayOutput
}

type NetworkACLTemplateArray []NetworkACLTemplateInput

func (NetworkACLTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkACLTemplate)(nil)).Elem()
}

func (i NetworkACLTemplateArray) ToNetworkACLTemplateArrayOutput() NetworkACLTemplateArrayOutput {
	return i.ToNetworkACLTemplateArrayOutputWithContext(context.Background())
}

func (i NetworkACLTemplateArray) ToNetworkACLTemplateArrayOutputWithContext(ctx context.Context) NetworkACLTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateArrayOutput)
}

// NetworkACLTemplateMapInput is an input type that accepts NetworkACLTemplateMap and NetworkACLTemplateMapOutput values.
// You can construct a concrete instance of `NetworkACLTemplateMapInput` via:
//
//          NetworkACLTemplateMap{ "key": NetworkACLTemplateArgs{...} }
type NetworkACLTemplateMapInput interface {
	pulumi.Input

	ToNetworkACLTemplateMapOutput() NetworkACLTemplateMapOutput
	ToNetworkACLTemplateMapOutputWithContext(context.Context) NetworkACLTemplateMapOutput
}

type NetworkACLTemplateMap map[string]NetworkACLTemplateInput

func (NetworkACLTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkACLTemplate)(nil)).Elem()
}

func (i NetworkACLTemplateMap) ToNetworkACLTemplateMapOutput() NetworkACLTemplateMapOutput {
	return i.ToNetworkACLTemplateMapOutputWithContext(context.Background())
}

func (i NetworkACLTemplateMap) ToNetworkACLTemplateMapOutputWithContext(ctx context.Context) NetworkACLTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateMapOutput)
}

type NetworkACLTemplateOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkACLTemplate)(nil)).Elem()
}

func (o NetworkACLTemplateOutput) ToNetworkACLTemplateOutput() NetworkACLTemplateOutput {
	return o
}

func (o NetworkACLTemplateOutput) ToNetworkACLTemplateOutputWithContext(ctx context.Context) NetworkACLTemplateOutput {
	return o
}

// ACL template description.
func (o NetworkACLTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of ACL template provisioning process, where template was applied.
// One of `PROVISIONING`, `PROVISIONED`.
func (o NetworkACLTemplateOutput) DeviceAclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) pulumi.StringOutput { return v.DeviceAclStatus }).(pulumi.StringOutput)
}

// List of the devices where the ACL template is applied.
func (o NetworkACLTemplateOutput) DeviceDetails() NetworkACLTemplateDeviceDetailArrayOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) NetworkACLTemplateDeviceDetailArrayOutput { return v.DeviceDetails }).(NetworkACLTemplateDeviceDetailArrayOutput)
}

// (Deprecated) Identifier of a network device where template was applied.
//
// Deprecated: Refer to device details get device information
func (o NetworkACLTemplateOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

// One or more rules to specify allowed inbound traffic.
// Rules are ordered, matching traffic rule stops processing subsequent ones.
func (o NetworkACLTemplateOutput) InboundRules() NetworkACLTemplateInboundRuleArrayOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) NetworkACLTemplateInboundRuleArrayOutput { return v.InboundRules }).(NetworkACLTemplateInboundRuleArrayOutput)
}

// ACL template location metro code.
//
// Deprecated: Metro Code is no longer required
func (o NetworkACLTemplateOutput) MetroCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) pulumi.StringPtrOutput { return v.MetroCode }).(pulumi.StringPtrOutput)
}

// ACL template name.
func (o NetworkACLTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Device uuid.
func (o NetworkACLTemplateOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkACLTemplate) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type NetworkACLTemplateArrayOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkACLTemplate)(nil)).Elem()
}

func (o NetworkACLTemplateArrayOutput) ToNetworkACLTemplateArrayOutput() NetworkACLTemplateArrayOutput {
	return o
}

func (o NetworkACLTemplateArrayOutput) ToNetworkACLTemplateArrayOutputWithContext(ctx context.Context) NetworkACLTemplateArrayOutput {
	return o
}

func (o NetworkACLTemplateArrayOutput) Index(i pulumi.IntInput) NetworkACLTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkACLTemplate {
		return vs[0].([]*NetworkACLTemplate)[vs[1].(int)]
	}).(NetworkACLTemplateOutput)
}

type NetworkACLTemplateMapOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkACLTemplate)(nil)).Elem()
}

func (o NetworkACLTemplateMapOutput) ToNetworkACLTemplateMapOutput() NetworkACLTemplateMapOutput {
	return o
}

func (o NetworkACLTemplateMapOutput) ToNetworkACLTemplateMapOutputWithContext(ctx context.Context) NetworkACLTemplateMapOutput {
	return o
}

func (o NetworkACLTemplateMapOutput) MapIndex(k pulumi.StringInput) NetworkACLTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkACLTemplate {
		return vs[0].(map[string]*NetworkACLTemplate)[vs[1].(string)]
	}).(NetworkACLTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateInput)(nil)).Elem(), &NetworkACLTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateArrayInput)(nil)).Elem(), NetworkACLTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateMapInput)(nil)).Elem(), NetworkACLTemplateMap{})
	pulumi.RegisterOutputType(NetworkACLTemplateOutput{})
	pulumi.RegisterOutputType(NetworkACLTemplateArrayOutput{})
	pulumi.RegisterOutputType(NetworkACLTemplateMapOutput{})
}
