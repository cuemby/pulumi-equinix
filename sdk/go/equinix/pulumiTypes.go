// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ECXL2ConnectionAction struct {
	Message       *string                             `pulumi:"message"`
	OperationId   *string                             `pulumi:"operationId"`
	RequiredDatas []ECXL2ConnectionActionRequiredData `pulumi:"requiredDatas"`
	Type          *string                             `pulumi:"type"`
}

// ECXL2ConnectionActionInput is an input type that accepts ECXL2ConnectionActionArgs and ECXL2ConnectionActionOutput values.
// You can construct a concrete instance of `ECXL2ConnectionActionInput` via:
//
//          ECXL2ConnectionActionArgs{...}
type ECXL2ConnectionActionInput interface {
	pulumi.Input

	ToECXL2ConnectionActionOutput() ECXL2ConnectionActionOutput
	ToECXL2ConnectionActionOutputWithContext(context.Context) ECXL2ConnectionActionOutput
}

type ECXL2ConnectionActionArgs struct {
	Message       pulumi.StringPtrInput                       `pulumi:"message"`
	OperationId   pulumi.StringPtrInput                       `pulumi:"operationId"`
	RequiredDatas ECXL2ConnectionActionRequiredDataArrayInput `pulumi:"requiredDatas"`
	Type          pulumi.StringPtrInput                       `pulumi:"type"`
}

func (ECXL2ConnectionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionAction)(nil)).Elem()
}

func (i ECXL2ConnectionActionArgs) ToECXL2ConnectionActionOutput() ECXL2ConnectionActionOutput {
	return i.ToECXL2ConnectionActionOutputWithContext(context.Background())
}

func (i ECXL2ConnectionActionArgs) ToECXL2ConnectionActionOutputWithContext(ctx context.Context) ECXL2ConnectionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionActionOutput)
}

// ECXL2ConnectionActionArrayInput is an input type that accepts ECXL2ConnectionActionArray and ECXL2ConnectionActionArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionActionArrayInput` via:
//
//          ECXL2ConnectionActionArray{ ECXL2ConnectionActionArgs{...} }
type ECXL2ConnectionActionArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionActionArrayOutput() ECXL2ConnectionActionArrayOutput
	ToECXL2ConnectionActionArrayOutputWithContext(context.Context) ECXL2ConnectionActionArrayOutput
}

type ECXL2ConnectionActionArray []ECXL2ConnectionActionInput

func (ECXL2ConnectionActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionAction)(nil)).Elem()
}

func (i ECXL2ConnectionActionArray) ToECXL2ConnectionActionArrayOutput() ECXL2ConnectionActionArrayOutput {
	return i.ToECXL2ConnectionActionArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionActionArray) ToECXL2ConnectionActionArrayOutputWithContext(ctx context.Context) ECXL2ConnectionActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionActionArrayOutput)
}

type ECXL2ConnectionActionOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionAction)(nil)).Elem()
}

func (o ECXL2ConnectionActionOutput) ToECXL2ConnectionActionOutput() ECXL2ConnectionActionOutput {
	return o
}

func (o ECXL2ConnectionActionOutput) ToECXL2ConnectionActionOutputWithContext(ctx context.Context) ECXL2ConnectionActionOutput {
	return o
}

func (o ECXL2ConnectionActionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionAction) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionActionOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionAction) *string { return v.OperationId }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionActionOutput) RequiredDatas() ECXL2ConnectionActionRequiredDataArrayOutput {
	return o.ApplyT(func(v ECXL2ConnectionAction) []ECXL2ConnectionActionRequiredData { return v.RequiredDatas }).(ECXL2ConnectionActionRequiredDataArrayOutput)
}

func (o ECXL2ConnectionActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ECXL2ConnectionActionArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionAction)(nil)).Elem()
}

func (o ECXL2ConnectionActionArrayOutput) ToECXL2ConnectionActionArrayOutput() ECXL2ConnectionActionArrayOutput {
	return o
}

func (o ECXL2ConnectionActionArrayOutput) ToECXL2ConnectionActionArrayOutputWithContext(ctx context.Context) ECXL2ConnectionActionArrayOutput {
	return o
}

func (o ECXL2ConnectionActionArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ConnectionAction {
		return vs[0].([]ECXL2ConnectionAction)[vs[1].(int)]
	}).(ECXL2ConnectionActionOutput)
}

type ECXL2ConnectionActionRequiredData struct {
	Editable          *bool   `pulumi:"editable"`
	Key               *string `pulumi:"key"`
	Label             *string `pulumi:"label"`
	ValidationPattern *string `pulumi:"validationPattern"`
	// additional information value
	Value *string `pulumi:"value"`
}

// ECXL2ConnectionActionRequiredDataInput is an input type that accepts ECXL2ConnectionActionRequiredDataArgs and ECXL2ConnectionActionRequiredDataOutput values.
// You can construct a concrete instance of `ECXL2ConnectionActionRequiredDataInput` via:
//
//          ECXL2ConnectionActionRequiredDataArgs{...}
type ECXL2ConnectionActionRequiredDataInput interface {
	pulumi.Input

	ToECXL2ConnectionActionRequiredDataOutput() ECXL2ConnectionActionRequiredDataOutput
	ToECXL2ConnectionActionRequiredDataOutputWithContext(context.Context) ECXL2ConnectionActionRequiredDataOutput
}

type ECXL2ConnectionActionRequiredDataArgs struct {
	Editable          pulumi.BoolPtrInput   `pulumi:"editable"`
	Key               pulumi.StringPtrInput `pulumi:"key"`
	Label             pulumi.StringPtrInput `pulumi:"label"`
	ValidationPattern pulumi.StringPtrInput `pulumi:"validationPattern"`
	// additional information value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ECXL2ConnectionActionRequiredDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionActionRequiredData)(nil)).Elem()
}

func (i ECXL2ConnectionActionRequiredDataArgs) ToECXL2ConnectionActionRequiredDataOutput() ECXL2ConnectionActionRequiredDataOutput {
	return i.ToECXL2ConnectionActionRequiredDataOutputWithContext(context.Background())
}

func (i ECXL2ConnectionActionRequiredDataArgs) ToECXL2ConnectionActionRequiredDataOutputWithContext(ctx context.Context) ECXL2ConnectionActionRequiredDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionActionRequiredDataOutput)
}

// ECXL2ConnectionActionRequiredDataArrayInput is an input type that accepts ECXL2ConnectionActionRequiredDataArray and ECXL2ConnectionActionRequiredDataArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionActionRequiredDataArrayInput` via:
//
//          ECXL2ConnectionActionRequiredDataArray{ ECXL2ConnectionActionRequiredDataArgs{...} }
type ECXL2ConnectionActionRequiredDataArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionActionRequiredDataArrayOutput() ECXL2ConnectionActionRequiredDataArrayOutput
	ToECXL2ConnectionActionRequiredDataArrayOutputWithContext(context.Context) ECXL2ConnectionActionRequiredDataArrayOutput
}

type ECXL2ConnectionActionRequiredDataArray []ECXL2ConnectionActionRequiredDataInput

func (ECXL2ConnectionActionRequiredDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionActionRequiredData)(nil)).Elem()
}

func (i ECXL2ConnectionActionRequiredDataArray) ToECXL2ConnectionActionRequiredDataArrayOutput() ECXL2ConnectionActionRequiredDataArrayOutput {
	return i.ToECXL2ConnectionActionRequiredDataArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionActionRequiredDataArray) ToECXL2ConnectionActionRequiredDataArrayOutputWithContext(ctx context.Context) ECXL2ConnectionActionRequiredDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionActionRequiredDataArrayOutput)
}

type ECXL2ConnectionActionRequiredDataOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionActionRequiredDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionActionRequiredData)(nil)).Elem()
}

func (o ECXL2ConnectionActionRequiredDataOutput) ToECXL2ConnectionActionRequiredDataOutput() ECXL2ConnectionActionRequiredDataOutput {
	return o
}

func (o ECXL2ConnectionActionRequiredDataOutput) ToECXL2ConnectionActionRequiredDataOutputWithContext(ctx context.Context) ECXL2ConnectionActionRequiredDataOutput {
	return o
}

func (o ECXL2ConnectionActionRequiredDataOutput) Editable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionActionRequiredData) *bool { return v.Editable }).(pulumi.BoolPtrOutput)
}

func (o ECXL2ConnectionActionRequiredDataOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionActionRequiredData) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionActionRequiredDataOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionActionRequiredData) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionActionRequiredDataOutput) ValidationPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionActionRequiredData) *string { return v.ValidationPattern }).(pulumi.StringPtrOutput)
}

// additional information value
func (o ECXL2ConnectionActionRequiredDataOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionActionRequiredData) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ECXL2ConnectionActionRequiredDataArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionActionRequiredDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionActionRequiredData)(nil)).Elem()
}

func (o ECXL2ConnectionActionRequiredDataArrayOutput) ToECXL2ConnectionActionRequiredDataArrayOutput() ECXL2ConnectionActionRequiredDataArrayOutput {
	return o
}

func (o ECXL2ConnectionActionRequiredDataArrayOutput) ToECXL2ConnectionActionRequiredDataArrayOutputWithContext(ctx context.Context) ECXL2ConnectionActionRequiredDataArrayOutput {
	return o
}

func (o ECXL2ConnectionActionRequiredDataArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionActionRequiredDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ConnectionActionRequiredData {
		return vs[0].([]ECXL2ConnectionActionRequiredData)[vs[1].(int)]
	}).(ECXL2ConnectionActionRequiredDataOutput)
}

type ECXL2ConnectionAdditionalInfo struct {
	// additional information key
	Name string `pulumi:"name"`
	// additional information value
	Value string `pulumi:"value"`
}

// ECXL2ConnectionAdditionalInfoInput is an input type that accepts ECXL2ConnectionAdditionalInfoArgs and ECXL2ConnectionAdditionalInfoOutput values.
// You can construct a concrete instance of `ECXL2ConnectionAdditionalInfoInput` via:
//
//          ECXL2ConnectionAdditionalInfoArgs{...}
type ECXL2ConnectionAdditionalInfoInput interface {
	pulumi.Input

	ToECXL2ConnectionAdditionalInfoOutput() ECXL2ConnectionAdditionalInfoOutput
	ToECXL2ConnectionAdditionalInfoOutputWithContext(context.Context) ECXL2ConnectionAdditionalInfoOutput
}

type ECXL2ConnectionAdditionalInfoArgs struct {
	// additional information key
	Name pulumi.StringInput `pulumi:"name"`
	// additional information value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ECXL2ConnectionAdditionalInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionAdditionalInfo)(nil)).Elem()
}

func (i ECXL2ConnectionAdditionalInfoArgs) ToECXL2ConnectionAdditionalInfoOutput() ECXL2ConnectionAdditionalInfoOutput {
	return i.ToECXL2ConnectionAdditionalInfoOutputWithContext(context.Background())
}

func (i ECXL2ConnectionAdditionalInfoArgs) ToECXL2ConnectionAdditionalInfoOutputWithContext(ctx context.Context) ECXL2ConnectionAdditionalInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionAdditionalInfoOutput)
}

// ECXL2ConnectionAdditionalInfoArrayInput is an input type that accepts ECXL2ConnectionAdditionalInfoArray and ECXL2ConnectionAdditionalInfoArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionAdditionalInfoArrayInput` via:
//
//          ECXL2ConnectionAdditionalInfoArray{ ECXL2ConnectionAdditionalInfoArgs{...} }
type ECXL2ConnectionAdditionalInfoArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionAdditionalInfoArrayOutput() ECXL2ConnectionAdditionalInfoArrayOutput
	ToECXL2ConnectionAdditionalInfoArrayOutputWithContext(context.Context) ECXL2ConnectionAdditionalInfoArrayOutput
}

type ECXL2ConnectionAdditionalInfoArray []ECXL2ConnectionAdditionalInfoInput

func (ECXL2ConnectionAdditionalInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionAdditionalInfo)(nil)).Elem()
}

func (i ECXL2ConnectionAdditionalInfoArray) ToECXL2ConnectionAdditionalInfoArrayOutput() ECXL2ConnectionAdditionalInfoArrayOutput {
	return i.ToECXL2ConnectionAdditionalInfoArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionAdditionalInfoArray) ToECXL2ConnectionAdditionalInfoArrayOutputWithContext(ctx context.Context) ECXL2ConnectionAdditionalInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionAdditionalInfoArrayOutput)
}

type ECXL2ConnectionAdditionalInfoOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionAdditionalInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionAdditionalInfo)(nil)).Elem()
}

func (o ECXL2ConnectionAdditionalInfoOutput) ToECXL2ConnectionAdditionalInfoOutput() ECXL2ConnectionAdditionalInfoOutput {
	return o
}

func (o ECXL2ConnectionAdditionalInfoOutput) ToECXL2ConnectionAdditionalInfoOutputWithContext(ctx context.Context) ECXL2ConnectionAdditionalInfoOutput {
	return o
}

// additional information key
func (o ECXL2ConnectionAdditionalInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ECXL2ConnectionAdditionalInfo) string { return v.Name }).(pulumi.StringOutput)
}

// additional information value
func (o ECXL2ConnectionAdditionalInfoOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ECXL2ConnectionAdditionalInfo) string { return v.Value }).(pulumi.StringOutput)
}

type ECXL2ConnectionAdditionalInfoArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionAdditionalInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionAdditionalInfo)(nil)).Elem()
}

func (o ECXL2ConnectionAdditionalInfoArrayOutput) ToECXL2ConnectionAdditionalInfoArrayOutput() ECXL2ConnectionAdditionalInfoArrayOutput {
	return o
}

func (o ECXL2ConnectionAdditionalInfoArrayOutput) ToECXL2ConnectionAdditionalInfoArrayOutputWithContext(ctx context.Context) ECXL2ConnectionAdditionalInfoArrayOutput {
	return o
}

func (o ECXL2ConnectionAdditionalInfoArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionAdditionalInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ConnectionAdditionalInfo {
		return vs[0].([]ECXL2ConnectionAdditionalInfo)[vs[1].(int)]
	}).(ECXL2ConnectionAdditionalInfoOutput)
}

type ECXL2ConnectionSecondaryConnection struct {
	// One or more pending actions to complete connection provisioning.
	Actions []ECXL2ConnectionSecondaryConnectionAction `pulumi:"actions"`
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. If not specified primary `authorizationKey` will be used. However,
	// some service providers may require different keys for each connection. More information on
	// [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device. If not specified then first available interface will be selected.
	DeviceInterfaceId *int `pulumi:"deviceInterfaceId"`
	// Applicable with primary `deviceUuid`. Identifier of the Network Edge
	// virtual device from which the secondary connection would originate. If not specified primary
	// `deviceUuid` will be used.
	DeviceUuid *string `pulumi:"deviceUuid"`
	// secondary connection name
	Name string `pulumi:"name"`
	// Applicable with primary `portUuid`. Identifier of the Equinix Fabric Port from
	// which the secondary connection would originate. If not specified primary `portUuid` will be used.
	PortUuid *string `pulumi:"portUuid"`
	// Unique identifier of the service provider's profile.
	ProfileUuid *string `pulumi:"profileUuid"`
	// Connection provisioning status on service provider's side.
	ProviderStatus *string `pulumi:"providerStatus"`
	// Unique identifier of group containing a primary and secondary connection.
	RedundancyGroup *string `pulumi:"redundancyGroup"`
	// Connection redundancy type, applicable for HA connections. Valid values are
	// `PRIMARY`, `SECONDARY`.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier of the redundant connection, applicable for HA connections.
	//
	// Deprecated: SecondaryConnection.0.RedundantUUID will not be returned. Use UUID instead
	RedundantUuid *string `pulumi:"redundantUuid"`
	// The metro code that denotes the secondary connection’s
	// destination (Z side). .
	SellerMetroCode *string `pulumi:"sellerMetroCode"`
	// The region in which the seller port resides. If not specified
	// primary `sellerRegion` will be used.
	SellerRegion *string `pulumi:"sellerRegion"`
	// Required with primary `serviceToken`. Unique Equinix Fabric key
	// given by a provider that grants you authorization to enable connectivity from an Equinix Fabric Port or
	// virtual device. Each connection (primary and secondary) requires a separate token.
	// More details in [Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
	ServiceToken *string `pulumi:"serviceToken"`
	// Speed/Bandwidth to be allocated to the secondary connection. If not
	// specified primary `speed` will be used.
	Speed *int `pulumi:"speed"`
	// Unit of the speed/bandwidth to be allocated to the secondary
	// connection. If not specified primary `speedUnit` will be used.
	SpeedUnit *string `pulumi:"speedUnit"`
	// Connection provisioning status on Equinix Fabric side.
	Status *string `pulumi:"status"`
	// Unique identifier of the connection.
	Uuid *string `pulumi:"uuid"`
	// The Equinix Fabric Token the connection was created with. Applicable if the
	// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
	// * `secondaryConnection`:
	// * `zsidePortUuid`
	// * `zsideVlanStag`
	// * `zsideVlanCtag`
	// * `redundancyType`
	// * `redundancyGroup`
	// * `vendorToken`
	VendorToken *string `pulumi:"vendorToken"`
	// Applicable with `portUuid`. C-Tag/Inner-Tag of the secondary
	// connection, a numeric character ranging from 2 - 4094.
	VlanCtag *int `pulumi:"vlanCtag"`
	// S-Tag/Outer-Tag of the secondary connection, a
	// numeric character ranging from 2 - 4094.
	VlanStag *int `pulumi:"vlanStag"`
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid *string `pulumi:"zsidePortUuid"`
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag *int `pulumi:"zsideVlanCtag"`
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag *int `pulumi:"zsideVlanStag"`
}

// ECXL2ConnectionSecondaryConnectionInput is an input type that accepts ECXL2ConnectionSecondaryConnectionArgs and ECXL2ConnectionSecondaryConnectionOutput values.
// You can construct a concrete instance of `ECXL2ConnectionSecondaryConnectionInput` via:
//
//          ECXL2ConnectionSecondaryConnectionArgs{...}
type ECXL2ConnectionSecondaryConnectionInput interface {
	pulumi.Input

	ToECXL2ConnectionSecondaryConnectionOutput() ECXL2ConnectionSecondaryConnectionOutput
	ToECXL2ConnectionSecondaryConnectionOutputWithContext(context.Context) ECXL2ConnectionSecondaryConnectionOutput
}

type ECXL2ConnectionSecondaryConnectionArgs struct {
	// One or more pending actions to complete connection provisioning.
	Actions ECXL2ConnectionSecondaryConnectionActionArrayInput `pulumi:"actions"`
	// Unique identifier authorizing Equinix to provision a connection
	// towards a cloud service provider. If not specified primary `authorizationKey` will be used. However,
	// some service providers may require different keys for each connection. More information on
	// [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
	AuthorizationKey pulumi.StringPtrInput `pulumi:"authorizationKey"`
	// Applicable with `deviceUuid`, identifier of network interface
	// on a given device. If not specified then first available interface will be selected.
	DeviceInterfaceId pulumi.IntPtrInput `pulumi:"deviceInterfaceId"`
	// Applicable with primary `deviceUuid`. Identifier of the Network Edge
	// virtual device from which the secondary connection would originate. If not specified primary
	// `deviceUuid` will be used.
	DeviceUuid pulumi.StringPtrInput `pulumi:"deviceUuid"`
	// secondary connection name
	Name pulumi.StringInput `pulumi:"name"`
	// Applicable with primary `portUuid`. Identifier of the Equinix Fabric Port from
	// which the secondary connection would originate. If not specified primary `portUuid` will be used.
	PortUuid pulumi.StringPtrInput `pulumi:"portUuid"`
	// Unique identifier of the service provider's profile.
	ProfileUuid pulumi.StringPtrInput `pulumi:"profileUuid"`
	// Connection provisioning status on service provider's side.
	ProviderStatus pulumi.StringPtrInput `pulumi:"providerStatus"`
	// Unique identifier of group containing a primary and secondary connection.
	RedundancyGroup pulumi.StringPtrInput `pulumi:"redundancyGroup"`
	// Connection redundancy type, applicable for HA connections. Valid values are
	// `PRIMARY`, `SECONDARY`.
	RedundancyType pulumi.StringPtrInput `pulumi:"redundancyType"`
	// Unique identifier of the redundant connection, applicable for HA connections.
	//
	// Deprecated: SecondaryConnection.0.RedundantUUID will not be returned. Use UUID instead
	RedundantUuid pulumi.StringPtrInput `pulumi:"redundantUuid"`
	// The metro code that denotes the secondary connection’s
	// destination (Z side). .
	SellerMetroCode pulumi.StringPtrInput `pulumi:"sellerMetroCode"`
	// The region in which the seller port resides. If not specified
	// primary `sellerRegion` will be used.
	SellerRegion pulumi.StringPtrInput `pulumi:"sellerRegion"`
	// Required with primary `serviceToken`. Unique Equinix Fabric key
	// given by a provider that grants you authorization to enable connectivity from an Equinix Fabric Port or
	// virtual device. Each connection (primary and secondary) requires a separate token.
	// More details in [Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
	ServiceToken pulumi.StringPtrInput `pulumi:"serviceToken"`
	// Speed/Bandwidth to be allocated to the secondary connection. If not
	// specified primary `speed` will be used.
	Speed pulumi.IntPtrInput `pulumi:"speed"`
	// Unit of the speed/bandwidth to be allocated to the secondary
	// connection. If not specified primary `speedUnit` will be used.
	SpeedUnit pulumi.StringPtrInput `pulumi:"speedUnit"`
	// Connection provisioning status on Equinix Fabric side.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Unique identifier of the connection.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The Equinix Fabric Token the connection was created with. Applicable if the
	// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
	// * `secondaryConnection`:
	// * `zsidePortUuid`
	// * `zsideVlanStag`
	// * `zsideVlanCtag`
	// * `redundancyType`
	// * `redundancyGroup`
	// * `vendorToken`
	VendorToken pulumi.StringPtrInput `pulumi:"vendorToken"`
	// Applicable with `portUuid`. C-Tag/Inner-Tag of the secondary
	// connection, a numeric character ranging from 2 - 4094.
	VlanCtag pulumi.IntPtrInput `pulumi:"vlanCtag"`
	// S-Tag/Outer-Tag of the secondary connection, a
	// numeric character ranging from 2 - 4094.
	VlanStag pulumi.IntPtrInput `pulumi:"vlanStag"`
	// Unique identifier of the port on the remote/destination side
	// (z-side). Allows you to connect between your own ports or virtual devices across your company's
	// Equinix Fabric deployment, with no need for a private service profile.
	ZsidePortUuid pulumi.StringPtrInput `pulumi:"zsidePortUuid"`
	// C-Tag/Inner-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
	// connection.
	ZsideVlanCtag pulumi.IntPtrInput `pulumi:"zsideVlanCtag"`
	// S-Tag/Outer-Tag of the connection on the remote/destination
	// side (z-side) - a numeric character ranging from 2 - 4094.
	ZsideVlanStag pulumi.IntPtrInput `pulumi:"zsideVlanStag"`
}

func (ECXL2ConnectionSecondaryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionSecondaryConnection)(nil)).Elem()
}

func (i ECXL2ConnectionSecondaryConnectionArgs) ToECXL2ConnectionSecondaryConnectionOutput() ECXL2ConnectionSecondaryConnectionOutput {
	return i.ToECXL2ConnectionSecondaryConnectionOutputWithContext(context.Background())
}

func (i ECXL2ConnectionSecondaryConnectionArgs) ToECXL2ConnectionSecondaryConnectionOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionOutput)
}

func (i ECXL2ConnectionSecondaryConnectionArgs) ToECXL2ConnectionSecondaryConnectionPtrOutput() ECXL2ConnectionSecondaryConnectionPtrOutput {
	return i.ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(context.Background())
}

func (i ECXL2ConnectionSecondaryConnectionArgs) ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionOutput).ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(ctx)
}

// ECXL2ConnectionSecondaryConnectionPtrInput is an input type that accepts ECXL2ConnectionSecondaryConnectionArgs, ECXL2ConnectionSecondaryConnectionPtr and ECXL2ConnectionSecondaryConnectionPtrOutput values.
// You can construct a concrete instance of `ECXL2ConnectionSecondaryConnectionPtrInput` via:
//
//          ECXL2ConnectionSecondaryConnectionArgs{...}
//
//  or:
//
//          nil
type ECXL2ConnectionSecondaryConnectionPtrInput interface {
	pulumi.Input

	ToECXL2ConnectionSecondaryConnectionPtrOutput() ECXL2ConnectionSecondaryConnectionPtrOutput
	ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(context.Context) ECXL2ConnectionSecondaryConnectionPtrOutput
}

type ecxl2connectionSecondaryConnectionPtrType ECXL2ConnectionSecondaryConnectionArgs

func ECXL2ConnectionSecondaryConnectionPtr(v *ECXL2ConnectionSecondaryConnectionArgs) ECXL2ConnectionSecondaryConnectionPtrInput {
	return (*ecxl2connectionSecondaryConnectionPtrType)(v)
}

func (*ecxl2connectionSecondaryConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2ConnectionSecondaryConnection)(nil)).Elem()
}

func (i *ecxl2connectionSecondaryConnectionPtrType) ToECXL2ConnectionSecondaryConnectionPtrOutput() ECXL2ConnectionSecondaryConnectionPtrOutput {
	return i.ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(context.Background())
}

func (i *ecxl2connectionSecondaryConnectionPtrType) ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionPtrOutput)
}

type ECXL2ConnectionSecondaryConnectionOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionSecondaryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionSecondaryConnection)(nil)).Elem()
}

func (o ECXL2ConnectionSecondaryConnectionOutput) ToECXL2ConnectionSecondaryConnectionOutput() ECXL2ConnectionSecondaryConnectionOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionOutput) ToECXL2ConnectionSecondaryConnectionOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionOutput) ToECXL2ConnectionSecondaryConnectionPtrOutput() ECXL2ConnectionSecondaryConnectionPtrOutput {
	return o.ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(context.Background())
}

func (o ECXL2ConnectionSecondaryConnectionOutput) ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECXL2ConnectionSecondaryConnection) *ECXL2ConnectionSecondaryConnection {
		return &v
	}).(ECXL2ConnectionSecondaryConnectionPtrOutput)
}

// One or more pending actions to complete connection provisioning.
func (o ECXL2ConnectionSecondaryConnectionOutput) Actions() ECXL2ConnectionSecondaryConnectionActionArrayOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) []ECXL2ConnectionSecondaryConnectionAction {
		return v.Actions
	}).(ECXL2ConnectionSecondaryConnectionActionArrayOutput)
}

// Unique identifier authorizing Equinix to provision a connection
// towards a cloud service provider. If not specified primary `authorizationKey` will be used. However,
// some service providers may require different keys for each connection. More information on
// [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
func (o ECXL2ConnectionSecondaryConnectionOutput) AuthorizationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.AuthorizationKey }).(pulumi.StringPtrOutput)
}

// Applicable with `deviceUuid`, identifier of network interface
// on a given device. If not specified then first available interface will be selected.
func (o ECXL2ConnectionSecondaryConnectionOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *int { return v.DeviceInterfaceId }).(pulumi.IntPtrOutput)
}

// Applicable with primary `deviceUuid`. Identifier of the Network Edge
// virtual device from which the secondary connection would originate. If not specified primary
// `deviceUuid` will be used.
func (o ECXL2ConnectionSecondaryConnectionOutput) DeviceUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.DeviceUuid }).(pulumi.StringPtrOutput)
}

// secondary connection name
func (o ECXL2ConnectionSecondaryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) string { return v.Name }).(pulumi.StringOutput)
}

// Applicable with primary `portUuid`. Identifier of the Equinix Fabric Port from
// which the secondary connection would originate. If not specified primary `portUuid` will be used.
func (o ECXL2ConnectionSecondaryConnectionOutput) PortUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.PortUuid }).(pulumi.StringPtrOutput)
}

// Unique identifier of the service provider's profile.
func (o ECXL2ConnectionSecondaryConnectionOutput) ProfileUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.ProfileUuid }).(pulumi.StringPtrOutput)
}

// Connection provisioning status on service provider's side.
func (o ECXL2ConnectionSecondaryConnectionOutput) ProviderStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.ProviderStatus }).(pulumi.StringPtrOutput)
}

// Unique identifier of group containing a primary and secondary connection.
func (o ECXL2ConnectionSecondaryConnectionOutput) RedundancyGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.RedundancyGroup }).(pulumi.StringPtrOutput)
}

// Connection redundancy type, applicable for HA connections. Valid values are
// `PRIMARY`, `SECONDARY`.
func (o ECXL2ConnectionSecondaryConnectionOutput) RedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.RedundancyType }).(pulumi.StringPtrOutput)
}

// Unique identifier of the redundant connection, applicable for HA connections.
//
// Deprecated: SecondaryConnection.0.RedundantUUID will not be returned. Use UUID instead
func (o ECXL2ConnectionSecondaryConnectionOutput) RedundantUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.RedundantUuid }).(pulumi.StringPtrOutput)
}

// The metro code that denotes the secondary connection’s
// destination (Z side). .
func (o ECXL2ConnectionSecondaryConnectionOutput) SellerMetroCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.SellerMetroCode }).(pulumi.StringPtrOutput)
}

// The region in which the seller port resides. If not specified
// primary `sellerRegion` will be used.
func (o ECXL2ConnectionSecondaryConnectionOutput) SellerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.SellerRegion }).(pulumi.StringPtrOutput)
}

// Required with primary `serviceToken`. Unique Equinix Fabric key
// given by a provider that grants you authorization to enable connectivity from an Equinix Fabric Port or
// virtual device. Each connection (primary and secondary) requires a separate token.
// More details in [Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
func (o ECXL2ConnectionSecondaryConnectionOutput) ServiceToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.ServiceToken }).(pulumi.StringPtrOutput)
}

// Speed/Bandwidth to be allocated to the secondary connection. If not
// specified primary `speed` will be used.
func (o ECXL2ConnectionSecondaryConnectionOutput) Speed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *int { return v.Speed }).(pulumi.IntPtrOutput)
}

// Unit of the speed/bandwidth to be allocated to the secondary
// connection. If not specified primary `speedUnit` will be used.
func (o ECXL2ConnectionSecondaryConnectionOutput) SpeedUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.SpeedUnit }).(pulumi.StringPtrOutput)
}

// Connection provisioning status on Equinix Fabric side.
func (o ECXL2ConnectionSecondaryConnectionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Unique identifier of the connection.
func (o ECXL2ConnectionSecondaryConnectionOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The Equinix Fabric Token the connection was created with. Applicable if the
// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
// * `secondaryConnection`:
// * `zsidePortUuid`
// * `zsideVlanStag`
// * `zsideVlanCtag`
// * `redundancyType`
// * `redundancyGroup`
// * `vendorToken`
func (o ECXL2ConnectionSecondaryConnectionOutput) VendorToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.VendorToken }).(pulumi.StringPtrOutput)
}

// Applicable with `portUuid`. C-Tag/Inner-Tag of the secondary
// connection, a numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionSecondaryConnectionOutput) VlanCtag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *int { return v.VlanCtag }).(pulumi.IntPtrOutput)
}

// S-Tag/Outer-Tag of the secondary connection, a
// numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionSecondaryConnectionOutput) VlanStag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *int { return v.VlanStag }).(pulumi.IntPtrOutput)
}

// Unique identifier of the port on the remote/destination side
// (z-side). Allows you to connect between your own ports or virtual devices across your company's
// Equinix Fabric deployment, with no need for a private service profile.
func (o ECXL2ConnectionSecondaryConnectionOutput) ZsidePortUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *string { return v.ZsidePortUuid }).(pulumi.StringPtrOutput)
}

// C-Tag/Inner-Tag of the connection on the remote/destination
// side (z-side) - a numeric character ranging from 2 - 4094.
// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
// connection.
func (o ECXL2ConnectionSecondaryConnectionOutput) ZsideVlanCtag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *int { return v.ZsideVlanCtag }).(pulumi.IntPtrOutput)
}

// S-Tag/Outer-Tag of the connection on the remote/destination
// side (z-side) - a numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionSecondaryConnectionOutput) ZsideVlanStag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnection) *int { return v.ZsideVlanStag }).(pulumi.IntPtrOutput)
}

type ECXL2ConnectionSecondaryConnectionPtrOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionSecondaryConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2ConnectionSecondaryConnection)(nil)).Elem()
}

func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ToECXL2ConnectionSecondaryConnectionPtrOutput() ECXL2ConnectionSecondaryConnectionPtrOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ToECXL2ConnectionSecondaryConnectionPtrOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionPtrOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionPtrOutput) Elem() ECXL2ConnectionSecondaryConnectionOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) ECXL2ConnectionSecondaryConnection {
		if v != nil {
			return *v
		}
		var ret ECXL2ConnectionSecondaryConnection
		return ret
	}).(ECXL2ConnectionSecondaryConnectionOutput)
}

// One or more pending actions to complete connection provisioning.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) Actions() ECXL2ConnectionSecondaryConnectionActionArrayOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) []ECXL2ConnectionSecondaryConnectionAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(ECXL2ConnectionSecondaryConnectionActionArrayOutput)
}

// Unique identifier authorizing Equinix to provision a connection
// towards a cloud service provider. If not specified primary `authorizationKey` will be used. However,
// some service providers may require different keys for each connection. More information on
// [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) AuthorizationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationKey
	}).(pulumi.StringPtrOutput)
}

// Applicable with `deviceUuid`, identifier of network interface
// on a given device. If not specified then first available interface will be selected.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *int {
		if v == nil {
			return nil
		}
		return v.DeviceInterfaceId
	}).(pulumi.IntPtrOutput)
}

// Applicable with primary `deviceUuid`. Identifier of the Network Edge
// virtual device from which the secondary connection would originate. If not specified primary
// `deviceUuid` will be used.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) DeviceUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.DeviceUuid
	}).(pulumi.StringPtrOutput)
}

// secondary connection name
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Applicable with primary `portUuid`. Identifier of the Equinix Fabric Port from
// which the secondary connection would originate. If not specified primary `portUuid` will be used.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) PortUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.PortUuid
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the service provider's profile.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ProfileUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.ProfileUuid
	}).(pulumi.StringPtrOutput)
}

// Connection provisioning status on service provider's side.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ProviderStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.ProviderStatus
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of group containing a primary and secondary connection.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) RedundancyGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.RedundancyGroup
	}).(pulumi.StringPtrOutput)
}

// Connection redundancy type, applicable for HA connections. Valid values are
// `PRIMARY`, `SECONDARY`.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) RedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.RedundancyType
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the redundant connection, applicable for HA connections.
//
// Deprecated: SecondaryConnection.0.RedundantUUID will not be returned. Use UUID instead
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) RedundantUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.RedundantUuid
	}).(pulumi.StringPtrOutput)
}

// The metro code that denotes the secondary connection’s
// destination (Z side). .
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) SellerMetroCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SellerMetroCode
	}).(pulumi.StringPtrOutput)
}

// The region in which the seller port resides. If not specified
// primary `sellerRegion` will be used.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) SellerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SellerRegion
	}).(pulumi.StringPtrOutput)
}

// Required with primary `serviceToken`. Unique Equinix Fabric key
// given by a provider that grants you authorization to enable connectivity from an Equinix Fabric Port or
// virtual device. Each connection (primary and secondary) requires a separate token.
// More details in [Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ServiceToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.ServiceToken
	}).(pulumi.StringPtrOutput)
}

// Speed/Bandwidth to be allocated to the secondary connection. If not
// specified primary `speed` will be used.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) Speed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *int {
		if v == nil {
			return nil
		}
		return v.Speed
	}).(pulumi.IntPtrOutput)
}

// Unit of the speed/bandwidth to be allocated to the secondary
// connection. If not specified primary `speedUnit` will be used.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) SpeedUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.SpeedUnit
	}).(pulumi.StringPtrOutput)
}

// Connection provisioning status on Equinix Fabric side.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the connection.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// The Equinix Fabric Token the connection was created with. Applicable if the
// connection was created with a `serviceToken` (a-side) or `zsideServiceToken` (z-side).
// * `secondaryConnection`:
// * `zsidePortUuid`
// * `zsideVlanStag`
// * `zsideVlanCtag`
// * `redundancyType`
// * `redundancyGroup`
// * `vendorToken`
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) VendorToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.VendorToken
	}).(pulumi.StringPtrOutput)
}

// Applicable with `portUuid`. C-Tag/Inner-Tag of the secondary
// connection, a numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) VlanCtag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *int {
		if v == nil {
			return nil
		}
		return v.VlanCtag
	}).(pulumi.IntPtrOutput)
}

// S-Tag/Outer-Tag of the secondary connection, a
// numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) VlanStag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *int {
		if v == nil {
			return nil
		}
		return v.VlanStag
	}).(pulumi.IntPtrOutput)
}

// Unique identifier of the port on the remote/destination side
// (z-side). Allows you to connect between your own ports or virtual devices across your company's
// Equinix Fabric deployment, with no need for a private service profile.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ZsidePortUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *string {
		if v == nil {
			return nil
		}
		return v.ZsidePortUuid
	}).(pulumi.StringPtrOutput)
}

// C-Tag/Inner-Tag of the connection on the remote/destination
// side (z-side) - a numeric character ranging from 2 - 4094.
// `secondaryConnection` is defined it will internally use same `zsideVlanCtag` for the secondary
// connection.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ZsideVlanCtag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *int {
		if v == nil {
			return nil
		}
		return v.ZsideVlanCtag
	}).(pulumi.IntPtrOutput)
}

// S-Tag/Outer-Tag of the connection on the remote/destination
// side (z-side) - a numeric character ranging from 2 - 4094.
func (o ECXL2ConnectionSecondaryConnectionPtrOutput) ZsideVlanStag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ECXL2ConnectionSecondaryConnection) *int {
		if v == nil {
			return nil
		}
		return v.ZsideVlanStag
	}).(pulumi.IntPtrOutput)
}

type ECXL2ConnectionSecondaryConnectionAction struct {
	Message       *string                                                `pulumi:"message"`
	OperationId   *string                                                `pulumi:"operationId"`
	RequiredDatas []ECXL2ConnectionSecondaryConnectionActionRequiredData `pulumi:"requiredDatas"`
	Type          *string                                                `pulumi:"type"`
}

// ECXL2ConnectionSecondaryConnectionActionInput is an input type that accepts ECXL2ConnectionSecondaryConnectionActionArgs and ECXL2ConnectionSecondaryConnectionActionOutput values.
// You can construct a concrete instance of `ECXL2ConnectionSecondaryConnectionActionInput` via:
//
//          ECXL2ConnectionSecondaryConnectionActionArgs{...}
type ECXL2ConnectionSecondaryConnectionActionInput interface {
	pulumi.Input

	ToECXL2ConnectionSecondaryConnectionActionOutput() ECXL2ConnectionSecondaryConnectionActionOutput
	ToECXL2ConnectionSecondaryConnectionActionOutputWithContext(context.Context) ECXL2ConnectionSecondaryConnectionActionOutput
}

type ECXL2ConnectionSecondaryConnectionActionArgs struct {
	Message       pulumi.StringPtrInput                                          `pulumi:"message"`
	OperationId   pulumi.StringPtrInput                                          `pulumi:"operationId"`
	RequiredDatas ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayInput `pulumi:"requiredDatas"`
	Type          pulumi.StringPtrInput                                          `pulumi:"type"`
}

func (ECXL2ConnectionSecondaryConnectionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionAction)(nil)).Elem()
}

func (i ECXL2ConnectionSecondaryConnectionActionArgs) ToECXL2ConnectionSecondaryConnectionActionOutput() ECXL2ConnectionSecondaryConnectionActionOutput {
	return i.ToECXL2ConnectionSecondaryConnectionActionOutputWithContext(context.Background())
}

func (i ECXL2ConnectionSecondaryConnectionActionArgs) ToECXL2ConnectionSecondaryConnectionActionOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionActionOutput)
}

// ECXL2ConnectionSecondaryConnectionActionArrayInput is an input type that accepts ECXL2ConnectionSecondaryConnectionActionArray and ECXL2ConnectionSecondaryConnectionActionArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionSecondaryConnectionActionArrayInput` via:
//
//          ECXL2ConnectionSecondaryConnectionActionArray{ ECXL2ConnectionSecondaryConnectionActionArgs{...} }
type ECXL2ConnectionSecondaryConnectionActionArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionSecondaryConnectionActionArrayOutput() ECXL2ConnectionSecondaryConnectionActionArrayOutput
	ToECXL2ConnectionSecondaryConnectionActionArrayOutputWithContext(context.Context) ECXL2ConnectionSecondaryConnectionActionArrayOutput
}

type ECXL2ConnectionSecondaryConnectionActionArray []ECXL2ConnectionSecondaryConnectionActionInput

func (ECXL2ConnectionSecondaryConnectionActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionSecondaryConnectionAction)(nil)).Elem()
}

func (i ECXL2ConnectionSecondaryConnectionActionArray) ToECXL2ConnectionSecondaryConnectionActionArrayOutput() ECXL2ConnectionSecondaryConnectionActionArrayOutput {
	return i.ToECXL2ConnectionSecondaryConnectionActionArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionSecondaryConnectionActionArray) ToECXL2ConnectionSecondaryConnectionActionArrayOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionActionArrayOutput)
}

type ECXL2ConnectionSecondaryConnectionActionOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionSecondaryConnectionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionAction)(nil)).Elem()
}

func (o ECXL2ConnectionSecondaryConnectionActionOutput) ToECXL2ConnectionSecondaryConnectionActionOutput() ECXL2ConnectionSecondaryConnectionActionOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionOutput) ToECXL2ConnectionSecondaryConnectionActionOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionAction) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionSecondaryConnectionActionOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionAction) *string { return v.OperationId }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionSecondaryConnectionActionOutput) RequiredDatas() ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionAction) []ECXL2ConnectionSecondaryConnectionActionRequiredData {
		return v.RequiredDatas
	}).(ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput)
}

func (o ECXL2ConnectionSecondaryConnectionActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ECXL2ConnectionSecondaryConnectionActionArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionSecondaryConnectionActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionSecondaryConnectionAction)(nil)).Elem()
}

func (o ECXL2ConnectionSecondaryConnectionActionArrayOutput) ToECXL2ConnectionSecondaryConnectionActionArrayOutput() ECXL2ConnectionSecondaryConnectionActionArrayOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionArrayOutput) ToECXL2ConnectionSecondaryConnectionActionArrayOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionArrayOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionSecondaryConnectionActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ConnectionSecondaryConnectionAction {
		return vs[0].([]ECXL2ConnectionSecondaryConnectionAction)[vs[1].(int)]
	}).(ECXL2ConnectionSecondaryConnectionActionOutput)
}

type ECXL2ConnectionSecondaryConnectionActionRequiredData struct {
	Editable          *bool   `pulumi:"editable"`
	Key               *string `pulumi:"key"`
	Label             *string `pulumi:"label"`
	ValidationPattern *string `pulumi:"validationPattern"`
	// additional information value
	Value *string `pulumi:"value"`
}

// ECXL2ConnectionSecondaryConnectionActionRequiredDataInput is an input type that accepts ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs and ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput values.
// You can construct a concrete instance of `ECXL2ConnectionSecondaryConnectionActionRequiredDataInput` via:
//
//          ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs{...}
type ECXL2ConnectionSecondaryConnectionActionRequiredDataInput interface {
	pulumi.Input

	ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutput() ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput
	ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutputWithContext(context.Context) ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput
}

type ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs struct {
	Editable          pulumi.BoolPtrInput   `pulumi:"editable"`
	Key               pulumi.StringPtrInput `pulumi:"key"`
	Label             pulumi.StringPtrInput `pulumi:"label"`
	ValidationPattern pulumi.StringPtrInput `pulumi:"validationPattern"`
	// additional information value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionActionRequiredData)(nil)).Elem()
}

func (i ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs) ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutput() ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput {
	return i.ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutputWithContext(context.Background())
}

func (i ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs) ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput)
}

// ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayInput is an input type that accepts ECXL2ConnectionSecondaryConnectionActionRequiredDataArray and ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput values.
// You can construct a concrete instance of `ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayInput` via:
//
//          ECXL2ConnectionSecondaryConnectionActionRequiredDataArray{ ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs{...} }
type ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayInput interface {
	pulumi.Input

	ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput() ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput
	ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutputWithContext(context.Context) ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput
}

type ECXL2ConnectionSecondaryConnectionActionRequiredDataArray []ECXL2ConnectionSecondaryConnectionActionRequiredDataInput

func (ECXL2ConnectionSecondaryConnectionActionRequiredDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionSecondaryConnectionActionRequiredData)(nil)).Elem()
}

func (i ECXL2ConnectionSecondaryConnectionActionRequiredDataArray) ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput() ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput {
	return i.ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutputWithContext(context.Background())
}

func (i ECXL2ConnectionSecondaryConnectionActionRequiredDataArray) ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput)
}

type ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionActionRequiredData)(nil)).Elem()
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutput() ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) ToECXL2ConnectionSecondaryConnectionActionRequiredDataOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) Editable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionActionRequiredData) *bool { return v.Editable }).(pulumi.BoolPtrOutput)
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionActionRequiredData) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionActionRequiredData) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) ValidationPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionActionRequiredData) *string { return v.ValidationPattern }).(pulumi.StringPtrOutput)
}

// additional information value
func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECXL2ConnectionSecondaryConnectionActionRequiredData) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ConnectionSecondaryConnectionActionRequiredData)(nil)).Elem()
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput) ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput() ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput) ToECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutputWithContext(ctx context.Context) ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput {
	return o
}

func (o ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput) Index(i pulumi.IntInput) ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ConnectionSecondaryConnectionActionRequiredData {
		return vs[0].([]ECXL2ConnectionSecondaryConnectionActionRequiredData)[vs[1].(int)]
	}).(ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput)
}

type ECXL2ServiceprofileFeatures struct {
	// Indicates whether or not connections to this profile
	// can be created from remote metro locations.
	AllowRemoteConnections bool `pulumi:"allowRemoteConnections"`
	// Indicates whether or not this profile can be used for test
	// connections.
	//
	// Deprecated: TestProfile is no longer required and will be removed in a future release
	TestProfile *bool `pulumi:"testProfile"`
}

// ECXL2ServiceprofileFeaturesInput is an input type that accepts ECXL2ServiceprofileFeaturesArgs and ECXL2ServiceprofileFeaturesOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofileFeaturesInput` via:
//
//          ECXL2ServiceprofileFeaturesArgs{...}
type ECXL2ServiceprofileFeaturesInput interface {
	pulumi.Input

	ToECXL2ServiceprofileFeaturesOutput() ECXL2ServiceprofileFeaturesOutput
	ToECXL2ServiceprofileFeaturesOutputWithContext(context.Context) ECXL2ServiceprofileFeaturesOutput
}

type ECXL2ServiceprofileFeaturesArgs struct {
	// Indicates whether or not connections to this profile
	// can be created from remote metro locations.
	AllowRemoteConnections pulumi.BoolInput `pulumi:"allowRemoteConnections"`
	// Indicates whether or not this profile can be used for test
	// connections.
	//
	// Deprecated: TestProfile is no longer required and will be removed in a future release
	TestProfile pulumi.BoolPtrInput `pulumi:"testProfile"`
}

func (ECXL2ServiceprofileFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ServiceprofileFeatures)(nil)).Elem()
}

func (i ECXL2ServiceprofileFeaturesArgs) ToECXL2ServiceprofileFeaturesOutput() ECXL2ServiceprofileFeaturesOutput {
	return i.ToECXL2ServiceprofileFeaturesOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofileFeaturesArgs) ToECXL2ServiceprofileFeaturesOutputWithContext(ctx context.Context) ECXL2ServiceprofileFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileFeaturesOutput)
}

func (i ECXL2ServiceprofileFeaturesArgs) ToECXL2ServiceprofileFeaturesPtrOutput() ECXL2ServiceprofileFeaturesPtrOutput {
	return i.ToECXL2ServiceprofileFeaturesPtrOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofileFeaturesArgs) ToECXL2ServiceprofileFeaturesPtrOutputWithContext(ctx context.Context) ECXL2ServiceprofileFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileFeaturesOutput).ToECXL2ServiceprofileFeaturesPtrOutputWithContext(ctx)
}

// ECXL2ServiceprofileFeaturesPtrInput is an input type that accepts ECXL2ServiceprofileFeaturesArgs, ECXL2ServiceprofileFeaturesPtr and ECXL2ServiceprofileFeaturesPtrOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofileFeaturesPtrInput` via:
//
//          ECXL2ServiceprofileFeaturesArgs{...}
//
//  or:
//
//          nil
type ECXL2ServiceprofileFeaturesPtrInput interface {
	pulumi.Input

	ToECXL2ServiceprofileFeaturesPtrOutput() ECXL2ServiceprofileFeaturesPtrOutput
	ToECXL2ServiceprofileFeaturesPtrOutputWithContext(context.Context) ECXL2ServiceprofileFeaturesPtrOutput
}

type ecxl2serviceprofileFeaturesPtrType ECXL2ServiceprofileFeaturesArgs

func ECXL2ServiceprofileFeaturesPtr(v *ECXL2ServiceprofileFeaturesArgs) ECXL2ServiceprofileFeaturesPtrInput {
	return (*ecxl2serviceprofileFeaturesPtrType)(v)
}

func (*ecxl2serviceprofileFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2ServiceprofileFeatures)(nil)).Elem()
}

func (i *ecxl2serviceprofileFeaturesPtrType) ToECXL2ServiceprofileFeaturesPtrOutput() ECXL2ServiceprofileFeaturesPtrOutput {
	return i.ToECXL2ServiceprofileFeaturesPtrOutputWithContext(context.Background())
}

func (i *ecxl2serviceprofileFeaturesPtrType) ToECXL2ServiceprofileFeaturesPtrOutputWithContext(ctx context.Context) ECXL2ServiceprofileFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileFeaturesPtrOutput)
}

type ECXL2ServiceprofileFeaturesOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ServiceprofileFeatures)(nil)).Elem()
}

func (o ECXL2ServiceprofileFeaturesOutput) ToECXL2ServiceprofileFeaturesOutput() ECXL2ServiceprofileFeaturesOutput {
	return o
}

func (o ECXL2ServiceprofileFeaturesOutput) ToECXL2ServiceprofileFeaturesOutputWithContext(ctx context.Context) ECXL2ServiceprofileFeaturesOutput {
	return o
}

func (o ECXL2ServiceprofileFeaturesOutput) ToECXL2ServiceprofileFeaturesPtrOutput() ECXL2ServiceprofileFeaturesPtrOutput {
	return o.ToECXL2ServiceprofileFeaturesPtrOutputWithContext(context.Background())
}

func (o ECXL2ServiceprofileFeaturesOutput) ToECXL2ServiceprofileFeaturesPtrOutputWithContext(ctx context.Context) ECXL2ServiceprofileFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECXL2ServiceprofileFeatures) *ECXL2ServiceprofileFeatures {
		return &v
	}).(ECXL2ServiceprofileFeaturesPtrOutput)
}

// Indicates whether or not connections to this profile
// can be created from remote metro locations.
func (o ECXL2ServiceprofileFeaturesOutput) AllowRemoteConnections() pulumi.BoolOutput {
	return o.ApplyT(func(v ECXL2ServiceprofileFeatures) bool { return v.AllowRemoteConnections }).(pulumi.BoolOutput)
}

// Indicates whether or not this profile can be used for test
// connections.
//
// Deprecated: TestProfile is no longer required and will be removed in a future release
func (o ECXL2ServiceprofileFeaturesOutput) TestProfile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ECXL2ServiceprofileFeatures) *bool { return v.TestProfile }).(pulumi.BoolPtrOutput)
}

type ECXL2ServiceprofileFeaturesPtrOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2ServiceprofileFeatures)(nil)).Elem()
}

func (o ECXL2ServiceprofileFeaturesPtrOutput) ToECXL2ServiceprofileFeaturesPtrOutput() ECXL2ServiceprofileFeaturesPtrOutput {
	return o
}

func (o ECXL2ServiceprofileFeaturesPtrOutput) ToECXL2ServiceprofileFeaturesPtrOutputWithContext(ctx context.Context) ECXL2ServiceprofileFeaturesPtrOutput {
	return o
}

func (o ECXL2ServiceprofileFeaturesPtrOutput) Elem() ECXL2ServiceprofileFeaturesOutput {
	return o.ApplyT(func(v *ECXL2ServiceprofileFeatures) ECXL2ServiceprofileFeatures {
		if v != nil {
			return *v
		}
		var ret ECXL2ServiceprofileFeatures
		return ret
	}).(ECXL2ServiceprofileFeaturesOutput)
}

// Indicates whether or not connections to this profile
// can be created from remote metro locations.
func (o ECXL2ServiceprofileFeaturesPtrOutput) AllowRemoteConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2ServiceprofileFeatures) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowRemoteConnections
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether or not this profile can be used for test
// connections.
//
// Deprecated: TestProfile is no longer required and will be removed in a future release
func (o ECXL2ServiceprofileFeaturesPtrOutput) TestProfile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2ServiceprofileFeatures) *bool {
		if v == nil {
			return nil
		}
		return v.TestProfile
	}).(pulumi.BoolPtrOutput)
}

type ECXL2ServiceprofilePort struct {
	// The metro code of location where the port resides.
	MetroCode string `pulumi:"metroCode"`
	// Unique identifier of the port.
	Uuid string `pulumi:"uuid"`
}

// ECXL2ServiceprofilePortInput is an input type that accepts ECXL2ServiceprofilePortArgs and ECXL2ServiceprofilePortOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofilePortInput` via:
//
//          ECXL2ServiceprofilePortArgs{...}
type ECXL2ServiceprofilePortInput interface {
	pulumi.Input

	ToECXL2ServiceprofilePortOutput() ECXL2ServiceprofilePortOutput
	ToECXL2ServiceprofilePortOutputWithContext(context.Context) ECXL2ServiceprofilePortOutput
}

type ECXL2ServiceprofilePortArgs struct {
	// The metro code of location where the port resides.
	MetroCode pulumi.StringInput `pulumi:"metroCode"`
	// Unique identifier of the port.
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (ECXL2ServiceprofilePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ServiceprofilePort)(nil)).Elem()
}

func (i ECXL2ServiceprofilePortArgs) ToECXL2ServiceprofilePortOutput() ECXL2ServiceprofilePortOutput {
	return i.ToECXL2ServiceprofilePortOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofilePortArgs) ToECXL2ServiceprofilePortOutputWithContext(ctx context.Context) ECXL2ServiceprofilePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofilePortOutput)
}

// ECXL2ServiceprofilePortArrayInput is an input type that accepts ECXL2ServiceprofilePortArray and ECXL2ServiceprofilePortArrayOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofilePortArrayInput` via:
//
//          ECXL2ServiceprofilePortArray{ ECXL2ServiceprofilePortArgs{...} }
type ECXL2ServiceprofilePortArrayInput interface {
	pulumi.Input

	ToECXL2ServiceprofilePortArrayOutput() ECXL2ServiceprofilePortArrayOutput
	ToECXL2ServiceprofilePortArrayOutputWithContext(context.Context) ECXL2ServiceprofilePortArrayOutput
}

type ECXL2ServiceprofilePortArray []ECXL2ServiceprofilePortInput

func (ECXL2ServiceprofilePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ServiceprofilePort)(nil)).Elem()
}

func (i ECXL2ServiceprofilePortArray) ToECXL2ServiceprofilePortArrayOutput() ECXL2ServiceprofilePortArrayOutput {
	return i.ToECXL2ServiceprofilePortArrayOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofilePortArray) ToECXL2ServiceprofilePortArrayOutputWithContext(ctx context.Context) ECXL2ServiceprofilePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofilePortArrayOutput)
}

type ECXL2ServiceprofilePortOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofilePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ServiceprofilePort)(nil)).Elem()
}

func (o ECXL2ServiceprofilePortOutput) ToECXL2ServiceprofilePortOutput() ECXL2ServiceprofilePortOutput {
	return o
}

func (o ECXL2ServiceprofilePortOutput) ToECXL2ServiceprofilePortOutputWithContext(ctx context.Context) ECXL2ServiceprofilePortOutput {
	return o
}

// The metro code of location where the port resides.
func (o ECXL2ServiceprofilePortOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v ECXL2ServiceprofilePort) string { return v.MetroCode }).(pulumi.StringOutput)
}

// Unique identifier of the port.
func (o ECXL2ServiceprofilePortOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v ECXL2ServiceprofilePort) string { return v.Uuid }).(pulumi.StringOutput)
}

type ECXL2ServiceprofilePortArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofilePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ServiceprofilePort)(nil)).Elem()
}

func (o ECXL2ServiceprofilePortArrayOutput) ToECXL2ServiceprofilePortArrayOutput() ECXL2ServiceprofilePortArrayOutput {
	return o
}

func (o ECXL2ServiceprofilePortArrayOutput) ToECXL2ServiceprofilePortArrayOutputWithContext(ctx context.Context) ECXL2ServiceprofilePortArrayOutput {
	return o
}

func (o ECXL2ServiceprofilePortArrayOutput) Index(i pulumi.IntInput) ECXL2ServiceprofilePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ServiceprofilePort {
		return vs[0].([]ECXL2ServiceprofilePort)[vs[1].(int)]
	}).(ECXL2ServiceprofilePortOutput)
}

type ECXL2ServiceprofileSpeedBand struct {
	// Speed/bandwidth supported by this service profile.
	Speed int `pulumi:"speed"`
	// Unit of the speed/bandwidth supported by this service profile. One of
	// `MB`, `GB`.
	SpeedUnit string `pulumi:"speedUnit"`
}

// ECXL2ServiceprofileSpeedBandInput is an input type that accepts ECXL2ServiceprofileSpeedBandArgs and ECXL2ServiceprofileSpeedBandOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofileSpeedBandInput` via:
//
//          ECXL2ServiceprofileSpeedBandArgs{...}
type ECXL2ServiceprofileSpeedBandInput interface {
	pulumi.Input

	ToECXL2ServiceprofileSpeedBandOutput() ECXL2ServiceprofileSpeedBandOutput
	ToECXL2ServiceprofileSpeedBandOutputWithContext(context.Context) ECXL2ServiceprofileSpeedBandOutput
}

type ECXL2ServiceprofileSpeedBandArgs struct {
	// Speed/bandwidth supported by this service profile.
	Speed pulumi.IntInput `pulumi:"speed"`
	// Unit of the speed/bandwidth supported by this service profile. One of
	// `MB`, `GB`.
	SpeedUnit pulumi.StringInput `pulumi:"speedUnit"`
}

func (ECXL2ServiceprofileSpeedBandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ServiceprofileSpeedBand)(nil)).Elem()
}

func (i ECXL2ServiceprofileSpeedBandArgs) ToECXL2ServiceprofileSpeedBandOutput() ECXL2ServiceprofileSpeedBandOutput {
	return i.ToECXL2ServiceprofileSpeedBandOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofileSpeedBandArgs) ToECXL2ServiceprofileSpeedBandOutputWithContext(ctx context.Context) ECXL2ServiceprofileSpeedBandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileSpeedBandOutput)
}

// ECXL2ServiceprofileSpeedBandArrayInput is an input type that accepts ECXL2ServiceprofileSpeedBandArray and ECXL2ServiceprofileSpeedBandArrayOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofileSpeedBandArrayInput` via:
//
//          ECXL2ServiceprofileSpeedBandArray{ ECXL2ServiceprofileSpeedBandArgs{...} }
type ECXL2ServiceprofileSpeedBandArrayInput interface {
	pulumi.Input

	ToECXL2ServiceprofileSpeedBandArrayOutput() ECXL2ServiceprofileSpeedBandArrayOutput
	ToECXL2ServiceprofileSpeedBandArrayOutputWithContext(context.Context) ECXL2ServiceprofileSpeedBandArrayOutput
}

type ECXL2ServiceprofileSpeedBandArray []ECXL2ServiceprofileSpeedBandInput

func (ECXL2ServiceprofileSpeedBandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ServiceprofileSpeedBand)(nil)).Elem()
}

func (i ECXL2ServiceprofileSpeedBandArray) ToECXL2ServiceprofileSpeedBandArrayOutput() ECXL2ServiceprofileSpeedBandArrayOutput {
	return i.ToECXL2ServiceprofileSpeedBandArrayOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofileSpeedBandArray) ToECXL2ServiceprofileSpeedBandArrayOutputWithContext(ctx context.Context) ECXL2ServiceprofileSpeedBandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileSpeedBandArrayOutput)
}

type ECXL2ServiceprofileSpeedBandOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileSpeedBandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECXL2ServiceprofileSpeedBand)(nil)).Elem()
}

func (o ECXL2ServiceprofileSpeedBandOutput) ToECXL2ServiceprofileSpeedBandOutput() ECXL2ServiceprofileSpeedBandOutput {
	return o
}

func (o ECXL2ServiceprofileSpeedBandOutput) ToECXL2ServiceprofileSpeedBandOutputWithContext(ctx context.Context) ECXL2ServiceprofileSpeedBandOutput {
	return o
}

// Speed/bandwidth supported by this service profile.
func (o ECXL2ServiceprofileSpeedBandOutput) Speed() pulumi.IntOutput {
	return o.ApplyT(func(v ECXL2ServiceprofileSpeedBand) int { return v.Speed }).(pulumi.IntOutput)
}

// Unit of the speed/bandwidth supported by this service profile. One of
// `MB`, `GB`.
func (o ECXL2ServiceprofileSpeedBandOutput) SpeedUnit() pulumi.StringOutput {
	return o.ApplyT(func(v ECXL2ServiceprofileSpeedBand) string { return v.SpeedUnit }).(pulumi.StringOutput)
}

type ECXL2ServiceprofileSpeedBandArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileSpeedBandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECXL2ServiceprofileSpeedBand)(nil)).Elem()
}

func (o ECXL2ServiceprofileSpeedBandArrayOutput) ToECXL2ServiceprofileSpeedBandArrayOutput() ECXL2ServiceprofileSpeedBandArrayOutput {
	return o
}

func (o ECXL2ServiceprofileSpeedBandArrayOutput) ToECXL2ServiceprofileSpeedBandArrayOutputWithContext(ctx context.Context) ECXL2ServiceprofileSpeedBandArrayOutput {
	return o
}

func (o ECXL2ServiceprofileSpeedBandArrayOutput) Index(i pulumi.IntInput) ECXL2ServiceprofileSpeedBandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECXL2ServiceprofileSpeedBand {
		return vs[0].([]ECXL2ServiceprofileSpeedBand)[vs[1].(int)]
	}).(ECXL2ServiceprofileSpeedBandOutput)
}

type GetECXL2SellerprofileAdditionalInfo struct {
	CapturedInEmail bool `pulumi:"capturedInEmail"`
	// Data type of additional information attribute. One of `BOOLEAN`, `INTEGER` or
	// `STRING`.
	DataType string `pulumi:"dataType"`
	// Textual description of additional information attribute.
	Description string `pulumi:"description"`
	// Specifies if additional information is mandatory to create
	// connection.
	Mandatory bool `pulumi:"mandatory"`
	// Name of the seller profile.
	Name string `pulumi:"name"`
}

// GetECXL2SellerprofileAdditionalInfoInput is an input type that accepts GetECXL2SellerprofileAdditionalInfoArgs and GetECXL2SellerprofileAdditionalInfoOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofileAdditionalInfoInput` via:
//
//          GetECXL2SellerprofileAdditionalInfoArgs{...}
type GetECXL2SellerprofileAdditionalInfoInput interface {
	pulumi.Input

	ToGetECXL2SellerprofileAdditionalInfoOutput() GetECXL2SellerprofileAdditionalInfoOutput
	ToGetECXL2SellerprofileAdditionalInfoOutputWithContext(context.Context) GetECXL2SellerprofileAdditionalInfoOutput
}

type GetECXL2SellerprofileAdditionalInfoArgs struct {
	CapturedInEmail pulumi.BoolInput `pulumi:"capturedInEmail"`
	// Data type of additional information attribute. One of `BOOLEAN`, `INTEGER` or
	// `STRING`.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// Textual description of additional information attribute.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies if additional information is mandatory to create
	// connection.
	Mandatory pulumi.BoolInput `pulumi:"mandatory"`
	// Name of the seller profile.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetECXL2SellerprofileAdditionalInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileAdditionalInfo)(nil)).Elem()
}

func (i GetECXL2SellerprofileAdditionalInfoArgs) ToGetECXL2SellerprofileAdditionalInfoOutput() GetECXL2SellerprofileAdditionalInfoOutput {
	return i.ToGetECXL2SellerprofileAdditionalInfoOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofileAdditionalInfoArgs) ToGetECXL2SellerprofileAdditionalInfoOutputWithContext(ctx context.Context) GetECXL2SellerprofileAdditionalInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofileAdditionalInfoOutput)
}

// GetECXL2SellerprofileAdditionalInfoArrayInput is an input type that accepts GetECXL2SellerprofileAdditionalInfoArray and GetECXL2SellerprofileAdditionalInfoArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofileAdditionalInfoArrayInput` via:
//
//          GetECXL2SellerprofileAdditionalInfoArray{ GetECXL2SellerprofileAdditionalInfoArgs{...} }
type GetECXL2SellerprofileAdditionalInfoArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofileAdditionalInfoArrayOutput() GetECXL2SellerprofileAdditionalInfoArrayOutput
	ToGetECXL2SellerprofileAdditionalInfoArrayOutputWithContext(context.Context) GetECXL2SellerprofileAdditionalInfoArrayOutput
}

type GetECXL2SellerprofileAdditionalInfoArray []GetECXL2SellerprofileAdditionalInfoInput

func (GetECXL2SellerprofileAdditionalInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofileAdditionalInfo)(nil)).Elem()
}

func (i GetECXL2SellerprofileAdditionalInfoArray) ToGetECXL2SellerprofileAdditionalInfoArrayOutput() GetECXL2SellerprofileAdditionalInfoArrayOutput {
	return i.ToGetECXL2SellerprofileAdditionalInfoArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofileAdditionalInfoArray) ToGetECXL2SellerprofileAdditionalInfoArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofileAdditionalInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofileAdditionalInfoArrayOutput)
}

type GetECXL2SellerprofileAdditionalInfoOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileAdditionalInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileAdditionalInfo)(nil)).Elem()
}

func (o GetECXL2SellerprofileAdditionalInfoOutput) ToGetECXL2SellerprofileAdditionalInfoOutput() GetECXL2SellerprofileAdditionalInfoOutput {
	return o
}

func (o GetECXL2SellerprofileAdditionalInfoOutput) ToGetECXL2SellerprofileAdditionalInfoOutputWithContext(ctx context.Context) GetECXL2SellerprofileAdditionalInfoOutput {
	return o
}

func (o GetECXL2SellerprofileAdditionalInfoOutput) CapturedInEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileAdditionalInfo) bool { return v.CapturedInEmail }).(pulumi.BoolOutput)
}

// Data type of additional information attribute. One of `BOOLEAN`, `INTEGER` or
// `STRING`.
func (o GetECXL2SellerprofileAdditionalInfoOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileAdditionalInfo) string { return v.DataType }).(pulumi.StringOutput)
}

// Textual description of additional information attribute.
func (o GetECXL2SellerprofileAdditionalInfoOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileAdditionalInfo) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies if additional information is mandatory to create
// connection.
func (o GetECXL2SellerprofileAdditionalInfoOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileAdditionalInfo) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

// Name of the seller profile.
func (o GetECXL2SellerprofileAdditionalInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileAdditionalInfo) string { return v.Name }).(pulumi.StringOutput)
}

type GetECXL2SellerprofileAdditionalInfoArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileAdditionalInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofileAdditionalInfo)(nil)).Elem()
}

func (o GetECXL2SellerprofileAdditionalInfoArrayOutput) ToGetECXL2SellerprofileAdditionalInfoArrayOutput() GetECXL2SellerprofileAdditionalInfoArrayOutput {
	return o
}

func (o GetECXL2SellerprofileAdditionalInfoArrayOutput) ToGetECXL2SellerprofileAdditionalInfoArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofileAdditionalInfoArrayOutput {
	return o
}

func (o GetECXL2SellerprofileAdditionalInfoArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofileAdditionalInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofileAdditionalInfo {
		return vs[0].([]GetECXL2SellerprofileAdditionalInfo)[vs[1].(int)]
	}).(GetECXL2SellerprofileAdditionalInfoOutput)
}

type GetECXL2SellerprofileMetro struct {
	// Location metro code.
	Code string `pulumi:"code"`
	// List of IBXes supported within given metro.
	Ibxes []string `pulumi:"ibxes"`
	// Name of the seller profile.
	Name string `pulumi:"name"`
	// List of regions supported within given.
	Regions map[string]string `pulumi:"regions"`
}

// GetECXL2SellerprofileMetroInput is an input type that accepts GetECXL2SellerprofileMetroArgs and GetECXL2SellerprofileMetroOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofileMetroInput` via:
//
//          GetECXL2SellerprofileMetroArgs{...}
type GetECXL2SellerprofileMetroInput interface {
	pulumi.Input

	ToGetECXL2SellerprofileMetroOutput() GetECXL2SellerprofileMetroOutput
	ToGetECXL2SellerprofileMetroOutputWithContext(context.Context) GetECXL2SellerprofileMetroOutput
}

type GetECXL2SellerprofileMetroArgs struct {
	// Location metro code.
	Code pulumi.StringInput `pulumi:"code"`
	// List of IBXes supported within given metro.
	Ibxes pulumi.StringArrayInput `pulumi:"ibxes"`
	// Name of the seller profile.
	Name pulumi.StringInput `pulumi:"name"`
	// List of regions supported within given.
	Regions pulumi.StringMapInput `pulumi:"regions"`
}

func (GetECXL2SellerprofileMetroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileMetro)(nil)).Elem()
}

func (i GetECXL2SellerprofileMetroArgs) ToGetECXL2SellerprofileMetroOutput() GetECXL2SellerprofileMetroOutput {
	return i.ToGetECXL2SellerprofileMetroOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofileMetroArgs) ToGetECXL2SellerprofileMetroOutputWithContext(ctx context.Context) GetECXL2SellerprofileMetroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofileMetroOutput)
}

// GetECXL2SellerprofileMetroArrayInput is an input type that accepts GetECXL2SellerprofileMetroArray and GetECXL2SellerprofileMetroArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofileMetroArrayInput` via:
//
//          GetECXL2SellerprofileMetroArray{ GetECXL2SellerprofileMetroArgs{...} }
type GetECXL2SellerprofileMetroArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofileMetroArrayOutput() GetECXL2SellerprofileMetroArrayOutput
	ToGetECXL2SellerprofileMetroArrayOutputWithContext(context.Context) GetECXL2SellerprofileMetroArrayOutput
}

type GetECXL2SellerprofileMetroArray []GetECXL2SellerprofileMetroInput

func (GetECXL2SellerprofileMetroArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofileMetro)(nil)).Elem()
}

func (i GetECXL2SellerprofileMetroArray) ToGetECXL2SellerprofileMetroArrayOutput() GetECXL2SellerprofileMetroArrayOutput {
	return i.ToGetECXL2SellerprofileMetroArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofileMetroArray) ToGetECXL2SellerprofileMetroArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofileMetroArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofileMetroArrayOutput)
}

type GetECXL2SellerprofileMetroOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileMetroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileMetro)(nil)).Elem()
}

func (o GetECXL2SellerprofileMetroOutput) ToGetECXL2SellerprofileMetroOutput() GetECXL2SellerprofileMetroOutput {
	return o
}

func (o GetECXL2SellerprofileMetroOutput) ToGetECXL2SellerprofileMetroOutputWithContext(ctx context.Context) GetECXL2SellerprofileMetroOutput {
	return o
}

// Location metro code.
func (o GetECXL2SellerprofileMetroOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileMetro) string { return v.Code }).(pulumi.StringOutput)
}

// List of IBXes supported within given metro.
func (o GetECXL2SellerprofileMetroOutput) Ibxes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileMetro) []string { return v.Ibxes }).(pulumi.StringArrayOutput)
}

// Name of the seller profile.
func (o GetECXL2SellerprofileMetroOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileMetro) string { return v.Name }).(pulumi.StringOutput)
}

// List of regions supported within given.
func (o GetECXL2SellerprofileMetroOutput) Regions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileMetro) map[string]string { return v.Regions }).(pulumi.StringMapOutput)
}

type GetECXL2SellerprofileMetroArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileMetroArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofileMetro)(nil)).Elem()
}

func (o GetECXL2SellerprofileMetroArrayOutput) ToGetECXL2SellerprofileMetroArrayOutput() GetECXL2SellerprofileMetroArrayOutput {
	return o
}

func (o GetECXL2SellerprofileMetroArrayOutput) ToGetECXL2SellerprofileMetroArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofileMetroArrayOutput {
	return o
}

func (o GetECXL2SellerprofileMetroArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofileMetroOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofileMetro {
		return vs[0].([]GetECXL2SellerprofileMetro)[vs[1].(int)]
	}).(GetECXL2SellerprofileMetroOutput)
}

type GetECXL2SellerprofileSpeedBand struct {
	// Speed/bandwidth supported by given service profile.
	Speed int `pulumi:"speed"`
	// Unit of the speed/bandwidth supported by given service profile.
	SpeedUnit string `pulumi:"speedUnit"`
}

// GetECXL2SellerprofileSpeedBandInput is an input type that accepts GetECXL2SellerprofileSpeedBandArgs and GetECXL2SellerprofileSpeedBandOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofileSpeedBandInput` via:
//
//          GetECXL2SellerprofileSpeedBandArgs{...}
type GetECXL2SellerprofileSpeedBandInput interface {
	pulumi.Input

	ToGetECXL2SellerprofileSpeedBandOutput() GetECXL2SellerprofileSpeedBandOutput
	ToGetECXL2SellerprofileSpeedBandOutputWithContext(context.Context) GetECXL2SellerprofileSpeedBandOutput
}

type GetECXL2SellerprofileSpeedBandArgs struct {
	// Speed/bandwidth supported by given service profile.
	Speed pulumi.IntInput `pulumi:"speed"`
	// Unit of the speed/bandwidth supported by given service profile.
	SpeedUnit pulumi.StringInput `pulumi:"speedUnit"`
}

func (GetECXL2SellerprofileSpeedBandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileSpeedBand)(nil)).Elem()
}

func (i GetECXL2SellerprofileSpeedBandArgs) ToGetECXL2SellerprofileSpeedBandOutput() GetECXL2SellerprofileSpeedBandOutput {
	return i.ToGetECXL2SellerprofileSpeedBandOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofileSpeedBandArgs) ToGetECXL2SellerprofileSpeedBandOutputWithContext(ctx context.Context) GetECXL2SellerprofileSpeedBandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofileSpeedBandOutput)
}

// GetECXL2SellerprofileSpeedBandArrayInput is an input type that accepts GetECXL2SellerprofileSpeedBandArray and GetECXL2SellerprofileSpeedBandArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofileSpeedBandArrayInput` via:
//
//          GetECXL2SellerprofileSpeedBandArray{ GetECXL2SellerprofileSpeedBandArgs{...} }
type GetECXL2SellerprofileSpeedBandArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofileSpeedBandArrayOutput() GetECXL2SellerprofileSpeedBandArrayOutput
	ToGetECXL2SellerprofileSpeedBandArrayOutputWithContext(context.Context) GetECXL2SellerprofileSpeedBandArrayOutput
}

type GetECXL2SellerprofileSpeedBandArray []GetECXL2SellerprofileSpeedBandInput

func (GetECXL2SellerprofileSpeedBandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofileSpeedBand)(nil)).Elem()
}

func (i GetECXL2SellerprofileSpeedBandArray) ToGetECXL2SellerprofileSpeedBandArrayOutput() GetECXL2SellerprofileSpeedBandArrayOutput {
	return i.ToGetECXL2SellerprofileSpeedBandArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofileSpeedBandArray) ToGetECXL2SellerprofileSpeedBandArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofileSpeedBandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofileSpeedBandArrayOutput)
}

type GetECXL2SellerprofileSpeedBandOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileSpeedBandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofileSpeedBand)(nil)).Elem()
}

func (o GetECXL2SellerprofileSpeedBandOutput) ToGetECXL2SellerprofileSpeedBandOutput() GetECXL2SellerprofileSpeedBandOutput {
	return o
}

func (o GetECXL2SellerprofileSpeedBandOutput) ToGetECXL2SellerprofileSpeedBandOutputWithContext(ctx context.Context) GetECXL2SellerprofileSpeedBandOutput {
	return o
}

// Speed/bandwidth supported by given service profile.
func (o GetECXL2SellerprofileSpeedBandOutput) Speed() pulumi.IntOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileSpeedBand) int { return v.Speed }).(pulumi.IntOutput)
}

// Unit of the speed/bandwidth supported by given service profile.
func (o GetECXL2SellerprofileSpeedBandOutput) SpeedUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofileSpeedBand) string { return v.SpeedUnit }).(pulumi.StringOutput)
}

type GetECXL2SellerprofileSpeedBandArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofileSpeedBandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofileSpeedBand)(nil)).Elem()
}

func (o GetECXL2SellerprofileSpeedBandArrayOutput) ToGetECXL2SellerprofileSpeedBandArrayOutput() GetECXL2SellerprofileSpeedBandArrayOutput {
	return o
}

func (o GetECXL2SellerprofileSpeedBandArrayOutput) ToGetECXL2SellerprofileSpeedBandArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofileSpeedBandArrayOutput {
	return o
}

func (o GetECXL2SellerprofileSpeedBandArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofileSpeedBandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofileSpeedBand {
		return vs[0].([]GetECXL2SellerprofileSpeedBand)[vs[1].(int)]
	}).(GetECXL2SellerprofileSpeedBandOutput)
}

type GetECXL2SellerprofilesProfile struct {
	AdditionalInfos []GetECXL2SellerprofilesProfileAdditionalInfo `pulumi:"additionalInfos"`
	Description     string                                        `pulumi:"description"`
	Encapsulation   string                                        `pulumi:"encapsulation"`
	Metros          []GetECXL2SellerprofilesProfileMetro          `pulumi:"metros"`
	Name            string                                        `pulumi:"name"`
	// Name of seller's global organization.
	OrganizationGlobalName string `pulumi:"organizationGlobalName"`
	// Name of seller's organization.
	OrganizationName          string                                   `pulumi:"organizationName"`
	RedundancyRequired        bool                                     `pulumi:"redundancyRequired"`
	SpeedBands                []GetECXL2SellerprofilesProfileSpeedBand `pulumi:"speedBands"`
	SpeedCustomizationAllowed bool                                     `pulumi:"speedCustomizationAllowed"`
	SpeedFromApi              bool                                     `pulumi:"speedFromApi"`
	Uuid                      string                                   `pulumi:"uuid"`
}

// GetECXL2SellerprofilesProfileInput is an input type that accepts GetECXL2SellerprofilesProfileArgs and GetECXL2SellerprofilesProfileOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileInput` via:
//
//          GetECXL2SellerprofilesProfileArgs{...}
type GetECXL2SellerprofilesProfileInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileOutput() GetECXL2SellerprofilesProfileOutput
	ToGetECXL2SellerprofilesProfileOutputWithContext(context.Context) GetECXL2SellerprofilesProfileOutput
}

type GetECXL2SellerprofilesProfileArgs struct {
	AdditionalInfos GetECXL2SellerprofilesProfileAdditionalInfoArrayInput `pulumi:"additionalInfos"`
	Description     pulumi.StringInput                                    `pulumi:"description"`
	Encapsulation   pulumi.StringInput                                    `pulumi:"encapsulation"`
	Metros          GetECXL2SellerprofilesProfileMetroArrayInput          `pulumi:"metros"`
	Name            pulumi.StringInput                                    `pulumi:"name"`
	// Name of seller's global organization.
	OrganizationGlobalName pulumi.StringInput `pulumi:"organizationGlobalName"`
	// Name of seller's organization.
	OrganizationName          pulumi.StringInput                               `pulumi:"organizationName"`
	RedundancyRequired        pulumi.BoolInput                                 `pulumi:"redundancyRequired"`
	SpeedBands                GetECXL2SellerprofilesProfileSpeedBandArrayInput `pulumi:"speedBands"`
	SpeedCustomizationAllowed pulumi.BoolInput                                 `pulumi:"speedCustomizationAllowed"`
	SpeedFromApi              pulumi.BoolInput                                 `pulumi:"speedFromApi"`
	Uuid                      pulumi.StringInput                               `pulumi:"uuid"`
}

func (GetECXL2SellerprofilesProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfile)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileArgs) ToGetECXL2SellerprofilesProfileOutput() GetECXL2SellerprofilesProfileOutput {
	return i.ToGetECXL2SellerprofilesProfileOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileArgs) ToGetECXL2SellerprofilesProfileOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileOutput)
}

// GetECXL2SellerprofilesProfileArrayInput is an input type that accepts GetECXL2SellerprofilesProfileArray and GetECXL2SellerprofilesProfileArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileArrayInput` via:
//
//          GetECXL2SellerprofilesProfileArray{ GetECXL2SellerprofilesProfileArgs{...} }
type GetECXL2SellerprofilesProfileArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileArrayOutput() GetECXL2SellerprofilesProfileArrayOutput
	ToGetECXL2SellerprofilesProfileArrayOutputWithContext(context.Context) GetECXL2SellerprofilesProfileArrayOutput
}

type GetECXL2SellerprofilesProfileArray []GetECXL2SellerprofilesProfileInput

func (GetECXL2SellerprofilesProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfile)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileArray) ToGetECXL2SellerprofilesProfileArrayOutput() GetECXL2SellerprofilesProfileArrayOutput {
	return i.ToGetECXL2SellerprofilesProfileArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileArray) ToGetECXL2SellerprofilesProfileArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileArrayOutput)
}

type GetECXL2SellerprofilesProfileOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfile)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileOutput) ToGetECXL2SellerprofilesProfileOutput() GetECXL2SellerprofilesProfileOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileOutput) ToGetECXL2SellerprofilesProfileOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileOutput) AdditionalInfos() GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) []GetECXL2SellerprofilesProfileAdditionalInfo {
		return v.AdditionalInfos
	}).(GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) string { return v.Encapsulation }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) Metros() GetECXL2SellerprofilesProfileMetroArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) []GetECXL2SellerprofilesProfileMetro { return v.Metros }).(GetECXL2SellerprofilesProfileMetroArrayOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) string { return v.Name }).(pulumi.StringOutput)
}

// Name of seller's global organization.
func (o GetECXL2SellerprofilesProfileOutput) OrganizationGlobalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) string { return v.OrganizationGlobalName }).(pulumi.StringOutput)
}

// Name of seller's organization.
func (o GetECXL2SellerprofilesProfileOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) string { return v.OrganizationName }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) RedundancyRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) bool { return v.RedundancyRequired }).(pulumi.BoolOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) SpeedBands() GetECXL2SellerprofilesProfileSpeedBandArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) []GetECXL2SellerprofilesProfileSpeedBand { return v.SpeedBands }).(GetECXL2SellerprofilesProfileSpeedBandArrayOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) SpeedCustomizationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) bool { return v.SpeedCustomizationAllowed }).(pulumi.BoolOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) SpeedFromApi() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) bool { return v.SpeedFromApi }).(pulumi.BoolOutput)
}

func (o GetECXL2SellerprofilesProfileOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfile) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetECXL2SellerprofilesProfileArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfile)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileArrayOutput) ToGetECXL2SellerprofilesProfileArrayOutput() GetECXL2SellerprofilesProfileArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileArrayOutput) ToGetECXL2SellerprofilesProfileArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofilesProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofilesProfile {
		return vs[0].([]GetECXL2SellerprofilesProfile)[vs[1].(int)]
	}).(GetECXL2SellerprofilesProfileOutput)
}

type GetECXL2SellerprofilesProfileAdditionalInfo struct {
	CapturedInEmail bool   `pulumi:"capturedInEmail"`
	DataType        string `pulumi:"dataType"`
	Description     string `pulumi:"description"`
	Mandatory       bool   `pulumi:"mandatory"`
	Name            string `pulumi:"name"`
}

// GetECXL2SellerprofilesProfileAdditionalInfoInput is an input type that accepts GetECXL2SellerprofilesProfileAdditionalInfoArgs and GetECXL2SellerprofilesProfileAdditionalInfoOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileAdditionalInfoInput` via:
//
//          GetECXL2SellerprofilesProfileAdditionalInfoArgs{...}
type GetECXL2SellerprofilesProfileAdditionalInfoInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileAdditionalInfoOutput() GetECXL2SellerprofilesProfileAdditionalInfoOutput
	ToGetECXL2SellerprofilesProfileAdditionalInfoOutputWithContext(context.Context) GetECXL2SellerprofilesProfileAdditionalInfoOutput
}

type GetECXL2SellerprofilesProfileAdditionalInfoArgs struct {
	CapturedInEmail pulumi.BoolInput   `pulumi:"capturedInEmail"`
	DataType        pulumi.StringInput `pulumi:"dataType"`
	Description     pulumi.StringInput `pulumi:"description"`
	Mandatory       pulumi.BoolInput   `pulumi:"mandatory"`
	Name            pulumi.StringInput `pulumi:"name"`
}

func (GetECXL2SellerprofilesProfileAdditionalInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfileAdditionalInfo)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileAdditionalInfoArgs) ToGetECXL2SellerprofilesProfileAdditionalInfoOutput() GetECXL2SellerprofilesProfileAdditionalInfoOutput {
	return i.ToGetECXL2SellerprofilesProfileAdditionalInfoOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileAdditionalInfoArgs) ToGetECXL2SellerprofilesProfileAdditionalInfoOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileAdditionalInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileAdditionalInfoOutput)
}

// GetECXL2SellerprofilesProfileAdditionalInfoArrayInput is an input type that accepts GetECXL2SellerprofilesProfileAdditionalInfoArray and GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileAdditionalInfoArrayInput` via:
//
//          GetECXL2SellerprofilesProfileAdditionalInfoArray{ GetECXL2SellerprofilesProfileAdditionalInfoArgs{...} }
type GetECXL2SellerprofilesProfileAdditionalInfoArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutput() GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput
	ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutputWithContext(context.Context) GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput
}

type GetECXL2SellerprofilesProfileAdditionalInfoArray []GetECXL2SellerprofilesProfileAdditionalInfoInput

func (GetECXL2SellerprofilesProfileAdditionalInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfileAdditionalInfo)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileAdditionalInfoArray) ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutput() GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput {
	return i.ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileAdditionalInfoArray) ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput)
}

type GetECXL2SellerprofilesProfileAdditionalInfoOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileAdditionalInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfileAdditionalInfo)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) ToGetECXL2SellerprofilesProfileAdditionalInfoOutput() GetECXL2SellerprofilesProfileAdditionalInfoOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) ToGetECXL2SellerprofilesProfileAdditionalInfoOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileAdditionalInfoOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) CapturedInEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileAdditionalInfo) bool { return v.CapturedInEmail }).(pulumi.BoolOutput)
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileAdditionalInfo) string { return v.DataType }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileAdditionalInfo) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileAdditionalInfo) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileAdditionalInfo) string { return v.Name }).(pulumi.StringOutput)
}

type GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfileAdditionalInfo)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput) ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutput() GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput) ToGetECXL2SellerprofilesProfileAdditionalInfoArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofilesProfileAdditionalInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofilesProfileAdditionalInfo {
		return vs[0].([]GetECXL2SellerprofilesProfileAdditionalInfo)[vs[1].(int)]
	}).(GetECXL2SellerprofilesProfileAdditionalInfoOutput)
}

type GetECXL2SellerprofilesProfileMetro struct {
	Code    string            `pulumi:"code"`
	Ibxes   []string          `pulumi:"ibxes"`
	Name    string            `pulumi:"name"`
	Regions map[string]string `pulumi:"regions"`
}

// GetECXL2SellerprofilesProfileMetroInput is an input type that accepts GetECXL2SellerprofilesProfileMetroArgs and GetECXL2SellerprofilesProfileMetroOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileMetroInput` via:
//
//          GetECXL2SellerprofilesProfileMetroArgs{...}
type GetECXL2SellerprofilesProfileMetroInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileMetroOutput() GetECXL2SellerprofilesProfileMetroOutput
	ToGetECXL2SellerprofilesProfileMetroOutputWithContext(context.Context) GetECXL2SellerprofilesProfileMetroOutput
}

type GetECXL2SellerprofilesProfileMetroArgs struct {
	Code    pulumi.StringInput      `pulumi:"code"`
	Ibxes   pulumi.StringArrayInput `pulumi:"ibxes"`
	Name    pulumi.StringInput      `pulumi:"name"`
	Regions pulumi.StringMapInput   `pulumi:"regions"`
}

func (GetECXL2SellerprofilesProfileMetroArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfileMetro)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileMetroArgs) ToGetECXL2SellerprofilesProfileMetroOutput() GetECXL2SellerprofilesProfileMetroOutput {
	return i.ToGetECXL2SellerprofilesProfileMetroOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileMetroArgs) ToGetECXL2SellerprofilesProfileMetroOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileMetroOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileMetroOutput)
}

// GetECXL2SellerprofilesProfileMetroArrayInput is an input type that accepts GetECXL2SellerprofilesProfileMetroArray and GetECXL2SellerprofilesProfileMetroArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileMetroArrayInput` via:
//
//          GetECXL2SellerprofilesProfileMetroArray{ GetECXL2SellerprofilesProfileMetroArgs{...} }
type GetECXL2SellerprofilesProfileMetroArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileMetroArrayOutput() GetECXL2SellerprofilesProfileMetroArrayOutput
	ToGetECXL2SellerprofilesProfileMetroArrayOutputWithContext(context.Context) GetECXL2SellerprofilesProfileMetroArrayOutput
}

type GetECXL2SellerprofilesProfileMetroArray []GetECXL2SellerprofilesProfileMetroInput

func (GetECXL2SellerprofilesProfileMetroArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfileMetro)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileMetroArray) ToGetECXL2SellerprofilesProfileMetroArrayOutput() GetECXL2SellerprofilesProfileMetroArrayOutput {
	return i.ToGetECXL2SellerprofilesProfileMetroArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileMetroArray) ToGetECXL2SellerprofilesProfileMetroArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileMetroArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileMetroArrayOutput)
}

type GetECXL2SellerprofilesProfileMetroOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileMetroOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfileMetro)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileMetroOutput) ToGetECXL2SellerprofilesProfileMetroOutput() GetECXL2SellerprofilesProfileMetroOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileMetroOutput) ToGetECXL2SellerprofilesProfileMetroOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileMetroOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileMetroOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileMetro) string { return v.Code }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileMetroOutput) Ibxes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileMetro) []string { return v.Ibxes }).(pulumi.StringArrayOutput)
}

func (o GetECXL2SellerprofilesProfileMetroOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileMetro) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetECXL2SellerprofilesProfileMetroOutput) Regions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileMetro) map[string]string { return v.Regions }).(pulumi.StringMapOutput)
}

type GetECXL2SellerprofilesProfileMetroArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileMetroArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfileMetro)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileMetroArrayOutput) ToGetECXL2SellerprofilesProfileMetroArrayOutput() GetECXL2SellerprofilesProfileMetroArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileMetroArrayOutput) ToGetECXL2SellerprofilesProfileMetroArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileMetroArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileMetroArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofilesProfileMetroOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofilesProfileMetro {
		return vs[0].([]GetECXL2SellerprofilesProfileMetro)[vs[1].(int)]
	}).(GetECXL2SellerprofilesProfileMetroOutput)
}

type GetECXL2SellerprofilesProfileSpeedBand struct {
	Speed     int    `pulumi:"speed"`
	SpeedUnit string `pulumi:"speedUnit"`
}

// GetECXL2SellerprofilesProfileSpeedBandInput is an input type that accepts GetECXL2SellerprofilesProfileSpeedBandArgs and GetECXL2SellerprofilesProfileSpeedBandOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileSpeedBandInput` via:
//
//          GetECXL2SellerprofilesProfileSpeedBandArgs{...}
type GetECXL2SellerprofilesProfileSpeedBandInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileSpeedBandOutput() GetECXL2SellerprofilesProfileSpeedBandOutput
	ToGetECXL2SellerprofilesProfileSpeedBandOutputWithContext(context.Context) GetECXL2SellerprofilesProfileSpeedBandOutput
}

type GetECXL2SellerprofilesProfileSpeedBandArgs struct {
	Speed     pulumi.IntInput    `pulumi:"speed"`
	SpeedUnit pulumi.StringInput `pulumi:"speedUnit"`
}

func (GetECXL2SellerprofilesProfileSpeedBandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfileSpeedBand)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileSpeedBandArgs) ToGetECXL2SellerprofilesProfileSpeedBandOutput() GetECXL2SellerprofilesProfileSpeedBandOutput {
	return i.ToGetECXL2SellerprofilesProfileSpeedBandOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileSpeedBandArgs) ToGetECXL2SellerprofilesProfileSpeedBandOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileSpeedBandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileSpeedBandOutput)
}

// GetECXL2SellerprofilesProfileSpeedBandArrayInput is an input type that accepts GetECXL2SellerprofilesProfileSpeedBandArray and GetECXL2SellerprofilesProfileSpeedBandArrayOutput values.
// You can construct a concrete instance of `GetECXL2SellerprofilesProfileSpeedBandArrayInput` via:
//
//          GetECXL2SellerprofilesProfileSpeedBandArray{ GetECXL2SellerprofilesProfileSpeedBandArgs{...} }
type GetECXL2SellerprofilesProfileSpeedBandArrayInput interface {
	pulumi.Input

	ToGetECXL2SellerprofilesProfileSpeedBandArrayOutput() GetECXL2SellerprofilesProfileSpeedBandArrayOutput
	ToGetECXL2SellerprofilesProfileSpeedBandArrayOutputWithContext(context.Context) GetECXL2SellerprofilesProfileSpeedBandArrayOutput
}

type GetECXL2SellerprofilesProfileSpeedBandArray []GetECXL2SellerprofilesProfileSpeedBandInput

func (GetECXL2SellerprofilesProfileSpeedBandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfileSpeedBand)(nil)).Elem()
}

func (i GetECXL2SellerprofilesProfileSpeedBandArray) ToGetECXL2SellerprofilesProfileSpeedBandArrayOutput() GetECXL2SellerprofilesProfileSpeedBandArrayOutput {
	return i.ToGetECXL2SellerprofilesProfileSpeedBandArrayOutputWithContext(context.Background())
}

func (i GetECXL2SellerprofilesProfileSpeedBandArray) ToGetECXL2SellerprofilesProfileSpeedBandArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileSpeedBandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetECXL2SellerprofilesProfileSpeedBandArrayOutput)
}

type GetECXL2SellerprofilesProfileSpeedBandOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileSpeedBandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetECXL2SellerprofilesProfileSpeedBand)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileSpeedBandOutput) ToGetECXL2SellerprofilesProfileSpeedBandOutput() GetECXL2SellerprofilesProfileSpeedBandOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileSpeedBandOutput) ToGetECXL2SellerprofilesProfileSpeedBandOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileSpeedBandOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileSpeedBandOutput) Speed() pulumi.IntOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileSpeedBand) int { return v.Speed }).(pulumi.IntOutput)
}

func (o GetECXL2SellerprofilesProfileSpeedBandOutput) SpeedUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetECXL2SellerprofilesProfileSpeedBand) string { return v.SpeedUnit }).(pulumi.StringOutput)
}

type GetECXL2SellerprofilesProfileSpeedBandArrayOutput struct{ *pulumi.OutputState }

func (GetECXL2SellerprofilesProfileSpeedBandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetECXL2SellerprofilesProfileSpeedBand)(nil)).Elem()
}

func (o GetECXL2SellerprofilesProfileSpeedBandArrayOutput) ToGetECXL2SellerprofilesProfileSpeedBandArrayOutput() GetECXL2SellerprofilesProfileSpeedBandArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileSpeedBandArrayOutput) ToGetECXL2SellerprofilesProfileSpeedBandArrayOutputWithContext(ctx context.Context) GetECXL2SellerprofilesProfileSpeedBandArrayOutput {
	return o
}

func (o GetECXL2SellerprofilesProfileSpeedBandArrayOutput) Index(i pulumi.IntInput) GetECXL2SellerprofilesProfileSpeedBandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetECXL2SellerprofilesProfileSpeedBand {
		return vs[0].([]GetECXL2SellerprofilesProfileSpeedBand)[vs[1].(int)]
	}).(GetECXL2SellerprofilesProfileSpeedBandOutput)
}

type GetMetalConnectionPort struct {
	// Port UUID.
	Id string `pulumi:"id"`
	// Port link status.
	LinkStatus string `pulumi:"linkStatus"`
	// Port name.
	Name string `pulumi:"name"`
	// Port role - primary or secondary.
	Role string `pulumi:"role"`
	// Port speed in bits per second.
	Speed int `pulumi:"speed"`
	// Port status.
	Status string `pulumi:"status"`
	// List of IDs of virtual cicruits attached to this port.
	VirtualCircuitIds []interface{} `pulumi:"virtualCircuitIds"`
}

// GetMetalConnectionPortInput is an input type that accepts GetMetalConnectionPortArgs and GetMetalConnectionPortOutput values.
// You can construct a concrete instance of `GetMetalConnectionPortInput` via:
//
//          GetMetalConnectionPortArgs{...}
type GetMetalConnectionPortInput interface {
	pulumi.Input

	ToGetMetalConnectionPortOutput() GetMetalConnectionPortOutput
	ToGetMetalConnectionPortOutputWithContext(context.Context) GetMetalConnectionPortOutput
}

type GetMetalConnectionPortArgs struct {
	// Port UUID.
	Id pulumi.StringInput `pulumi:"id"`
	// Port link status.
	LinkStatus pulumi.StringInput `pulumi:"linkStatus"`
	// Port name.
	Name pulumi.StringInput `pulumi:"name"`
	// Port role - primary or secondary.
	Role pulumi.StringInput `pulumi:"role"`
	// Port speed in bits per second.
	Speed pulumi.IntInput `pulumi:"speed"`
	// Port status.
	Status pulumi.StringInput `pulumi:"status"`
	// List of IDs of virtual cicruits attached to this port.
	VirtualCircuitIds pulumi.ArrayInput `pulumi:"virtualCircuitIds"`
}

func (GetMetalConnectionPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalConnectionPort)(nil)).Elem()
}

func (i GetMetalConnectionPortArgs) ToGetMetalConnectionPortOutput() GetMetalConnectionPortOutput {
	return i.ToGetMetalConnectionPortOutputWithContext(context.Background())
}

func (i GetMetalConnectionPortArgs) ToGetMetalConnectionPortOutputWithContext(ctx context.Context) GetMetalConnectionPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalConnectionPortOutput)
}

// GetMetalConnectionPortArrayInput is an input type that accepts GetMetalConnectionPortArray and GetMetalConnectionPortArrayOutput values.
// You can construct a concrete instance of `GetMetalConnectionPortArrayInput` via:
//
//          GetMetalConnectionPortArray{ GetMetalConnectionPortArgs{...} }
type GetMetalConnectionPortArrayInput interface {
	pulumi.Input

	ToGetMetalConnectionPortArrayOutput() GetMetalConnectionPortArrayOutput
	ToGetMetalConnectionPortArrayOutputWithContext(context.Context) GetMetalConnectionPortArrayOutput
}

type GetMetalConnectionPortArray []GetMetalConnectionPortInput

func (GetMetalConnectionPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalConnectionPort)(nil)).Elem()
}

func (i GetMetalConnectionPortArray) ToGetMetalConnectionPortArrayOutput() GetMetalConnectionPortArrayOutput {
	return i.ToGetMetalConnectionPortArrayOutputWithContext(context.Background())
}

func (i GetMetalConnectionPortArray) ToGetMetalConnectionPortArrayOutputWithContext(ctx context.Context) GetMetalConnectionPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalConnectionPortArrayOutput)
}

type GetMetalConnectionPortOutput struct{ *pulumi.OutputState }

func (GetMetalConnectionPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalConnectionPort)(nil)).Elem()
}

func (o GetMetalConnectionPortOutput) ToGetMetalConnectionPortOutput() GetMetalConnectionPortOutput {
	return o
}

func (o GetMetalConnectionPortOutput) ToGetMetalConnectionPortOutputWithContext(ctx context.Context) GetMetalConnectionPortOutput {
	return o
}

// Port UUID.
func (o GetMetalConnectionPortOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) string { return v.Id }).(pulumi.StringOutput)
}

// Port link status.
func (o GetMetalConnectionPortOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// Port name.
func (o GetMetalConnectionPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) string { return v.Name }).(pulumi.StringOutput)
}

// Port role - primary or secondary.
func (o GetMetalConnectionPortOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) string { return v.Role }).(pulumi.StringOutput)
}

// Port speed in bits per second.
func (o GetMetalConnectionPortOutput) Speed() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) int { return v.Speed }).(pulumi.IntOutput)
}

// Port status.
func (o GetMetalConnectionPortOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) string { return v.Status }).(pulumi.StringOutput)
}

// List of IDs of virtual cicruits attached to this port.
func (o GetMetalConnectionPortOutput) VirtualCircuitIds() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetMetalConnectionPort) []interface{} { return v.VirtualCircuitIds }).(pulumi.ArrayOutput)
}

type GetMetalConnectionPortArrayOutput struct{ *pulumi.OutputState }

func (GetMetalConnectionPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalConnectionPort)(nil)).Elem()
}

func (o GetMetalConnectionPortArrayOutput) ToGetMetalConnectionPortArrayOutput() GetMetalConnectionPortArrayOutput {
	return o
}

func (o GetMetalConnectionPortArrayOutput) ToGetMetalConnectionPortArrayOutputWithContext(ctx context.Context) GetMetalConnectionPortArrayOutput {
	return o
}

func (o GetMetalConnectionPortArrayOutput) Index(i pulumi.IntInput) GetMetalConnectionPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalConnectionPort {
		return vs[0].([]GetMetalConnectionPort)[vs[1].(int)]
	}).(GetMetalConnectionPortOutput)
}

type GetMetalConnectionServiceToken struct {
	// Expiration date of the service token.
	ExpiresAt string `pulumi:"expiresAt"`
	// Port UUID.
	Id string `pulumi:"id"`
	// Maximum allowed speed for the service token, string like in the `speed` attribute.
	MaxAllowedSpeed string `pulumi:"maxAllowedSpeed"`
	// Port role - primary or secondary.
	Role  string `pulumi:"role"`
	State string `pulumi:"state"`
	// Token type, `aSide` or `zSide`.
	Type string `pulumi:"type"`
}

// GetMetalConnectionServiceTokenInput is an input type that accepts GetMetalConnectionServiceTokenArgs and GetMetalConnectionServiceTokenOutput values.
// You can construct a concrete instance of `GetMetalConnectionServiceTokenInput` via:
//
//          GetMetalConnectionServiceTokenArgs{...}
type GetMetalConnectionServiceTokenInput interface {
	pulumi.Input

	ToGetMetalConnectionServiceTokenOutput() GetMetalConnectionServiceTokenOutput
	ToGetMetalConnectionServiceTokenOutputWithContext(context.Context) GetMetalConnectionServiceTokenOutput
}

type GetMetalConnectionServiceTokenArgs struct {
	// Expiration date of the service token.
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// Port UUID.
	Id pulumi.StringInput `pulumi:"id"`
	// Maximum allowed speed for the service token, string like in the `speed` attribute.
	MaxAllowedSpeed pulumi.StringInput `pulumi:"maxAllowedSpeed"`
	// Port role - primary or secondary.
	Role  pulumi.StringInput `pulumi:"role"`
	State pulumi.StringInput `pulumi:"state"`
	// Token type, `aSide` or `zSide`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetMetalConnectionServiceTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalConnectionServiceToken)(nil)).Elem()
}

func (i GetMetalConnectionServiceTokenArgs) ToGetMetalConnectionServiceTokenOutput() GetMetalConnectionServiceTokenOutput {
	return i.ToGetMetalConnectionServiceTokenOutputWithContext(context.Background())
}

func (i GetMetalConnectionServiceTokenArgs) ToGetMetalConnectionServiceTokenOutputWithContext(ctx context.Context) GetMetalConnectionServiceTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalConnectionServiceTokenOutput)
}

// GetMetalConnectionServiceTokenArrayInput is an input type that accepts GetMetalConnectionServiceTokenArray and GetMetalConnectionServiceTokenArrayOutput values.
// You can construct a concrete instance of `GetMetalConnectionServiceTokenArrayInput` via:
//
//          GetMetalConnectionServiceTokenArray{ GetMetalConnectionServiceTokenArgs{...} }
type GetMetalConnectionServiceTokenArrayInput interface {
	pulumi.Input

	ToGetMetalConnectionServiceTokenArrayOutput() GetMetalConnectionServiceTokenArrayOutput
	ToGetMetalConnectionServiceTokenArrayOutputWithContext(context.Context) GetMetalConnectionServiceTokenArrayOutput
}

type GetMetalConnectionServiceTokenArray []GetMetalConnectionServiceTokenInput

func (GetMetalConnectionServiceTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalConnectionServiceToken)(nil)).Elem()
}

func (i GetMetalConnectionServiceTokenArray) ToGetMetalConnectionServiceTokenArrayOutput() GetMetalConnectionServiceTokenArrayOutput {
	return i.ToGetMetalConnectionServiceTokenArrayOutputWithContext(context.Background())
}

func (i GetMetalConnectionServiceTokenArray) ToGetMetalConnectionServiceTokenArrayOutputWithContext(ctx context.Context) GetMetalConnectionServiceTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalConnectionServiceTokenArrayOutput)
}

type GetMetalConnectionServiceTokenOutput struct{ *pulumi.OutputState }

func (GetMetalConnectionServiceTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalConnectionServiceToken)(nil)).Elem()
}

func (o GetMetalConnectionServiceTokenOutput) ToGetMetalConnectionServiceTokenOutput() GetMetalConnectionServiceTokenOutput {
	return o
}

func (o GetMetalConnectionServiceTokenOutput) ToGetMetalConnectionServiceTokenOutputWithContext(ctx context.Context) GetMetalConnectionServiceTokenOutput {
	return o
}

// Expiration date of the service token.
func (o GetMetalConnectionServiceTokenOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionServiceToken) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Port UUID.
func (o GetMetalConnectionServiceTokenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionServiceToken) string { return v.Id }).(pulumi.StringOutput)
}

// Maximum allowed speed for the service token, string like in the `speed` attribute.
func (o GetMetalConnectionServiceTokenOutput) MaxAllowedSpeed() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionServiceToken) string { return v.MaxAllowedSpeed }).(pulumi.StringOutput)
}

// Port role - primary or secondary.
func (o GetMetalConnectionServiceTokenOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionServiceToken) string { return v.Role }).(pulumi.StringOutput)
}

func (o GetMetalConnectionServiceTokenOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionServiceToken) string { return v.State }).(pulumi.StringOutput)
}

// Token type, `aSide` or `zSide`.
func (o GetMetalConnectionServiceTokenOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalConnectionServiceToken) string { return v.Type }).(pulumi.StringOutput)
}

type GetMetalConnectionServiceTokenArrayOutput struct{ *pulumi.OutputState }

func (GetMetalConnectionServiceTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalConnectionServiceToken)(nil)).Elem()
}

func (o GetMetalConnectionServiceTokenArrayOutput) ToGetMetalConnectionServiceTokenArrayOutput() GetMetalConnectionServiceTokenArrayOutput {
	return o
}

func (o GetMetalConnectionServiceTokenArrayOutput) ToGetMetalConnectionServiceTokenArrayOutputWithContext(ctx context.Context) GetMetalConnectionServiceTokenArrayOutput {
	return o
}

func (o GetMetalConnectionServiceTokenArrayOutput) Index(i pulumi.IntInput) GetMetalConnectionServiceTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalConnectionServiceToken {
		return vs[0].([]GetMetalConnectionServiceToken)[vs[1].(int)]
	}).(GetMetalConnectionServiceTokenOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighbor struct {
	// IP address version, 4 or 6.
	AddressFamily int `pulumi:"addressFamily"`
	// Local autonomous system number.
	CustomerAs int `pulumi:"customerAs"`
	// Local used peer IP address.
	CustomerIp string `pulumi:"customerIp"`
	// Whether BGP session is password enabled.
	Md5Enabled bool `pulumi:"md5Enabled"`
	// BGP session password in plaintext (not a checksum).
	Md5Password string `pulumi:"md5Password"`
	// Whether the neighbor is in EBGP multihop session.
	Multihop bool `pulumi:"multihop"`
	// Peer AS number (different than customerAs for EBGP).
	PeerAs int `pulumi:"peerAs"`
	// Array of IP addresses of this neighbor's peers.
	PeerIps []string `pulumi:"peerIps"`
	// Array of incoming routes.
	RoutesIns []GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn `pulumi:"routesIns"`
	// Array of outgoing routes in the same format.
	RoutesOuts []GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut `pulumi:"routesOuts"`
}

// GetMetalDeviceBGPNeighborsBgpNeighborInput is an input type that accepts GetMetalDeviceBGPNeighborsBgpNeighborArgs and GetMetalDeviceBGPNeighborsBgpNeighborOutput values.
// You can construct a concrete instance of `GetMetalDeviceBGPNeighborsBgpNeighborInput` via:
//
//          GetMetalDeviceBGPNeighborsBgpNeighborArgs{...}
type GetMetalDeviceBGPNeighborsBgpNeighborInput interface {
	pulumi.Input

	ToGetMetalDeviceBGPNeighborsBgpNeighborOutput() GetMetalDeviceBGPNeighborsBgpNeighborOutput
	ToGetMetalDeviceBGPNeighborsBgpNeighborOutputWithContext(context.Context) GetMetalDeviceBGPNeighborsBgpNeighborOutput
}

type GetMetalDeviceBGPNeighborsBgpNeighborArgs struct {
	// IP address version, 4 or 6.
	AddressFamily pulumi.IntInput `pulumi:"addressFamily"`
	// Local autonomous system number.
	CustomerAs pulumi.IntInput `pulumi:"customerAs"`
	// Local used peer IP address.
	CustomerIp pulumi.StringInput `pulumi:"customerIp"`
	// Whether BGP session is password enabled.
	Md5Enabled pulumi.BoolInput `pulumi:"md5Enabled"`
	// BGP session password in plaintext (not a checksum).
	Md5Password pulumi.StringInput `pulumi:"md5Password"`
	// Whether the neighbor is in EBGP multihop session.
	Multihop pulumi.BoolInput `pulumi:"multihop"`
	// Peer AS number (different than customerAs for EBGP).
	PeerAs pulumi.IntInput `pulumi:"peerAs"`
	// Array of IP addresses of this neighbor's peers.
	PeerIps pulumi.StringArrayInput `pulumi:"peerIps"`
	// Array of incoming routes.
	RoutesIns GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayInput `pulumi:"routesIns"`
	// Array of outgoing routes in the same format.
	RoutesOuts GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayInput `pulumi:"routesOuts"`
}

func (GetMetalDeviceBGPNeighborsBgpNeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighbor)(nil)).Elem()
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborArgs) ToGetMetalDeviceBGPNeighborsBgpNeighborOutput() GetMetalDeviceBGPNeighborsBgpNeighborOutput {
	return i.ToGetMetalDeviceBGPNeighborsBgpNeighborOutputWithContext(context.Background())
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborArgs) ToGetMetalDeviceBGPNeighborsBgpNeighborOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceBGPNeighborsBgpNeighborOutput)
}

// GetMetalDeviceBGPNeighborsBgpNeighborArrayInput is an input type that accepts GetMetalDeviceBGPNeighborsBgpNeighborArray and GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput values.
// You can construct a concrete instance of `GetMetalDeviceBGPNeighborsBgpNeighborArrayInput` via:
//
//          GetMetalDeviceBGPNeighborsBgpNeighborArray{ GetMetalDeviceBGPNeighborsBgpNeighborArgs{...} }
type GetMetalDeviceBGPNeighborsBgpNeighborArrayInput interface {
	pulumi.Input

	ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput
	ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutputWithContext(context.Context) GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput
}

type GetMetalDeviceBGPNeighborsBgpNeighborArray []GetMetalDeviceBGPNeighborsBgpNeighborInput

func (GetMetalDeviceBGPNeighborsBgpNeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceBGPNeighborsBgpNeighbor)(nil)).Elem()
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborArray) ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput {
	return i.ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutputWithContext(context.Background())
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborArray) ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceBGPNeighborsBgpNeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighbor)(nil)).Elem()
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborOutput() GetMetalDeviceBGPNeighborsBgpNeighborOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborOutput {
	return o
}

// IP address version, 4 or 6.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) AddressFamily() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) int { return v.AddressFamily }).(pulumi.IntOutput)
}

// Local autonomous system number.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) CustomerAs() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) int { return v.CustomerAs }).(pulumi.IntOutput)
}

// Local used peer IP address.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) CustomerIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) string { return v.CustomerIp }).(pulumi.StringOutput)
}

// Whether BGP session is password enabled.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) Md5Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) bool { return v.Md5Enabled }).(pulumi.BoolOutput)
}

// BGP session password in plaintext (not a checksum).
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) Md5Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) string { return v.Md5Password }).(pulumi.StringOutput)
}

// Whether the neighbor is in EBGP multihop session.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) Multihop() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) bool { return v.Multihop }).(pulumi.BoolOutput)
}

// Peer AS number (different than customerAs for EBGP).
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) PeerAs() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) int { return v.PeerAs }).(pulumi.IntOutput)
}

// Array of IP addresses of this neighbor's peers.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) PeerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) []string { return v.PeerIps }).(pulumi.StringArrayOutput)
}

// Array of incoming routes.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) RoutesIns() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) []GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn {
		return v.RoutesIns
	}).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput)
}

// Array of outgoing routes in the same format.
func (o GetMetalDeviceBGPNeighborsBgpNeighborOutput) RoutesOuts() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighbor) []GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut {
		return v.RoutesOuts
	}).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceBGPNeighborsBgpNeighbor)(nil)).Elem()
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborArrayOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput) Index(i pulumi.IntInput) GetMetalDeviceBGPNeighborsBgpNeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalDeviceBGPNeighborsBgpNeighbor {
		return vs[0].([]GetMetalDeviceBGPNeighborsBgpNeighbor)[vs[1].(int)]
	}).(GetMetalDeviceBGPNeighborsBgpNeighborOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn struct {
	// (bool) Whether the route is exact.
	Exact bool `pulumi:"exact"`
	// CIDR expression of route (IP/mask).
	Route string `pulumi:"route"`
}

// GetMetalDeviceBGPNeighborsBgpNeighborRoutesInInput is an input type that accepts GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs and GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput values.
// You can construct a concrete instance of `GetMetalDeviceBGPNeighborsBgpNeighborRoutesInInput` via:
//
//          GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs{...}
type GetMetalDeviceBGPNeighborsBgpNeighborRoutesInInput interface {
	pulumi.Input

	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput
	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutputWithContext(context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs struct {
	// (bool) Whether the route is exact.
	Exact pulumi.BoolInput `pulumi:"exact"`
	// CIDR expression of route (IP/mask).
	Route pulumi.StringInput `pulumi:"route"`
}

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn)(nil)).Elem()
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput {
	return i.ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutputWithContext(context.Background())
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput)
}

// GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayInput is an input type that accepts GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray and GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput values.
// You can construct a concrete instance of `GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayInput` via:
//
//          GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray{ GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs{...} }
type GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayInput interface {
	pulumi.Input

	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput
	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutputWithContext(context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray []GetMetalDeviceBGPNeighborsBgpNeighborRoutesInInput

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn)(nil)).Elem()
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput {
	return i.ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutputWithContext(context.Background())
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn)(nil)).Elem()
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput {
	return o
}

// (bool) Whether the route is exact.
func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput) Exact() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn) bool { return v.Exact }).(pulumi.BoolOutput)
}

// CIDR expression of route (IP/mask).
func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput) Route() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn) string { return v.Route }).(pulumi.StringOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn)(nil)).Elem()
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput) Index(i pulumi.IntInput) GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn {
		return vs[0].([]GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn)[vs[1].(int)]
	}).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut struct {
	// (bool) Whether the route is exact.
	Exact bool `pulumi:"exact"`
	// CIDR expression of route (IP/mask).
	Route string `pulumi:"route"`
}

// GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutInput is an input type that accepts GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs and GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput values.
// You can construct a concrete instance of `GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutInput` via:
//
//          GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs{...}
type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutInput interface {
	pulumi.Input

	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput
	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutputWithContext(context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs struct {
	// (bool) Whether the route is exact.
	Exact pulumi.BoolInput `pulumi:"exact"`
	// CIDR expression of route (IP/mask).
	Route pulumi.StringInput `pulumi:"route"`
}

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut)(nil)).Elem()
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput {
	return i.ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutputWithContext(context.Background())
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput)
}

// GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayInput is an input type that accepts GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray and GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput values.
// You can construct a concrete instance of `GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayInput` via:
//
//          GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray{ GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs{...} }
type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayInput interface {
	pulumi.Input

	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput
	ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutputWithContext(context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray []GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutInput

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut)(nil)).Elem()
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput {
	return i.ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutputWithContext(context.Background())
}

func (i GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut)(nil)).Elem()
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput {
	return o
}

// (bool) Whether the route is exact.
func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput) Exact() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut) bool { return v.Exact }).(pulumi.BoolOutput)
}

// CIDR expression of route (IP/mask).
func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput) Route() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut) string { return v.Route }).(pulumi.StringOutput)
}

type GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut)(nil)).Elem()
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput() GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput) ToGetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutputWithContext(ctx context.Context) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput {
	return o
}

func (o GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput) Index(i pulumi.IntInput) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut {
		return vs[0].([]GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut)[vs[1].(int)]
	}).(GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput)
}

type GetMetalDeviceNetwork struct {
	// IPv4 or IPv6 address string.
	Address string `pulumi:"address"`
	// Bit length of the network mask of the address.
	Cidr int `pulumi:"cidr"`
	// IP version. One of `4`, `6`.
	Family int `pulumi:"family"`
	// Address of router.
	Gateway string `pulumi:"gateway"`
	// Whether the address is routable from the Internet.
	Public bool `pulumi:"public"`
}

// GetMetalDeviceNetworkInput is an input type that accepts GetMetalDeviceNetworkArgs and GetMetalDeviceNetworkOutput values.
// You can construct a concrete instance of `GetMetalDeviceNetworkInput` via:
//
//          GetMetalDeviceNetworkArgs{...}
type GetMetalDeviceNetworkInput interface {
	pulumi.Input

	ToGetMetalDeviceNetworkOutput() GetMetalDeviceNetworkOutput
	ToGetMetalDeviceNetworkOutputWithContext(context.Context) GetMetalDeviceNetworkOutput
}

type GetMetalDeviceNetworkArgs struct {
	// IPv4 or IPv6 address string.
	Address pulumi.StringInput `pulumi:"address"`
	// Bit length of the network mask of the address.
	Cidr pulumi.IntInput `pulumi:"cidr"`
	// IP version. One of `4`, `6`.
	Family pulumi.IntInput `pulumi:"family"`
	// Address of router.
	Gateway pulumi.StringInput `pulumi:"gateway"`
	// Whether the address is routable from the Internet.
	Public pulumi.BoolInput `pulumi:"public"`
}

func (GetMetalDeviceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceNetwork)(nil)).Elem()
}

func (i GetMetalDeviceNetworkArgs) ToGetMetalDeviceNetworkOutput() GetMetalDeviceNetworkOutput {
	return i.ToGetMetalDeviceNetworkOutputWithContext(context.Background())
}

func (i GetMetalDeviceNetworkArgs) ToGetMetalDeviceNetworkOutputWithContext(ctx context.Context) GetMetalDeviceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceNetworkOutput)
}

// GetMetalDeviceNetworkArrayInput is an input type that accepts GetMetalDeviceNetworkArray and GetMetalDeviceNetworkArrayOutput values.
// You can construct a concrete instance of `GetMetalDeviceNetworkArrayInput` via:
//
//          GetMetalDeviceNetworkArray{ GetMetalDeviceNetworkArgs{...} }
type GetMetalDeviceNetworkArrayInput interface {
	pulumi.Input

	ToGetMetalDeviceNetworkArrayOutput() GetMetalDeviceNetworkArrayOutput
	ToGetMetalDeviceNetworkArrayOutputWithContext(context.Context) GetMetalDeviceNetworkArrayOutput
}

type GetMetalDeviceNetworkArray []GetMetalDeviceNetworkInput

func (GetMetalDeviceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceNetwork)(nil)).Elem()
}

func (i GetMetalDeviceNetworkArray) ToGetMetalDeviceNetworkArrayOutput() GetMetalDeviceNetworkArrayOutput {
	return i.ToGetMetalDeviceNetworkArrayOutputWithContext(context.Background())
}

func (i GetMetalDeviceNetworkArray) ToGetMetalDeviceNetworkArrayOutputWithContext(ctx context.Context) GetMetalDeviceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDeviceNetworkArrayOutput)
}

type GetMetalDeviceNetworkOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDeviceNetwork)(nil)).Elem()
}

func (o GetMetalDeviceNetworkOutput) ToGetMetalDeviceNetworkOutput() GetMetalDeviceNetworkOutput {
	return o
}

func (o GetMetalDeviceNetworkOutput) ToGetMetalDeviceNetworkOutputWithContext(ctx context.Context) GetMetalDeviceNetworkOutput {
	return o
}

// IPv4 or IPv6 address string.
func (o GetMetalDeviceNetworkOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDeviceNetwork) string { return v.Address }).(pulumi.StringOutput)
}

// Bit length of the network mask of the address.
func (o GetMetalDeviceNetworkOutput) Cidr() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalDeviceNetwork) int { return v.Cidr }).(pulumi.IntOutput)
}

// IP version. One of `4`, `6`.
func (o GetMetalDeviceNetworkOutput) Family() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalDeviceNetwork) int { return v.Family }).(pulumi.IntOutput)
}

// Address of router.
func (o GetMetalDeviceNetworkOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDeviceNetwork) string { return v.Gateway }).(pulumi.StringOutput)
}

// Whether the address is routable from the Internet.
func (o GetMetalDeviceNetworkOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalDeviceNetwork) bool { return v.Public }).(pulumi.BoolOutput)
}

type GetMetalDeviceNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetMetalDeviceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDeviceNetwork)(nil)).Elem()
}

func (o GetMetalDeviceNetworkArrayOutput) ToGetMetalDeviceNetworkArrayOutput() GetMetalDeviceNetworkArrayOutput {
	return o
}

func (o GetMetalDeviceNetworkArrayOutput) ToGetMetalDeviceNetworkArrayOutputWithContext(ctx context.Context) GetMetalDeviceNetworkArrayOutput {
	return o
}

func (o GetMetalDeviceNetworkArrayOutput) Index(i pulumi.IntInput) GetMetalDeviceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalDeviceNetwork {
		return vs[0].([]GetMetalDeviceNetwork)[vs[1].(int)]
	}).(GetMetalDeviceNetworkOutput)
}

type GetMetalDevicePort struct {
	// Whether this port is part of a bond in bonded network setup.
	Bonded bool `pulumi:"bonded"`
	// ID of the port.
	Id string `pulumi:"id"`
	// MAC address assigned to the port.
	Mac string `pulumi:"mac"`
	// Name of the port (e.g. `eth0`, or `bond0`).
	Name string `pulumi:"name"`
	// Type of the port (e.g. `NetworkPort` or `NetworkBondPort`).
	Type string `pulumi:"type"`
}

// GetMetalDevicePortInput is an input type that accepts GetMetalDevicePortArgs and GetMetalDevicePortOutput values.
// You can construct a concrete instance of `GetMetalDevicePortInput` via:
//
//          GetMetalDevicePortArgs{...}
type GetMetalDevicePortInput interface {
	pulumi.Input

	ToGetMetalDevicePortOutput() GetMetalDevicePortOutput
	ToGetMetalDevicePortOutputWithContext(context.Context) GetMetalDevicePortOutput
}

type GetMetalDevicePortArgs struct {
	// Whether this port is part of a bond in bonded network setup.
	Bonded pulumi.BoolInput `pulumi:"bonded"`
	// ID of the port.
	Id pulumi.StringInput `pulumi:"id"`
	// MAC address assigned to the port.
	Mac pulumi.StringInput `pulumi:"mac"`
	// Name of the port (e.g. `eth0`, or `bond0`).
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the port (e.g. `NetworkPort` or `NetworkBondPort`).
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetMetalDevicePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDevicePort)(nil)).Elem()
}

func (i GetMetalDevicePortArgs) ToGetMetalDevicePortOutput() GetMetalDevicePortOutput {
	return i.ToGetMetalDevicePortOutputWithContext(context.Background())
}

func (i GetMetalDevicePortArgs) ToGetMetalDevicePortOutputWithContext(ctx context.Context) GetMetalDevicePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDevicePortOutput)
}

// GetMetalDevicePortArrayInput is an input type that accepts GetMetalDevicePortArray and GetMetalDevicePortArrayOutput values.
// You can construct a concrete instance of `GetMetalDevicePortArrayInput` via:
//
//          GetMetalDevicePortArray{ GetMetalDevicePortArgs{...} }
type GetMetalDevicePortArrayInput interface {
	pulumi.Input

	ToGetMetalDevicePortArrayOutput() GetMetalDevicePortArrayOutput
	ToGetMetalDevicePortArrayOutputWithContext(context.Context) GetMetalDevicePortArrayOutput
}

type GetMetalDevicePortArray []GetMetalDevicePortInput

func (GetMetalDevicePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDevicePort)(nil)).Elem()
}

func (i GetMetalDevicePortArray) ToGetMetalDevicePortArrayOutput() GetMetalDevicePortArrayOutput {
	return i.ToGetMetalDevicePortArrayOutputWithContext(context.Background())
}

func (i GetMetalDevicePortArray) ToGetMetalDevicePortArrayOutputWithContext(ctx context.Context) GetMetalDevicePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalDevicePortArrayOutput)
}

type GetMetalDevicePortOutput struct{ *pulumi.OutputState }

func (GetMetalDevicePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalDevicePort)(nil)).Elem()
}

func (o GetMetalDevicePortOutput) ToGetMetalDevicePortOutput() GetMetalDevicePortOutput {
	return o
}

func (o GetMetalDevicePortOutput) ToGetMetalDevicePortOutputWithContext(ctx context.Context) GetMetalDevicePortOutput {
	return o
}

// Whether this port is part of a bond in bonded network setup.
func (o GetMetalDevicePortOutput) Bonded() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalDevicePort) bool { return v.Bonded }).(pulumi.BoolOutput)
}

// ID of the port.
func (o GetMetalDevicePortOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDevicePort) string { return v.Id }).(pulumi.StringOutput)
}

// MAC address assigned to the port.
func (o GetMetalDevicePortOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDevicePort) string { return v.Mac }).(pulumi.StringOutput)
}

// Name of the port (e.g. `eth0`, or `bond0`).
func (o GetMetalDevicePortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDevicePort) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the port (e.g. `NetworkPort` or `NetworkBondPort`).
func (o GetMetalDevicePortOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalDevicePort) string { return v.Type }).(pulumi.StringOutput)
}

type GetMetalDevicePortArrayOutput struct{ *pulumi.OutputState }

func (GetMetalDevicePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalDevicePort)(nil)).Elem()
}

func (o GetMetalDevicePortArrayOutput) ToGetMetalDevicePortArrayOutput() GetMetalDevicePortArrayOutput {
	return o
}

func (o GetMetalDevicePortArrayOutput) ToGetMetalDevicePortArrayOutputWithContext(ctx context.Context) GetMetalDevicePortArrayOutput {
	return o
}

func (o GetMetalDevicePortArrayOutput) Index(i pulumi.IntInput) GetMetalDevicePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalDevicePort {
		return vs[0].([]GetMetalDevicePort)[vs[1].(int)]
	}).(GetMetalDevicePortOutput)
}

type GetMetalFacilityCapacity struct {
	// Device plan that must be available in selected location.
	Plan string `pulumi:"plan"`
	// Minimun number of devices that must be available in selected location.
	// Default is `1`.
	Quantity *int `pulumi:"quantity"`
}

// GetMetalFacilityCapacityInput is an input type that accepts GetMetalFacilityCapacityArgs and GetMetalFacilityCapacityOutput values.
// You can construct a concrete instance of `GetMetalFacilityCapacityInput` via:
//
//          GetMetalFacilityCapacityArgs{...}
type GetMetalFacilityCapacityInput interface {
	pulumi.Input

	ToGetMetalFacilityCapacityOutput() GetMetalFacilityCapacityOutput
	ToGetMetalFacilityCapacityOutputWithContext(context.Context) GetMetalFacilityCapacityOutput
}

type GetMetalFacilityCapacityArgs struct {
	// Device plan that must be available in selected location.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Minimun number of devices that must be available in selected location.
	// Default is `1`.
	Quantity pulumi.IntPtrInput `pulumi:"quantity"`
}

func (GetMetalFacilityCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalFacilityCapacity)(nil)).Elem()
}

func (i GetMetalFacilityCapacityArgs) ToGetMetalFacilityCapacityOutput() GetMetalFacilityCapacityOutput {
	return i.ToGetMetalFacilityCapacityOutputWithContext(context.Background())
}

func (i GetMetalFacilityCapacityArgs) ToGetMetalFacilityCapacityOutputWithContext(ctx context.Context) GetMetalFacilityCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalFacilityCapacityOutput)
}

// GetMetalFacilityCapacityArrayInput is an input type that accepts GetMetalFacilityCapacityArray and GetMetalFacilityCapacityArrayOutput values.
// You can construct a concrete instance of `GetMetalFacilityCapacityArrayInput` via:
//
//          GetMetalFacilityCapacityArray{ GetMetalFacilityCapacityArgs{...} }
type GetMetalFacilityCapacityArrayInput interface {
	pulumi.Input

	ToGetMetalFacilityCapacityArrayOutput() GetMetalFacilityCapacityArrayOutput
	ToGetMetalFacilityCapacityArrayOutputWithContext(context.Context) GetMetalFacilityCapacityArrayOutput
}

type GetMetalFacilityCapacityArray []GetMetalFacilityCapacityInput

func (GetMetalFacilityCapacityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalFacilityCapacity)(nil)).Elem()
}

func (i GetMetalFacilityCapacityArray) ToGetMetalFacilityCapacityArrayOutput() GetMetalFacilityCapacityArrayOutput {
	return i.ToGetMetalFacilityCapacityArrayOutputWithContext(context.Background())
}

func (i GetMetalFacilityCapacityArray) ToGetMetalFacilityCapacityArrayOutputWithContext(ctx context.Context) GetMetalFacilityCapacityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalFacilityCapacityArrayOutput)
}

type GetMetalFacilityCapacityOutput struct{ *pulumi.OutputState }

func (GetMetalFacilityCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalFacilityCapacity)(nil)).Elem()
}

func (o GetMetalFacilityCapacityOutput) ToGetMetalFacilityCapacityOutput() GetMetalFacilityCapacityOutput {
	return o
}

func (o GetMetalFacilityCapacityOutput) ToGetMetalFacilityCapacityOutputWithContext(ctx context.Context) GetMetalFacilityCapacityOutput {
	return o
}

// Device plan that must be available in selected location.
func (o GetMetalFacilityCapacityOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalFacilityCapacity) string { return v.Plan }).(pulumi.StringOutput)
}

// Minimun number of devices that must be available in selected location.
// Default is `1`.
func (o GetMetalFacilityCapacityOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMetalFacilityCapacity) *int { return v.Quantity }).(pulumi.IntPtrOutput)
}

type GetMetalFacilityCapacityArrayOutput struct{ *pulumi.OutputState }

func (GetMetalFacilityCapacityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalFacilityCapacity)(nil)).Elem()
}

func (o GetMetalFacilityCapacityArrayOutput) ToGetMetalFacilityCapacityArrayOutput() GetMetalFacilityCapacityArrayOutput {
	return o
}

func (o GetMetalFacilityCapacityArrayOutput) ToGetMetalFacilityCapacityArrayOutputWithContext(ctx context.Context) GetMetalFacilityCapacityArrayOutput {
	return o
}

func (o GetMetalFacilityCapacityArrayOutput) Index(i pulumi.IntInput) GetMetalFacilityCapacityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalFacilityCapacity {
		return vs[0].([]GetMetalFacilityCapacity)[vs[1].(int)]
	}).(GetMetalFacilityCapacityOutput)
}

type GetMetalMetroCapacity struct {
	// Device plan that must be available in selected location.
	Plan string `pulumi:"plan"`
	// Minimun number of devices that must be available in selected location.
	// Default is `1`.
	Quantity *int `pulumi:"quantity"`
}

// GetMetalMetroCapacityInput is an input type that accepts GetMetalMetroCapacityArgs and GetMetalMetroCapacityOutput values.
// You can construct a concrete instance of `GetMetalMetroCapacityInput` via:
//
//          GetMetalMetroCapacityArgs{...}
type GetMetalMetroCapacityInput interface {
	pulumi.Input

	ToGetMetalMetroCapacityOutput() GetMetalMetroCapacityOutput
	ToGetMetalMetroCapacityOutputWithContext(context.Context) GetMetalMetroCapacityOutput
}

type GetMetalMetroCapacityArgs struct {
	// Device plan that must be available in selected location.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Minimun number of devices that must be available in selected location.
	// Default is `1`.
	Quantity pulumi.IntPtrInput `pulumi:"quantity"`
}

func (GetMetalMetroCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalMetroCapacity)(nil)).Elem()
}

func (i GetMetalMetroCapacityArgs) ToGetMetalMetroCapacityOutput() GetMetalMetroCapacityOutput {
	return i.ToGetMetalMetroCapacityOutputWithContext(context.Background())
}

func (i GetMetalMetroCapacityArgs) ToGetMetalMetroCapacityOutputWithContext(ctx context.Context) GetMetalMetroCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalMetroCapacityOutput)
}

// GetMetalMetroCapacityArrayInput is an input type that accepts GetMetalMetroCapacityArray and GetMetalMetroCapacityArrayOutput values.
// You can construct a concrete instance of `GetMetalMetroCapacityArrayInput` via:
//
//          GetMetalMetroCapacityArray{ GetMetalMetroCapacityArgs{...} }
type GetMetalMetroCapacityArrayInput interface {
	pulumi.Input

	ToGetMetalMetroCapacityArrayOutput() GetMetalMetroCapacityArrayOutput
	ToGetMetalMetroCapacityArrayOutputWithContext(context.Context) GetMetalMetroCapacityArrayOutput
}

type GetMetalMetroCapacityArray []GetMetalMetroCapacityInput

func (GetMetalMetroCapacityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalMetroCapacity)(nil)).Elem()
}

func (i GetMetalMetroCapacityArray) ToGetMetalMetroCapacityArrayOutput() GetMetalMetroCapacityArrayOutput {
	return i.ToGetMetalMetroCapacityArrayOutputWithContext(context.Background())
}

func (i GetMetalMetroCapacityArray) ToGetMetalMetroCapacityArrayOutputWithContext(ctx context.Context) GetMetalMetroCapacityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalMetroCapacityArrayOutput)
}

type GetMetalMetroCapacityOutput struct{ *pulumi.OutputState }

func (GetMetalMetroCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalMetroCapacity)(nil)).Elem()
}

func (o GetMetalMetroCapacityOutput) ToGetMetalMetroCapacityOutput() GetMetalMetroCapacityOutput {
	return o
}

func (o GetMetalMetroCapacityOutput) ToGetMetalMetroCapacityOutputWithContext(ctx context.Context) GetMetalMetroCapacityOutput {
	return o
}

// Device plan that must be available in selected location.
func (o GetMetalMetroCapacityOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalMetroCapacity) string { return v.Plan }).(pulumi.StringOutput)
}

// Minimun number of devices that must be available in selected location.
// Default is `1`.
func (o GetMetalMetroCapacityOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetMetalMetroCapacity) *int { return v.Quantity }).(pulumi.IntPtrOutput)
}

type GetMetalMetroCapacityArrayOutput struct{ *pulumi.OutputState }

func (GetMetalMetroCapacityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalMetroCapacity)(nil)).Elem()
}

func (o GetMetalMetroCapacityArrayOutput) ToGetMetalMetroCapacityArrayOutput() GetMetalMetroCapacityArrayOutput {
	return o
}

func (o GetMetalMetroCapacityArrayOutput) ToGetMetalMetroCapacityArrayOutputWithContext(ctx context.Context) GetMetalMetroCapacityArrayOutput {
	return o
}

func (o GetMetalMetroCapacityArrayOutput) Index(i pulumi.IntInput) GetMetalMetroCapacityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalMetroCapacity {
		return vs[0].([]GetMetalMetroCapacity)[vs[1].(int)]
	}).(GetMetalMetroCapacityOutput)
}

type GetMetalOrganizationAddress struct {
	// Postal address.
	Address string `pulumi:"address"`
	// City name.
	City string `pulumi:"city"`
	// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
	Country string `pulumi:"country"`
	// State name.
	State string `pulumi:"state"`
	// Zip Code.
	ZipCode string `pulumi:"zipCode"`
}

// GetMetalOrganizationAddressInput is an input type that accepts GetMetalOrganizationAddressArgs and GetMetalOrganizationAddressOutput values.
// You can construct a concrete instance of `GetMetalOrganizationAddressInput` via:
//
//          GetMetalOrganizationAddressArgs{...}
type GetMetalOrganizationAddressInput interface {
	pulumi.Input

	ToGetMetalOrganizationAddressOutput() GetMetalOrganizationAddressOutput
	ToGetMetalOrganizationAddressOutputWithContext(context.Context) GetMetalOrganizationAddressOutput
}

type GetMetalOrganizationAddressArgs struct {
	// Postal address.
	Address pulumi.StringInput `pulumi:"address"`
	// City name.
	City pulumi.StringInput `pulumi:"city"`
	// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
	Country pulumi.StringInput `pulumi:"country"`
	// State name.
	State pulumi.StringInput `pulumi:"state"`
	// Zip Code.
	ZipCode pulumi.StringInput `pulumi:"zipCode"`
}

func (GetMetalOrganizationAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalOrganizationAddress)(nil)).Elem()
}

func (i GetMetalOrganizationAddressArgs) ToGetMetalOrganizationAddressOutput() GetMetalOrganizationAddressOutput {
	return i.ToGetMetalOrganizationAddressOutputWithContext(context.Background())
}

func (i GetMetalOrganizationAddressArgs) ToGetMetalOrganizationAddressOutputWithContext(ctx context.Context) GetMetalOrganizationAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalOrganizationAddressOutput)
}

// GetMetalOrganizationAddressArrayInput is an input type that accepts GetMetalOrganizationAddressArray and GetMetalOrganizationAddressArrayOutput values.
// You can construct a concrete instance of `GetMetalOrganizationAddressArrayInput` via:
//
//          GetMetalOrganizationAddressArray{ GetMetalOrganizationAddressArgs{...} }
type GetMetalOrganizationAddressArrayInput interface {
	pulumi.Input

	ToGetMetalOrganizationAddressArrayOutput() GetMetalOrganizationAddressArrayOutput
	ToGetMetalOrganizationAddressArrayOutputWithContext(context.Context) GetMetalOrganizationAddressArrayOutput
}

type GetMetalOrganizationAddressArray []GetMetalOrganizationAddressInput

func (GetMetalOrganizationAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalOrganizationAddress)(nil)).Elem()
}

func (i GetMetalOrganizationAddressArray) ToGetMetalOrganizationAddressArrayOutput() GetMetalOrganizationAddressArrayOutput {
	return i.ToGetMetalOrganizationAddressArrayOutputWithContext(context.Background())
}

func (i GetMetalOrganizationAddressArray) ToGetMetalOrganizationAddressArrayOutputWithContext(ctx context.Context) GetMetalOrganizationAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalOrganizationAddressArrayOutput)
}

type GetMetalOrganizationAddressOutput struct{ *pulumi.OutputState }

func (GetMetalOrganizationAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalOrganizationAddress)(nil)).Elem()
}

func (o GetMetalOrganizationAddressOutput) ToGetMetalOrganizationAddressOutput() GetMetalOrganizationAddressOutput {
	return o
}

func (o GetMetalOrganizationAddressOutput) ToGetMetalOrganizationAddressOutputWithContext(ctx context.Context) GetMetalOrganizationAddressOutput {
	return o
}

// Postal address.
func (o GetMetalOrganizationAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalOrganizationAddress) string { return v.Address }).(pulumi.StringOutput)
}

// City name.
func (o GetMetalOrganizationAddressOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalOrganizationAddress) string { return v.City }).(pulumi.StringOutput)
}

// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
func (o GetMetalOrganizationAddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalOrganizationAddress) string { return v.Country }).(pulumi.StringOutput)
}

// State name.
func (o GetMetalOrganizationAddressOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalOrganizationAddress) string { return v.State }).(pulumi.StringOutput)
}

// Zip Code.
func (o GetMetalOrganizationAddressOutput) ZipCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalOrganizationAddress) string { return v.ZipCode }).(pulumi.StringOutput)
}

type GetMetalOrganizationAddressArrayOutput struct{ *pulumi.OutputState }

func (GetMetalOrganizationAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalOrganizationAddress)(nil)).Elem()
}

func (o GetMetalOrganizationAddressArrayOutput) ToGetMetalOrganizationAddressArrayOutput() GetMetalOrganizationAddressArrayOutput {
	return o
}

func (o GetMetalOrganizationAddressArrayOutput) ToGetMetalOrganizationAddressArrayOutputWithContext(ctx context.Context) GetMetalOrganizationAddressArrayOutput {
	return o
}

func (o GetMetalOrganizationAddressArrayOutput) Index(i pulumi.IntInput) GetMetalOrganizationAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalOrganizationAddress {
		return vs[0].([]GetMetalOrganizationAddress)[vs[1].(int)]
	}).(GetMetalOrganizationAddressOutput)
}

type GetMetalPlansFilter struct {
	// If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
	All *bool `pulumi:"all"`
	// The attribute used to filter. Filter attributes are case-sensitive
	Attribute string `pulumi:"attribute"`
	// The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
	MatchBy *string `pulumi:"matchBy"`
	// The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
	Values []string `pulumi:"values"`
}

// GetMetalPlansFilterInput is an input type that accepts GetMetalPlansFilterArgs and GetMetalPlansFilterOutput values.
// You can construct a concrete instance of `GetMetalPlansFilterInput` via:
//
//          GetMetalPlansFilterArgs{...}
type GetMetalPlansFilterInput interface {
	pulumi.Input

	ToGetMetalPlansFilterOutput() GetMetalPlansFilterOutput
	ToGetMetalPlansFilterOutputWithContext(context.Context) GetMetalPlansFilterOutput
}

type GetMetalPlansFilterArgs struct {
	// If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// The attribute used to filter. Filter attributes are case-sensitive
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
	MatchBy pulumi.StringPtrInput `pulumi:"matchBy"`
	// The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetMetalPlansFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalPlansFilter)(nil)).Elem()
}

func (i GetMetalPlansFilterArgs) ToGetMetalPlansFilterOutput() GetMetalPlansFilterOutput {
	return i.ToGetMetalPlansFilterOutputWithContext(context.Background())
}

func (i GetMetalPlansFilterArgs) ToGetMetalPlansFilterOutputWithContext(ctx context.Context) GetMetalPlansFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalPlansFilterOutput)
}

// GetMetalPlansFilterArrayInput is an input type that accepts GetMetalPlansFilterArray and GetMetalPlansFilterArrayOutput values.
// You can construct a concrete instance of `GetMetalPlansFilterArrayInput` via:
//
//          GetMetalPlansFilterArray{ GetMetalPlansFilterArgs{...} }
type GetMetalPlansFilterArrayInput interface {
	pulumi.Input

	ToGetMetalPlansFilterArrayOutput() GetMetalPlansFilterArrayOutput
	ToGetMetalPlansFilterArrayOutputWithContext(context.Context) GetMetalPlansFilterArrayOutput
}

type GetMetalPlansFilterArray []GetMetalPlansFilterInput

func (GetMetalPlansFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalPlansFilter)(nil)).Elem()
}

func (i GetMetalPlansFilterArray) ToGetMetalPlansFilterArrayOutput() GetMetalPlansFilterArrayOutput {
	return i.ToGetMetalPlansFilterArrayOutputWithContext(context.Background())
}

func (i GetMetalPlansFilterArray) ToGetMetalPlansFilterArrayOutputWithContext(ctx context.Context) GetMetalPlansFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalPlansFilterArrayOutput)
}

type GetMetalPlansFilterOutput struct{ *pulumi.OutputState }

func (GetMetalPlansFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalPlansFilter)(nil)).Elem()
}

func (o GetMetalPlansFilterOutput) ToGetMetalPlansFilterOutput() GetMetalPlansFilterOutput {
	return o
}

func (o GetMetalPlansFilterOutput) ToGetMetalPlansFilterOutputWithContext(ctx context.Context) GetMetalPlansFilterOutput {
	return o
}

// If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
func (o GetMetalPlansFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMetalPlansFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// The attribute used to filter. Filter attributes are case-sensitive
func (o GetMetalPlansFilterOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansFilter) string { return v.Attribute }).(pulumi.StringOutput)
}

// The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
func (o GetMetalPlansFilterOutput) MatchBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetalPlansFilter) *string { return v.MatchBy }).(pulumi.StringPtrOutput)
}

// The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
func (o GetMetalPlansFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalPlansFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetMetalPlansFilterArrayOutput struct{ *pulumi.OutputState }

func (GetMetalPlansFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalPlansFilter)(nil)).Elem()
}

func (o GetMetalPlansFilterArrayOutput) ToGetMetalPlansFilterArrayOutput() GetMetalPlansFilterArrayOutput {
	return o
}

func (o GetMetalPlansFilterArrayOutput) ToGetMetalPlansFilterArrayOutputWithContext(ctx context.Context) GetMetalPlansFilterArrayOutput {
	return o
}

func (o GetMetalPlansFilterArrayOutput) Index(i pulumi.IntInput) GetMetalPlansFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalPlansFilter {
		return vs[0].([]GetMetalPlansFilter)[vs[1].(int)]
	}).(GetMetalPlansFilterOutput)
}

type GetMetalPlansPlan struct {
	AvailableInMetros []string `pulumi:"availableInMetros"`
	AvailableIns      []string `pulumi:"availableIns"`
	Class             string   `pulumi:"class"`
	DeploymentTypes   []string `pulumi:"deploymentTypes"`
	Description       string   `pulumi:"description"`
	// id of the plan
	Id     string `pulumi:"id"`
	Legacy bool   `pulumi:"legacy"`
	Line   string `pulumi:"line"`
	// name of the plan
	// - `slug`- plan slug
	// - `description`- description of the plan
	// - `line`- plan line, e.g. baremetal
	// - `legacy`- flag showing if it's a legacy plan
	// - `class`- plan class
	// - `pricingHour`- plan hourly price
	// - `pricingMonth`- plan monthly price
	// - `deploymentTypes`- list of deployment types, e.g. on_demand, spotMarket
	// - `availableIn`- list of facilities where the plan is available
	// - `availableInMetros`- list of facilities where the plan is available
	Name         string  `pulumi:"name"`
	PricingHour  float64 `pulumi:"pricingHour"`
	PricingMonth float64 `pulumi:"pricingMonth"`
	Slug         string  `pulumi:"slug"`
}

// GetMetalPlansPlanInput is an input type that accepts GetMetalPlansPlanArgs and GetMetalPlansPlanOutput values.
// You can construct a concrete instance of `GetMetalPlansPlanInput` via:
//
//          GetMetalPlansPlanArgs{...}
type GetMetalPlansPlanInput interface {
	pulumi.Input

	ToGetMetalPlansPlanOutput() GetMetalPlansPlanOutput
	ToGetMetalPlansPlanOutputWithContext(context.Context) GetMetalPlansPlanOutput
}

type GetMetalPlansPlanArgs struct {
	AvailableInMetros pulumi.StringArrayInput `pulumi:"availableInMetros"`
	AvailableIns      pulumi.StringArrayInput `pulumi:"availableIns"`
	Class             pulumi.StringInput      `pulumi:"class"`
	DeploymentTypes   pulumi.StringArrayInput `pulumi:"deploymentTypes"`
	Description       pulumi.StringInput      `pulumi:"description"`
	// id of the plan
	Id     pulumi.StringInput `pulumi:"id"`
	Legacy pulumi.BoolInput   `pulumi:"legacy"`
	Line   pulumi.StringInput `pulumi:"line"`
	// name of the plan
	// - `slug`- plan slug
	// - `description`- description of the plan
	// - `line`- plan line, e.g. baremetal
	// - `legacy`- flag showing if it's a legacy plan
	// - `class`- plan class
	// - `pricingHour`- plan hourly price
	// - `pricingMonth`- plan monthly price
	// - `deploymentTypes`- list of deployment types, e.g. on_demand, spotMarket
	// - `availableIn`- list of facilities where the plan is available
	// - `availableInMetros`- list of facilities where the plan is available
	Name         pulumi.StringInput  `pulumi:"name"`
	PricingHour  pulumi.Float64Input `pulumi:"pricingHour"`
	PricingMonth pulumi.Float64Input `pulumi:"pricingMonth"`
	Slug         pulumi.StringInput  `pulumi:"slug"`
}

func (GetMetalPlansPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalPlansPlan)(nil)).Elem()
}

func (i GetMetalPlansPlanArgs) ToGetMetalPlansPlanOutput() GetMetalPlansPlanOutput {
	return i.ToGetMetalPlansPlanOutputWithContext(context.Background())
}

func (i GetMetalPlansPlanArgs) ToGetMetalPlansPlanOutputWithContext(ctx context.Context) GetMetalPlansPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalPlansPlanOutput)
}

// GetMetalPlansPlanArrayInput is an input type that accepts GetMetalPlansPlanArray and GetMetalPlansPlanArrayOutput values.
// You can construct a concrete instance of `GetMetalPlansPlanArrayInput` via:
//
//          GetMetalPlansPlanArray{ GetMetalPlansPlanArgs{...} }
type GetMetalPlansPlanArrayInput interface {
	pulumi.Input

	ToGetMetalPlansPlanArrayOutput() GetMetalPlansPlanArrayOutput
	ToGetMetalPlansPlanArrayOutputWithContext(context.Context) GetMetalPlansPlanArrayOutput
}

type GetMetalPlansPlanArray []GetMetalPlansPlanInput

func (GetMetalPlansPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalPlansPlan)(nil)).Elem()
}

func (i GetMetalPlansPlanArray) ToGetMetalPlansPlanArrayOutput() GetMetalPlansPlanArrayOutput {
	return i.ToGetMetalPlansPlanArrayOutputWithContext(context.Background())
}

func (i GetMetalPlansPlanArray) ToGetMetalPlansPlanArrayOutputWithContext(ctx context.Context) GetMetalPlansPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalPlansPlanArrayOutput)
}

type GetMetalPlansPlanOutput struct{ *pulumi.OutputState }

func (GetMetalPlansPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalPlansPlan)(nil)).Elem()
}

func (o GetMetalPlansPlanOutput) ToGetMetalPlansPlanOutput() GetMetalPlansPlanOutput {
	return o
}

func (o GetMetalPlansPlanOutput) ToGetMetalPlansPlanOutputWithContext(ctx context.Context) GetMetalPlansPlanOutput {
	return o
}

func (o GetMetalPlansPlanOutput) AvailableInMetros() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) []string { return v.AvailableInMetros }).(pulumi.StringArrayOutput)
}

func (o GetMetalPlansPlanOutput) AvailableIns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) []string { return v.AvailableIns }).(pulumi.StringArrayOutput)
}

func (o GetMetalPlansPlanOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) string { return v.Class }).(pulumi.StringOutput)
}

func (o GetMetalPlansPlanOutput) DeploymentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) []string { return v.DeploymentTypes }).(pulumi.StringArrayOutput)
}

func (o GetMetalPlansPlanOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) string { return v.Description }).(pulumi.StringOutput)
}

// id of the plan
func (o GetMetalPlansPlanOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMetalPlansPlanOutput) Legacy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) bool { return v.Legacy }).(pulumi.BoolOutput)
}

func (o GetMetalPlansPlanOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) string { return v.Line }).(pulumi.StringOutput)
}

// name of the plan
// - `slug`- plan slug
// - `description`- description of the plan
// - `line`- plan line, e.g. baremetal
// - `legacy`- flag showing if it's a legacy plan
// - `class`- plan class
// - `pricingHour`- plan hourly price
// - `pricingMonth`- plan monthly price
// - `deploymentTypes`- list of deployment types, e.g. on_demand, spotMarket
// - `availableIn`- list of facilities where the plan is available
// - `availableInMetros`- list of facilities where the plan is available
func (o GetMetalPlansPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMetalPlansPlanOutput) PricingHour() pulumi.Float64Output {
	return o.ApplyT(func(v GetMetalPlansPlan) float64 { return v.PricingHour }).(pulumi.Float64Output)
}

func (o GetMetalPlansPlanOutput) PricingMonth() pulumi.Float64Output {
	return o.ApplyT(func(v GetMetalPlansPlan) float64 { return v.PricingMonth }).(pulumi.Float64Output)
}

func (o GetMetalPlansPlanOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansPlan) string { return v.Slug }).(pulumi.StringOutput)
}

type GetMetalPlansPlanArrayOutput struct{ *pulumi.OutputState }

func (GetMetalPlansPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalPlansPlan)(nil)).Elem()
}

func (o GetMetalPlansPlanArrayOutput) ToGetMetalPlansPlanArrayOutput() GetMetalPlansPlanArrayOutput {
	return o
}

func (o GetMetalPlansPlanArrayOutput) ToGetMetalPlansPlanArrayOutputWithContext(ctx context.Context) GetMetalPlansPlanArrayOutput {
	return o
}

func (o GetMetalPlansPlanArrayOutput) Index(i pulumi.IntInput) GetMetalPlansPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalPlansPlan {
		return vs[0].([]GetMetalPlansPlan)[vs[1].(int)]
	}).(GetMetalPlansPlanOutput)
}

type GetMetalPlansSort struct {
	// The attribute used to filter. Filter attributes are case-sensitive
	Attribute string `pulumi:"attribute"`
	// Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
	Direction *string `pulumi:"direction"`
}

// GetMetalPlansSortInput is an input type that accepts GetMetalPlansSortArgs and GetMetalPlansSortOutput values.
// You can construct a concrete instance of `GetMetalPlansSortInput` via:
//
//          GetMetalPlansSortArgs{...}
type GetMetalPlansSortInput interface {
	pulumi.Input

	ToGetMetalPlansSortOutput() GetMetalPlansSortOutput
	ToGetMetalPlansSortOutputWithContext(context.Context) GetMetalPlansSortOutput
}

type GetMetalPlansSortArgs struct {
	// The attribute used to filter. Filter attributes are case-sensitive
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
	Direction pulumi.StringPtrInput `pulumi:"direction"`
}

func (GetMetalPlansSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalPlansSort)(nil)).Elem()
}

func (i GetMetalPlansSortArgs) ToGetMetalPlansSortOutput() GetMetalPlansSortOutput {
	return i.ToGetMetalPlansSortOutputWithContext(context.Background())
}

func (i GetMetalPlansSortArgs) ToGetMetalPlansSortOutputWithContext(ctx context.Context) GetMetalPlansSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalPlansSortOutput)
}

// GetMetalPlansSortArrayInput is an input type that accepts GetMetalPlansSortArray and GetMetalPlansSortArrayOutput values.
// You can construct a concrete instance of `GetMetalPlansSortArrayInput` via:
//
//          GetMetalPlansSortArray{ GetMetalPlansSortArgs{...} }
type GetMetalPlansSortArrayInput interface {
	pulumi.Input

	ToGetMetalPlansSortArrayOutput() GetMetalPlansSortArrayOutput
	ToGetMetalPlansSortArrayOutputWithContext(context.Context) GetMetalPlansSortArrayOutput
}

type GetMetalPlansSortArray []GetMetalPlansSortInput

func (GetMetalPlansSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalPlansSort)(nil)).Elem()
}

func (i GetMetalPlansSortArray) ToGetMetalPlansSortArrayOutput() GetMetalPlansSortArrayOutput {
	return i.ToGetMetalPlansSortArrayOutputWithContext(context.Background())
}

func (i GetMetalPlansSortArray) ToGetMetalPlansSortArrayOutputWithContext(ctx context.Context) GetMetalPlansSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalPlansSortArrayOutput)
}

type GetMetalPlansSortOutput struct{ *pulumi.OutputState }

func (GetMetalPlansSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalPlansSort)(nil)).Elem()
}

func (o GetMetalPlansSortOutput) ToGetMetalPlansSortOutput() GetMetalPlansSortOutput {
	return o
}

func (o GetMetalPlansSortOutput) ToGetMetalPlansSortOutputWithContext(ctx context.Context) GetMetalPlansSortOutput {
	return o
}

// The attribute used to filter. Filter attributes are case-sensitive
func (o GetMetalPlansSortOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalPlansSort) string { return v.Attribute }).(pulumi.StringOutput)
}

// Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
func (o GetMetalPlansSortOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetalPlansSort) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

type GetMetalPlansSortArrayOutput struct{ *pulumi.OutputState }

func (GetMetalPlansSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalPlansSort)(nil)).Elem()
}

func (o GetMetalPlansSortArrayOutput) ToGetMetalPlansSortArrayOutput() GetMetalPlansSortArrayOutput {
	return o
}

func (o GetMetalPlansSortArrayOutput) ToGetMetalPlansSortArrayOutputWithContext(ctx context.Context) GetMetalPlansSortArrayOutput {
	return o
}

func (o GetMetalPlansSortArrayOutput) Index(i pulumi.IntInput) GetMetalPlansSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalPlansSort {
		return vs[0].([]GetMetalPlansSort)[vs[1].(int)]
	}).(GetMetalPlansSortOutput)
}

type GetMetalProjectBgpConfig struct {
	// Autonomous System Number for local BGP deployment.
	Asn int `pulumi:"asn"`
	// One of `private`, `public`.
	DeploymentType string `pulumi:"deploymentType"`
	// The maximum number of route filters allowed per server.
	MaxPrefix int `pulumi:"maxPrefix"`
	// Password for BGP session in plaintext (not a checksum).
	Md5 *string `pulumi:"md5"`
	// Status of BGP configuration in the project.
	Status string `pulumi:"status"`
}

// GetMetalProjectBgpConfigInput is an input type that accepts GetMetalProjectBgpConfigArgs and GetMetalProjectBgpConfigOutput values.
// You can construct a concrete instance of `GetMetalProjectBgpConfigInput` via:
//
//          GetMetalProjectBgpConfigArgs{...}
type GetMetalProjectBgpConfigInput interface {
	pulumi.Input

	ToGetMetalProjectBgpConfigOutput() GetMetalProjectBgpConfigOutput
	ToGetMetalProjectBgpConfigOutputWithContext(context.Context) GetMetalProjectBgpConfigOutput
}

type GetMetalProjectBgpConfigArgs struct {
	// Autonomous System Number for local BGP deployment.
	Asn pulumi.IntInput `pulumi:"asn"`
	// One of `private`, `public`.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The maximum number of route filters allowed per server.
	MaxPrefix pulumi.IntInput `pulumi:"maxPrefix"`
	// Password for BGP session in plaintext (not a checksum).
	Md5 pulumi.StringPtrInput `pulumi:"md5"`
	// Status of BGP configuration in the project.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetMetalProjectBgpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalProjectBgpConfig)(nil)).Elem()
}

func (i GetMetalProjectBgpConfigArgs) ToGetMetalProjectBgpConfigOutput() GetMetalProjectBgpConfigOutput {
	return i.ToGetMetalProjectBgpConfigOutputWithContext(context.Background())
}

func (i GetMetalProjectBgpConfigArgs) ToGetMetalProjectBgpConfigOutputWithContext(ctx context.Context) GetMetalProjectBgpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalProjectBgpConfigOutput)
}

// GetMetalProjectBgpConfigArrayInput is an input type that accepts GetMetalProjectBgpConfigArray and GetMetalProjectBgpConfigArrayOutput values.
// You can construct a concrete instance of `GetMetalProjectBgpConfigArrayInput` via:
//
//          GetMetalProjectBgpConfigArray{ GetMetalProjectBgpConfigArgs{...} }
type GetMetalProjectBgpConfigArrayInput interface {
	pulumi.Input

	ToGetMetalProjectBgpConfigArrayOutput() GetMetalProjectBgpConfigArrayOutput
	ToGetMetalProjectBgpConfigArrayOutputWithContext(context.Context) GetMetalProjectBgpConfigArrayOutput
}

type GetMetalProjectBgpConfigArray []GetMetalProjectBgpConfigInput

func (GetMetalProjectBgpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalProjectBgpConfig)(nil)).Elem()
}

func (i GetMetalProjectBgpConfigArray) ToGetMetalProjectBgpConfigArrayOutput() GetMetalProjectBgpConfigArrayOutput {
	return i.ToGetMetalProjectBgpConfigArrayOutputWithContext(context.Background())
}

func (i GetMetalProjectBgpConfigArray) ToGetMetalProjectBgpConfigArrayOutputWithContext(ctx context.Context) GetMetalProjectBgpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetalProjectBgpConfigArrayOutput)
}

type GetMetalProjectBgpConfigOutput struct{ *pulumi.OutputState }

func (GetMetalProjectBgpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetalProjectBgpConfig)(nil)).Elem()
}

func (o GetMetalProjectBgpConfigOutput) ToGetMetalProjectBgpConfigOutput() GetMetalProjectBgpConfigOutput {
	return o
}

func (o GetMetalProjectBgpConfigOutput) ToGetMetalProjectBgpConfigOutputWithContext(ctx context.Context) GetMetalProjectBgpConfigOutput {
	return o
}

// Autonomous System Number for local BGP deployment.
func (o GetMetalProjectBgpConfigOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalProjectBgpConfig) int { return v.Asn }).(pulumi.IntOutput)
}

// One of `private`, `public`.
func (o GetMetalProjectBgpConfigOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalProjectBgpConfig) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The maximum number of route filters allowed per server.
func (o GetMetalProjectBgpConfigOutput) MaxPrefix() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetalProjectBgpConfig) int { return v.MaxPrefix }).(pulumi.IntOutput)
}

// Password for BGP session in plaintext (not a checksum).
func (o GetMetalProjectBgpConfigOutput) Md5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetalProjectBgpConfig) *string { return v.Md5 }).(pulumi.StringPtrOutput)
}

// Status of BGP configuration in the project.
func (o GetMetalProjectBgpConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetalProjectBgpConfig) string { return v.Status }).(pulumi.StringOutput)
}

type GetMetalProjectBgpConfigArrayOutput struct{ *pulumi.OutputState }

func (GetMetalProjectBgpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetalProjectBgpConfig)(nil)).Elem()
}

func (o GetMetalProjectBgpConfigArrayOutput) ToGetMetalProjectBgpConfigArrayOutput() GetMetalProjectBgpConfigArrayOutput {
	return o
}

func (o GetMetalProjectBgpConfigArrayOutput) ToGetMetalProjectBgpConfigArrayOutputWithContext(ctx context.Context) GetMetalProjectBgpConfigArrayOutput {
	return o
}

func (o GetMetalProjectBgpConfigArrayOutput) Index(i pulumi.IntInput) GetMetalProjectBgpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetalProjectBgpConfig {
		return vs[0].([]GetMetalProjectBgpConfig)[vs[1].(int)]
	}).(GetMetalProjectBgpConfigOutput)
}

type GetNetworkDeviceClusterDetail struct {
	// The id of the cluster
	ClusterId   string                               `pulumi:"clusterId"`
	ClusterName string                               `pulumi:"clusterName"`
	Node0s      []GetNetworkDeviceClusterDetailNode0 `pulumi:"node0s"`
	Node1s      []GetNetworkDeviceClusterDetailNode1 `pulumi:"node1s"`
	// The number of nodes in the cluster
	NumOfNodes int `pulumi:"numOfNodes"`
}

// GetNetworkDeviceClusterDetailInput is an input type that accepts GetNetworkDeviceClusterDetailArgs and GetNetworkDeviceClusterDetailOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailInput` via:
//
//          GetNetworkDeviceClusterDetailArgs{...}
type GetNetworkDeviceClusterDetailInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailOutput() GetNetworkDeviceClusterDetailOutput
	ToGetNetworkDeviceClusterDetailOutputWithContext(context.Context) GetNetworkDeviceClusterDetailOutput
}

type GetNetworkDeviceClusterDetailArgs struct {
	// The id of the cluster
	ClusterId   pulumi.StringInput                           `pulumi:"clusterId"`
	ClusterName pulumi.StringInput                           `pulumi:"clusterName"`
	Node0s      GetNetworkDeviceClusterDetailNode0ArrayInput `pulumi:"node0s"`
	Node1s      GetNetworkDeviceClusterDetailNode1ArrayInput `pulumi:"node1s"`
	// The number of nodes in the cluster
	NumOfNodes pulumi.IntInput `pulumi:"numOfNodes"`
}

func (GetNetworkDeviceClusterDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetail)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailArgs) ToGetNetworkDeviceClusterDetailOutput() GetNetworkDeviceClusterDetailOutput {
	return i.ToGetNetworkDeviceClusterDetailOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailArgs) ToGetNetworkDeviceClusterDetailOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailOutput)
}

// GetNetworkDeviceClusterDetailArrayInput is an input type that accepts GetNetworkDeviceClusterDetailArray and GetNetworkDeviceClusterDetailArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailArrayInput` via:
//
//          GetNetworkDeviceClusterDetailArray{ GetNetworkDeviceClusterDetailArgs{...} }
type GetNetworkDeviceClusterDetailArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailArrayOutput() GetNetworkDeviceClusterDetailArrayOutput
	ToGetNetworkDeviceClusterDetailArrayOutputWithContext(context.Context) GetNetworkDeviceClusterDetailArrayOutput
}

type GetNetworkDeviceClusterDetailArray []GetNetworkDeviceClusterDetailInput

func (GetNetworkDeviceClusterDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetail)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailArray) ToGetNetworkDeviceClusterDetailArrayOutput() GetNetworkDeviceClusterDetailArrayOutput {
	return i.ToGetNetworkDeviceClusterDetailArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailArray) ToGetNetworkDeviceClusterDetailArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailArrayOutput)
}

type GetNetworkDeviceClusterDetailOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetail)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailOutput) ToGetNetworkDeviceClusterDetailOutput() GetNetworkDeviceClusterDetailOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailOutput) ToGetNetworkDeviceClusterDetailOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailOutput {
	return o
}

// The id of the cluster
func (o GetNetworkDeviceClusterDetailOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetail) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetail) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailOutput) Node0s() GetNetworkDeviceClusterDetailNode0ArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetail) []GetNetworkDeviceClusterDetailNode0 { return v.Node0s }).(GetNetworkDeviceClusterDetailNode0ArrayOutput)
}

func (o GetNetworkDeviceClusterDetailOutput) Node1s() GetNetworkDeviceClusterDetailNode1ArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetail) []GetNetworkDeviceClusterDetailNode1 { return v.Node1s }).(GetNetworkDeviceClusterDetailNode1ArrayOutput)
}

// The number of nodes in the cluster
func (o GetNetworkDeviceClusterDetailOutput) NumOfNodes() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetail) int { return v.NumOfNodes }).(pulumi.IntOutput)
}

type GetNetworkDeviceClusterDetailArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetail)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailArrayOutput) ToGetNetworkDeviceClusterDetailArrayOutput() GetNetworkDeviceClusterDetailArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailArrayOutput) ToGetNetworkDeviceClusterDetailArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceClusterDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceClusterDetail {
		return vs[0].([]GetNetworkDeviceClusterDetail)[vs[1].(int)]
	}).(GetNetworkDeviceClusterDetailOutput)
}

type GetNetworkDeviceClusterDetailNode0 struct {
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	LicenseToken  string `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid                 string                                                  `pulumi:"uuid"`
	VendorConfigurations []GetNetworkDeviceClusterDetailNode0VendorConfiguration `pulumi:"vendorConfigurations"`
}

// GetNetworkDeviceClusterDetailNode0Input is an input type that accepts GetNetworkDeviceClusterDetailNode0Args and GetNetworkDeviceClusterDetailNode0Output values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode0Input` via:
//
//          GetNetworkDeviceClusterDetailNode0Args{...}
type GetNetworkDeviceClusterDetailNode0Input interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode0Output() GetNetworkDeviceClusterDetailNode0Output
	ToGetNetworkDeviceClusterDetailNode0OutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode0Output
}

type GetNetworkDeviceClusterDetailNode0Args struct {
	// Unique identifier of applied license file
	LicenseFileId pulumi.StringInput `pulumi:"licenseFileId"`
	LicenseToken  pulumi.StringInput `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid                 pulumi.StringInput                                              `pulumi:"uuid"`
	VendorConfigurations GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayInput `pulumi:"vendorConfigurations"`
}

func (GetNetworkDeviceClusterDetailNode0Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode0Args) ToGetNetworkDeviceClusterDetailNode0Output() GetNetworkDeviceClusterDetailNode0Output {
	return i.ToGetNetworkDeviceClusterDetailNode0OutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode0Args) ToGetNetworkDeviceClusterDetailNode0OutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode0Output)
}

// GetNetworkDeviceClusterDetailNode0ArrayInput is an input type that accepts GetNetworkDeviceClusterDetailNode0Array and GetNetworkDeviceClusterDetailNode0ArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode0ArrayInput` via:
//
//          GetNetworkDeviceClusterDetailNode0Array{ GetNetworkDeviceClusterDetailNode0Args{...} }
type GetNetworkDeviceClusterDetailNode0ArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode0ArrayOutput() GetNetworkDeviceClusterDetailNode0ArrayOutput
	ToGetNetworkDeviceClusterDetailNode0ArrayOutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode0ArrayOutput
}

type GetNetworkDeviceClusterDetailNode0Array []GetNetworkDeviceClusterDetailNode0Input

func (GetNetworkDeviceClusterDetailNode0Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode0)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode0Array) ToGetNetworkDeviceClusterDetailNode0ArrayOutput() GetNetworkDeviceClusterDetailNode0ArrayOutput {
	return i.ToGetNetworkDeviceClusterDetailNode0ArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode0Array) ToGetNetworkDeviceClusterDetailNode0ArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode0ArrayOutput)
}

type GetNetworkDeviceClusterDetailNode0Output struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode0Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode0Output) ToGetNetworkDeviceClusterDetailNode0Output() GetNetworkDeviceClusterDetailNode0Output {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0Output) ToGetNetworkDeviceClusterDetailNode0OutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0Output {
	return o
}

// Unique identifier of applied license file
func (o GetNetworkDeviceClusterDetailNode0Output) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0Output) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0) string { return v.LicenseToken }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetNetworkDeviceClusterDetailNode0Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0) string { return v.Name }).(pulumi.StringOutput)
}

// UUID of an existing Equinix Network Edge device
func (o GetNetworkDeviceClusterDetailNode0Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0Output) VendorConfigurations() GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0) []GetNetworkDeviceClusterDetailNode0VendorConfiguration {
		return v.VendorConfigurations
	}).(GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput)
}

type GetNetworkDeviceClusterDetailNode0ArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode0ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode0)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode0ArrayOutput) ToGetNetworkDeviceClusterDetailNode0ArrayOutput() GetNetworkDeviceClusterDetailNode0ArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0ArrayOutput) ToGetNetworkDeviceClusterDetailNode0ArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0ArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0ArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceClusterDetailNode0Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceClusterDetailNode0 {
		return vs[0].([]GetNetworkDeviceClusterDetailNode0)[vs[1].(int)]
	}).(GetNetworkDeviceClusterDetailNode0Output)
}

type GetNetworkDeviceClusterDetailNode0VendorConfiguration struct {
	ActivationKey  string `pulumi:"activationKey"`
	AdminPassword  string `pulumi:"adminPassword"`
	Controller1    string `pulumi:"controller1"`
	ControllerFqdn string `pulumi:"controllerFqdn"`
	Hostname       string `pulumi:"hostname"`
	RootPassword   string `pulumi:"rootPassword"`
}

// GetNetworkDeviceClusterDetailNode0VendorConfigurationInput is an input type that accepts GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs and GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode0VendorConfigurationInput` via:
//
//          GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs{...}
type GetNetworkDeviceClusterDetailNode0VendorConfigurationInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutput() GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput
	ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput
}

type GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs struct {
	ActivationKey  pulumi.StringInput `pulumi:"activationKey"`
	AdminPassword  pulumi.StringInput `pulumi:"adminPassword"`
	Controller1    pulumi.StringInput `pulumi:"controller1"`
	ControllerFqdn pulumi.StringInput `pulumi:"controllerFqdn"`
	Hostname       pulumi.StringInput `pulumi:"hostname"`
	RootPassword   pulumi.StringInput `pulumi:"rootPassword"`
}

func (GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutput() GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput {
	return i.ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput)
}

// GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayInput is an input type that accepts GetNetworkDeviceClusterDetailNode0VendorConfigurationArray and GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayInput` via:
//
//          GetNetworkDeviceClusterDetailNode0VendorConfigurationArray{ GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs{...} }
type GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput() GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput
	ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput
}

type GetNetworkDeviceClusterDetailNode0VendorConfigurationArray []GetNetworkDeviceClusterDetailNode0VendorConfigurationInput

func (GetNetworkDeviceClusterDetailNode0VendorConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode0VendorConfigurationArray) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput() GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return i.ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode0VendorConfigurationArray) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput)
}

type GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutput() GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0VendorConfiguration) string { return v.ActivationKey }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0VendorConfiguration) string { return v.AdminPassword }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) Controller1() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0VendorConfiguration) string { return v.Controller1 }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) ControllerFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0VendorConfiguration) string { return v.ControllerFqdn }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0VendorConfiguration) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode0VendorConfiguration) string { return v.RootPassword }).(pulumi.StringOutput)
}

type GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput() GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput) ToGetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceClusterDetailNode0VendorConfiguration {
		return vs[0].([]GetNetworkDeviceClusterDetailNode0VendorConfiguration)[vs[1].(int)]
	}).(GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput)
}

type GetNetworkDeviceClusterDetailNode1 struct {
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	LicenseToken  string `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid                 string                                                  `pulumi:"uuid"`
	VendorConfigurations []GetNetworkDeviceClusterDetailNode1VendorConfiguration `pulumi:"vendorConfigurations"`
}

// GetNetworkDeviceClusterDetailNode1Input is an input type that accepts GetNetworkDeviceClusterDetailNode1Args and GetNetworkDeviceClusterDetailNode1Output values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode1Input` via:
//
//          GetNetworkDeviceClusterDetailNode1Args{...}
type GetNetworkDeviceClusterDetailNode1Input interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode1Output() GetNetworkDeviceClusterDetailNode1Output
	ToGetNetworkDeviceClusterDetailNode1OutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode1Output
}

type GetNetworkDeviceClusterDetailNode1Args struct {
	// Unique identifier of applied license file
	LicenseFileId pulumi.StringInput `pulumi:"licenseFileId"`
	LicenseToken  pulumi.StringInput `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid                 pulumi.StringInput                                              `pulumi:"uuid"`
	VendorConfigurations GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayInput `pulumi:"vendorConfigurations"`
}

func (GetNetworkDeviceClusterDetailNode1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode1Args) ToGetNetworkDeviceClusterDetailNode1Output() GetNetworkDeviceClusterDetailNode1Output {
	return i.ToGetNetworkDeviceClusterDetailNode1OutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode1Args) ToGetNetworkDeviceClusterDetailNode1OutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode1Output)
}

// GetNetworkDeviceClusterDetailNode1ArrayInput is an input type that accepts GetNetworkDeviceClusterDetailNode1Array and GetNetworkDeviceClusterDetailNode1ArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode1ArrayInput` via:
//
//          GetNetworkDeviceClusterDetailNode1Array{ GetNetworkDeviceClusterDetailNode1Args{...} }
type GetNetworkDeviceClusterDetailNode1ArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode1ArrayOutput() GetNetworkDeviceClusterDetailNode1ArrayOutput
	ToGetNetworkDeviceClusterDetailNode1ArrayOutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode1ArrayOutput
}

type GetNetworkDeviceClusterDetailNode1Array []GetNetworkDeviceClusterDetailNode1Input

func (GetNetworkDeviceClusterDetailNode1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode1)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode1Array) ToGetNetworkDeviceClusterDetailNode1ArrayOutput() GetNetworkDeviceClusterDetailNode1ArrayOutput {
	return i.ToGetNetworkDeviceClusterDetailNode1ArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode1Array) ToGetNetworkDeviceClusterDetailNode1ArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode1ArrayOutput)
}

type GetNetworkDeviceClusterDetailNode1Output struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode1Output) ToGetNetworkDeviceClusterDetailNode1Output() GetNetworkDeviceClusterDetailNode1Output {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1Output) ToGetNetworkDeviceClusterDetailNode1OutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1Output {
	return o
}

// Unique identifier of applied license file
func (o GetNetworkDeviceClusterDetailNode1Output) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1Output) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1) string { return v.LicenseToken }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetNetworkDeviceClusterDetailNode1Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1) string { return v.Name }).(pulumi.StringOutput)
}

// UUID of an existing Equinix Network Edge device
func (o GetNetworkDeviceClusterDetailNode1Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1Output) VendorConfigurations() GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1) []GetNetworkDeviceClusterDetailNode1VendorConfiguration {
		return v.VendorConfigurations
	}).(GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput)
}

type GetNetworkDeviceClusterDetailNode1ArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode1)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode1ArrayOutput) ToGetNetworkDeviceClusterDetailNode1ArrayOutput() GetNetworkDeviceClusterDetailNode1ArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1ArrayOutput) ToGetNetworkDeviceClusterDetailNode1ArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1ArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1ArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceClusterDetailNode1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceClusterDetailNode1 {
		return vs[0].([]GetNetworkDeviceClusterDetailNode1)[vs[1].(int)]
	}).(GetNetworkDeviceClusterDetailNode1Output)
}

type GetNetworkDeviceClusterDetailNode1VendorConfiguration struct {
	ActivationKey  string `pulumi:"activationKey"`
	AdminPassword  string `pulumi:"adminPassword"`
	Controller1    string `pulumi:"controller1"`
	ControllerFqdn string `pulumi:"controllerFqdn"`
	Hostname       string `pulumi:"hostname"`
	RootPassword   string `pulumi:"rootPassword"`
}

// GetNetworkDeviceClusterDetailNode1VendorConfigurationInput is an input type that accepts GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs and GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode1VendorConfigurationInput` via:
//
//          GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs{...}
type GetNetworkDeviceClusterDetailNode1VendorConfigurationInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutput() GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput
	ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput
}

type GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs struct {
	ActivationKey  pulumi.StringInput `pulumi:"activationKey"`
	AdminPassword  pulumi.StringInput `pulumi:"adminPassword"`
	Controller1    pulumi.StringInput `pulumi:"controller1"`
	ControllerFqdn pulumi.StringInput `pulumi:"controllerFqdn"`
	Hostname       pulumi.StringInput `pulumi:"hostname"`
	RootPassword   pulumi.StringInput `pulumi:"rootPassword"`
}

func (GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutput() GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput {
	return i.ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput)
}

// GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayInput is an input type that accepts GetNetworkDeviceClusterDetailNode1VendorConfigurationArray and GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayInput` via:
//
//          GetNetworkDeviceClusterDetailNode1VendorConfigurationArray{ GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs{...} }
type GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput() GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput
	ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(context.Context) GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput
}

type GetNetworkDeviceClusterDetailNode1VendorConfigurationArray []GetNetworkDeviceClusterDetailNode1VendorConfigurationInput

func (GetNetworkDeviceClusterDetailNode1VendorConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (i GetNetworkDeviceClusterDetailNode1VendorConfigurationArray) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput() GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return i.ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceClusterDetailNode1VendorConfigurationArray) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput)
}

type GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutput() GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1VendorConfiguration) string { return v.ActivationKey }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1VendorConfiguration) string { return v.AdminPassword }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) Controller1() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1VendorConfiguration) string { return v.Controller1 }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) ControllerFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1VendorConfiguration) string { return v.ControllerFqdn }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1VendorConfiguration) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceClusterDetailNode1VendorConfiguration) string { return v.RootPassword }).(pulumi.StringOutput)
}

type GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput() GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput) ToGetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(ctx context.Context) GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return o
}

func (o GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceClusterDetailNode1VendorConfiguration {
		return vs[0].([]GetNetworkDeviceClusterDetailNode1VendorConfiguration)[vs[1].(int)]
	}).(GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput)
}

type GetNetworkDeviceInterface struct {
	AssignedType string `pulumi:"assignedType"`
	Id           int    `pulumi:"id"`
	IpAddress    string `pulumi:"ipAddress"`
	MacAddress   string `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name              string `pulumi:"name"`
	OperationalStatus string `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	Status string `pulumi:"status"`
	Type   string `pulumi:"type"`
}

// GetNetworkDeviceInterfaceInput is an input type that accepts GetNetworkDeviceInterfaceArgs and GetNetworkDeviceInterfaceOutput values.
// You can construct a concrete instance of `GetNetworkDeviceInterfaceInput` via:
//
//          GetNetworkDeviceInterfaceArgs{...}
type GetNetworkDeviceInterfaceInput interface {
	pulumi.Input

	ToGetNetworkDeviceInterfaceOutput() GetNetworkDeviceInterfaceOutput
	ToGetNetworkDeviceInterfaceOutputWithContext(context.Context) GetNetworkDeviceInterfaceOutput
}

type GetNetworkDeviceInterfaceArgs struct {
	AssignedType pulumi.StringInput `pulumi:"assignedType"`
	Id           pulumi.IntInput    `pulumi:"id"`
	IpAddress    pulumi.StringInput `pulumi:"ipAddress"`
	MacAddress   pulumi.StringInput `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name              pulumi.StringInput `pulumi:"name"`
	OperationalStatus pulumi.StringInput `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	Status pulumi.StringInput `pulumi:"status"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (GetNetworkDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceInterface)(nil)).Elem()
}

func (i GetNetworkDeviceInterfaceArgs) ToGetNetworkDeviceInterfaceOutput() GetNetworkDeviceInterfaceOutput {
	return i.ToGetNetworkDeviceInterfaceOutputWithContext(context.Background())
}

func (i GetNetworkDeviceInterfaceArgs) ToGetNetworkDeviceInterfaceOutputWithContext(ctx context.Context) GetNetworkDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceInterfaceOutput)
}

// GetNetworkDeviceInterfaceArrayInput is an input type that accepts GetNetworkDeviceInterfaceArray and GetNetworkDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceInterfaceArrayInput` via:
//
//          GetNetworkDeviceInterfaceArray{ GetNetworkDeviceInterfaceArgs{...} }
type GetNetworkDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceInterfaceArrayOutput() GetNetworkDeviceInterfaceArrayOutput
	ToGetNetworkDeviceInterfaceArrayOutputWithContext(context.Context) GetNetworkDeviceInterfaceArrayOutput
}

type GetNetworkDeviceInterfaceArray []GetNetworkDeviceInterfaceInput

func (GetNetworkDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceInterface)(nil)).Elem()
}

func (i GetNetworkDeviceInterfaceArray) ToGetNetworkDeviceInterfaceArrayOutput() GetNetworkDeviceInterfaceArrayOutput {
	return i.ToGetNetworkDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceInterfaceArray) ToGetNetworkDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetNetworkDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceInterfaceArrayOutput)
}

type GetNetworkDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceInterface)(nil)).Elem()
}

func (o GetNetworkDeviceInterfaceOutput) ToGetNetworkDeviceInterfaceOutput() GetNetworkDeviceInterfaceOutput {
	return o
}

func (o GetNetworkDeviceInterfaceOutput) ToGetNetworkDeviceInterfaceOutputWithContext(ctx context.Context) GetNetworkDeviceInterfaceOutput {
	return o
}

func (o GetNetworkDeviceInterfaceOutput) AssignedType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.AssignedType }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceInterfaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetNetworkDeviceInterfaceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetNetworkDeviceInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceInterfaceOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.OperationalStatus }).(pulumi.StringOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
func (o GetNetworkDeviceInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceInterface) string { return v.Type }).(pulumi.StringOutput)
}

type GetNetworkDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceInterface)(nil)).Elem()
}

func (o GetNetworkDeviceInterfaceArrayOutput) ToGetNetworkDeviceInterfaceArrayOutput() GetNetworkDeviceInterfaceArrayOutput {
	return o
}

func (o GetNetworkDeviceInterfaceArrayOutput) ToGetNetworkDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetNetworkDeviceInterfaceArrayOutput {
	return o
}

func (o GetNetworkDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceInterface {
		return vs[0].([]GetNetworkDeviceInterface)[vs[1].(int)]
	}).(GetNetworkDeviceInterfaceOutput)
}

type GetNetworkDeviceSecondaryDevice struct {
	AccountNumber string `pulumi:"accountNumber"`
	// Unique identifier of applied ACL template
	AclTemplateId       string `pulumi:"aclTemplateId"`
	AdditionalBandwidth int    `pulumi:"additionalBandwidth"`
	// Autonomous system number
	Asn      int    `pulumi:"asn"`
	Hostname string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name
	Ibx string `pulumi:"ibx"`
	// List of device interfaces
	// * `interface.#.id` - interface identifier
	// * `interface.#.name` - interface name
	// * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
	// * `interface.#.operational_status` - interface operational status (up or down)
	// * `interface.#.mac_address` - interface MAC address
	// * `interface.#.ip_address` - interface IP address
	// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
	// * `interface.#.type` - interface type
	Interfaces  []GetNetworkDeviceSecondaryDeviceInterface `pulumi:"interfaces"`
	LicenseFile string                                     `pulumi:"licenseFile"`
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	// Device license registration status
	// * APPLYING_LICENSE
	// * REGISTERED
	// * APPLIED
	// * WAITING_FOR_CLUSTER_SETUP
	// * REGISTRATION_FAILED
	LicenseStatus       string `pulumi:"licenseStatus"`
	LicenseToken        string `pulumi:"licenseToken"`
	MetroCode           string `pulumi:"metroCode"`
	MgmtAclTemplateUuid string `pulumi:"mgmtAclTemplateUuid"`
	// Name of an existing Equinix Network Edge device
	Name          string   `pulumi:"name"`
	Notifications []string `pulumi:"notifications"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary
	RedundancyType string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices
	RedundantId string `pulumi:"redundantId"`
	// Device location region
	Region string `pulumi:"region"`
	// IP address of SSH enabled interface on the device
	SshIpAddress string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device
	SshIpFqdn string                                  `pulumi:"sshIpFqdn"`
	SshKeys   []GetNetworkDeviceSecondaryDeviceSshKey `pulumi:"sshKeys"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	Status string `pulumi:"status"`
	// UUID of an existing Equinix Network Edge device
	Uuid                string            `pulumi:"uuid"`
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	WanInterfaceId      string            `pulumi:"wanInterfaceId"`
	// Device location zone code
	ZoneCode string `pulumi:"zoneCode"`
}

// GetNetworkDeviceSecondaryDeviceInput is an input type that accepts GetNetworkDeviceSecondaryDeviceArgs and GetNetworkDeviceSecondaryDeviceOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSecondaryDeviceInput` via:
//
//          GetNetworkDeviceSecondaryDeviceArgs{...}
type GetNetworkDeviceSecondaryDeviceInput interface {
	pulumi.Input

	ToGetNetworkDeviceSecondaryDeviceOutput() GetNetworkDeviceSecondaryDeviceOutput
	ToGetNetworkDeviceSecondaryDeviceOutputWithContext(context.Context) GetNetworkDeviceSecondaryDeviceOutput
}

type GetNetworkDeviceSecondaryDeviceArgs struct {
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// Unique identifier of applied ACL template
	AclTemplateId       pulumi.StringInput `pulumi:"aclTemplateId"`
	AdditionalBandwidth pulumi.IntInput    `pulumi:"additionalBandwidth"`
	// Autonomous system number
	Asn      pulumi.IntInput    `pulumi:"asn"`
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name
	Ibx pulumi.StringInput `pulumi:"ibx"`
	// List of device interfaces
	// * `interface.#.id` - interface identifier
	// * `interface.#.name` - interface name
	// * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
	// * `interface.#.operational_status` - interface operational status (up or down)
	// * `interface.#.mac_address` - interface MAC address
	// * `interface.#.ip_address` - interface IP address
	// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
	// * `interface.#.type` - interface type
	Interfaces  GetNetworkDeviceSecondaryDeviceInterfaceArrayInput `pulumi:"interfaces"`
	LicenseFile pulumi.StringInput                                 `pulumi:"licenseFile"`
	// Unique identifier of applied license file
	LicenseFileId pulumi.StringInput `pulumi:"licenseFileId"`
	// Device license registration status
	// * APPLYING_LICENSE
	// * REGISTERED
	// * APPLIED
	// * WAITING_FOR_CLUSTER_SETUP
	// * REGISTRATION_FAILED
	LicenseStatus       pulumi.StringInput `pulumi:"licenseStatus"`
	LicenseToken        pulumi.StringInput `pulumi:"licenseToken"`
	MetroCode           pulumi.StringInput `pulumi:"metroCode"`
	MgmtAclTemplateUuid pulumi.StringInput `pulumi:"mgmtAclTemplateUuid"`
	// Name of an existing Equinix Network Edge device
	Name          pulumi.StringInput      `pulumi:"name"`
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary
	RedundancyType pulumi.StringInput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices
	RedundantId pulumi.StringInput `pulumi:"redundantId"`
	// Device location region
	Region pulumi.StringInput `pulumi:"region"`
	// IP address of SSH enabled interface on the device
	SshIpAddress pulumi.StringInput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device
	SshIpFqdn pulumi.StringInput                              `pulumi:"sshIpFqdn"`
	SshKeys   GetNetworkDeviceSecondaryDeviceSshKeyArrayInput `pulumi:"sshKeys"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	Status pulumi.StringInput `pulumi:"status"`
	// UUID of an existing Equinix Network Edge device
	Uuid                pulumi.StringInput    `pulumi:"uuid"`
	VendorConfiguration pulumi.StringMapInput `pulumi:"vendorConfiguration"`
	WanInterfaceId      pulumi.StringInput    `pulumi:"wanInterfaceId"`
	// Device location zone code
	ZoneCode pulumi.StringInput `pulumi:"zoneCode"`
}

func (GetNetworkDeviceSecondaryDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (i GetNetworkDeviceSecondaryDeviceArgs) ToGetNetworkDeviceSecondaryDeviceOutput() GetNetworkDeviceSecondaryDeviceOutput {
	return i.ToGetNetworkDeviceSecondaryDeviceOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSecondaryDeviceArgs) ToGetNetworkDeviceSecondaryDeviceOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSecondaryDeviceOutput)
}

// GetNetworkDeviceSecondaryDeviceArrayInput is an input type that accepts GetNetworkDeviceSecondaryDeviceArray and GetNetworkDeviceSecondaryDeviceArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSecondaryDeviceArrayInput` via:
//
//          GetNetworkDeviceSecondaryDeviceArray{ GetNetworkDeviceSecondaryDeviceArgs{...} }
type GetNetworkDeviceSecondaryDeviceArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceSecondaryDeviceArrayOutput() GetNetworkDeviceSecondaryDeviceArrayOutput
	ToGetNetworkDeviceSecondaryDeviceArrayOutputWithContext(context.Context) GetNetworkDeviceSecondaryDeviceArrayOutput
}

type GetNetworkDeviceSecondaryDeviceArray []GetNetworkDeviceSecondaryDeviceInput

func (GetNetworkDeviceSecondaryDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (i GetNetworkDeviceSecondaryDeviceArray) ToGetNetworkDeviceSecondaryDeviceArrayOutput() GetNetworkDeviceSecondaryDeviceArrayOutput {
	return i.ToGetNetworkDeviceSecondaryDeviceArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSecondaryDeviceArray) ToGetNetworkDeviceSecondaryDeviceArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSecondaryDeviceArrayOutput)
}

type GetNetworkDeviceSecondaryDeviceOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSecondaryDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (o GetNetworkDeviceSecondaryDeviceOutput) ToGetNetworkDeviceSecondaryDeviceOutput() GetNetworkDeviceSecondaryDeviceOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceOutput) ToGetNetworkDeviceSecondaryDeviceOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// Unique identifier of applied ACL template
func (o GetNetworkDeviceSecondaryDeviceOutput) AclTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.AclTemplateId }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) AdditionalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) int { return v.AdditionalBandwidth }).(pulumi.IntOutput)
}

// Autonomous system number
func (o GetNetworkDeviceSecondaryDeviceOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) int { return v.Asn }).(pulumi.IntOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.Hostname }).(pulumi.StringOutput)
}

// Device location Equinix Business Exchange name
func (o GetNetworkDeviceSecondaryDeviceOutput) Ibx() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.Ibx }).(pulumi.StringOutput)
}

// List of device interfaces
// * `interface.#.id` - interface identifier
// * `interface.#.name` - interface name
// * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
// * `interface.#.operational_status` - interface operational status (up or down)
// * `interface.#.mac_address` - interface MAC address
// * `interface.#.ip_address` - interface IP address
// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
// * `interface.#.type` - interface type
func (o GetNetworkDeviceSecondaryDeviceOutput) Interfaces() GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) []GetNetworkDeviceSecondaryDeviceInterface {
		return v.Interfaces
	}).(GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) LicenseFile() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.LicenseFile }).(pulumi.StringOutput)
}

// Unique identifier of applied license file
func (o GetNetworkDeviceSecondaryDeviceOutput) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

// Device license registration status
// * APPLYING_LICENSE
// * REGISTERED
// * APPLIED
// * WAITING_FOR_CLUSTER_SETUP
// * REGISTRATION_FAILED
func (o GetNetworkDeviceSecondaryDeviceOutput) LicenseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.LicenseStatus }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.LicenseToken }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.MetroCode }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) MgmtAclTemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.MgmtAclTemplateUuid }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetNetworkDeviceSecondaryDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary
func (o GetNetworkDeviceSecondaryDeviceOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier for a redundant device applicable for HA devices
func (o GetNetworkDeviceSecondaryDeviceOutput) RedundantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.RedundantId }).(pulumi.StringOutput)
}

// Device location region
func (o GetNetworkDeviceSecondaryDeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.Region }).(pulumi.StringOutput)
}

// IP address of SSH enabled interface on the device
func (o GetNetworkDeviceSecondaryDeviceOutput) SshIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.SshIpAddress }).(pulumi.StringOutput)
}

// FQDN of SSH enabled interface on the device
func (o GetNetworkDeviceSecondaryDeviceOutput) SshIpFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.SshIpFqdn }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) SshKeys() GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) []GetNetworkDeviceSecondaryDeviceSshKey { return v.SshKeys }).(GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
func (o GetNetworkDeviceSecondaryDeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.Status }).(pulumi.StringOutput)
}

// UUID of an existing Equinix Network Edge device
func (o GetNetworkDeviceSecondaryDeviceOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) map[string]string { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

func (o GetNetworkDeviceSecondaryDeviceOutput) WanInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.WanInterfaceId }).(pulumi.StringOutput)
}

// Device location zone code
func (o GetNetworkDeviceSecondaryDeviceOutput) ZoneCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDevice) string { return v.ZoneCode }).(pulumi.StringOutput)
}

type GetNetworkDeviceSecondaryDeviceArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSecondaryDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (o GetNetworkDeviceSecondaryDeviceArrayOutput) ToGetNetworkDeviceSecondaryDeviceArrayOutput() GetNetworkDeviceSecondaryDeviceArrayOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceArrayOutput) ToGetNetworkDeviceSecondaryDeviceArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceArrayOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceSecondaryDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceSecondaryDevice {
		return vs[0].([]GetNetworkDeviceSecondaryDevice)[vs[1].(int)]
	}).(GetNetworkDeviceSecondaryDeviceOutput)
}

type GetNetworkDeviceSecondaryDeviceInterface struct {
	AssignedType string `pulumi:"assignedType"`
	Id           int    `pulumi:"id"`
	IpAddress    string `pulumi:"ipAddress"`
	MacAddress   string `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name              string `pulumi:"name"`
	OperationalStatus string `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	Status string `pulumi:"status"`
	Type   string `pulumi:"type"`
}

// GetNetworkDeviceSecondaryDeviceInterfaceInput is an input type that accepts GetNetworkDeviceSecondaryDeviceInterfaceArgs and GetNetworkDeviceSecondaryDeviceInterfaceOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSecondaryDeviceInterfaceInput` via:
//
//          GetNetworkDeviceSecondaryDeviceInterfaceArgs{...}
type GetNetworkDeviceSecondaryDeviceInterfaceInput interface {
	pulumi.Input

	ToGetNetworkDeviceSecondaryDeviceInterfaceOutput() GetNetworkDeviceSecondaryDeviceInterfaceOutput
	ToGetNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(context.Context) GetNetworkDeviceSecondaryDeviceInterfaceOutput
}

type GetNetworkDeviceSecondaryDeviceInterfaceArgs struct {
	AssignedType pulumi.StringInput `pulumi:"assignedType"`
	Id           pulumi.IntInput    `pulumi:"id"`
	IpAddress    pulumi.StringInput `pulumi:"ipAddress"`
	MacAddress   pulumi.StringInput `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name              pulumi.StringInput `pulumi:"name"`
	OperationalStatus pulumi.StringInput `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	Status pulumi.StringInput `pulumi:"status"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (GetNetworkDeviceSecondaryDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i GetNetworkDeviceSecondaryDeviceInterfaceArgs) ToGetNetworkDeviceSecondaryDeviceInterfaceOutput() GetNetworkDeviceSecondaryDeviceInterfaceOutput {
	return i.ToGetNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSecondaryDeviceInterfaceArgs) ToGetNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSecondaryDeviceInterfaceOutput)
}

// GetNetworkDeviceSecondaryDeviceInterfaceArrayInput is an input type that accepts GetNetworkDeviceSecondaryDeviceInterfaceArray and GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSecondaryDeviceInterfaceArrayInput` via:
//
//          GetNetworkDeviceSecondaryDeviceInterfaceArray{ GetNetworkDeviceSecondaryDeviceInterfaceArgs{...} }
type GetNetworkDeviceSecondaryDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutput() GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput
	ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Context) GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput
}

type GetNetworkDeviceSecondaryDeviceInterfaceArray []GetNetworkDeviceSecondaryDeviceInterfaceInput

func (GetNetworkDeviceSecondaryDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i GetNetworkDeviceSecondaryDeviceInterfaceArray) ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutput() GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return i.ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSecondaryDeviceInterfaceArray) ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput)
}

type GetNetworkDeviceSecondaryDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSecondaryDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) ToGetNetworkDeviceSecondaryDeviceInterfaceOutput() GetNetworkDeviceSecondaryDeviceInterfaceOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) ToGetNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceInterfaceOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) AssignedType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.AssignedType }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.OperationalStatus }).(pulumi.StringOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceInterface) string { return v.Type }).(pulumi.StringOutput)
}

type GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput) ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutput() GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput) ToGetNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceSecondaryDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceSecondaryDeviceInterface {
		return vs[0].([]GetNetworkDeviceSecondaryDeviceInterface)[vs[1].(int)]
	}).(GetNetworkDeviceSecondaryDeviceInterfaceOutput)
}

type GetNetworkDeviceSecondaryDeviceSshKey struct {
	KeyName  string `pulumi:"keyName"`
	Username string `pulumi:"username"`
}

// GetNetworkDeviceSecondaryDeviceSshKeyInput is an input type that accepts GetNetworkDeviceSecondaryDeviceSshKeyArgs and GetNetworkDeviceSecondaryDeviceSshKeyOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSecondaryDeviceSshKeyInput` via:
//
//          GetNetworkDeviceSecondaryDeviceSshKeyArgs{...}
type GetNetworkDeviceSecondaryDeviceSshKeyInput interface {
	pulumi.Input

	ToGetNetworkDeviceSecondaryDeviceSshKeyOutput() GetNetworkDeviceSecondaryDeviceSshKeyOutput
	ToGetNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(context.Context) GetNetworkDeviceSecondaryDeviceSshKeyOutput
}

type GetNetworkDeviceSecondaryDeviceSshKeyArgs struct {
	KeyName  pulumi.StringInput `pulumi:"keyName"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetNetworkDeviceSecondaryDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i GetNetworkDeviceSecondaryDeviceSshKeyArgs) ToGetNetworkDeviceSecondaryDeviceSshKeyOutput() GetNetworkDeviceSecondaryDeviceSshKeyOutput {
	return i.ToGetNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSecondaryDeviceSshKeyArgs) ToGetNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSecondaryDeviceSshKeyOutput)
}

// GetNetworkDeviceSecondaryDeviceSshKeyArrayInput is an input type that accepts GetNetworkDeviceSecondaryDeviceSshKeyArray and GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSecondaryDeviceSshKeyArrayInput` via:
//
//          GetNetworkDeviceSecondaryDeviceSshKeyArray{ GetNetworkDeviceSecondaryDeviceSshKeyArgs{...} }
type GetNetworkDeviceSecondaryDeviceSshKeyArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutput() GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput
	ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutputWithContext(context.Context) GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput
}

type GetNetworkDeviceSecondaryDeviceSshKeyArray []GetNetworkDeviceSecondaryDeviceSshKeyInput

func (GetNetworkDeviceSecondaryDeviceSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i GetNetworkDeviceSecondaryDeviceSshKeyArray) ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutput() GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput {
	return i.ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSecondaryDeviceSshKeyArray) ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput)
}

type GetNetworkDeviceSecondaryDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSecondaryDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyOutput) ToGetNetworkDeviceSecondaryDeviceSshKeyOutput() GetNetworkDeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyOutput) ToGetNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSecondaryDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput) ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutput() GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput) ToGetNetworkDeviceSecondaryDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput {
	return o
}

func (o GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceSecondaryDeviceSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceSecondaryDeviceSshKey {
		return vs[0].([]GetNetworkDeviceSecondaryDeviceSshKey)[vs[1].(int)]
	}).(GetNetworkDeviceSecondaryDeviceSshKeyOutput)
}

type GetNetworkDeviceSshKey struct {
	KeyName  string `pulumi:"keyName"`
	Username string `pulumi:"username"`
}

// GetNetworkDeviceSshKeyInput is an input type that accepts GetNetworkDeviceSshKeyArgs and GetNetworkDeviceSshKeyOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSshKeyInput` via:
//
//          GetNetworkDeviceSshKeyArgs{...}
type GetNetworkDeviceSshKeyInput interface {
	pulumi.Input

	ToGetNetworkDeviceSshKeyOutput() GetNetworkDeviceSshKeyOutput
	ToGetNetworkDeviceSshKeyOutputWithContext(context.Context) GetNetworkDeviceSshKeyOutput
}

type GetNetworkDeviceSshKeyArgs struct {
	KeyName  pulumi.StringInput `pulumi:"keyName"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetNetworkDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSshKey)(nil)).Elem()
}

func (i GetNetworkDeviceSshKeyArgs) ToGetNetworkDeviceSshKeyOutput() GetNetworkDeviceSshKeyOutput {
	return i.ToGetNetworkDeviceSshKeyOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSshKeyArgs) ToGetNetworkDeviceSshKeyOutputWithContext(ctx context.Context) GetNetworkDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSshKeyOutput)
}

// GetNetworkDeviceSshKeyArrayInput is an input type that accepts GetNetworkDeviceSshKeyArray and GetNetworkDeviceSshKeyArrayOutput values.
// You can construct a concrete instance of `GetNetworkDeviceSshKeyArrayInput` via:
//
//          GetNetworkDeviceSshKeyArray{ GetNetworkDeviceSshKeyArgs{...} }
type GetNetworkDeviceSshKeyArrayInput interface {
	pulumi.Input

	ToGetNetworkDeviceSshKeyArrayOutput() GetNetworkDeviceSshKeyArrayOutput
	ToGetNetworkDeviceSshKeyArrayOutputWithContext(context.Context) GetNetworkDeviceSshKeyArrayOutput
}

type GetNetworkDeviceSshKeyArray []GetNetworkDeviceSshKeyInput

func (GetNetworkDeviceSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSshKey)(nil)).Elem()
}

func (i GetNetworkDeviceSshKeyArray) ToGetNetworkDeviceSshKeyArrayOutput() GetNetworkDeviceSshKeyArrayOutput {
	return i.ToGetNetworkDeviceSshKeyArrayOutputWithContext(context.Background())
}

func (i GetNetworkDeviceSshKeyArray) ToGetNetworkDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkDeviceSshKeyArrayOutput)
}

type GetNetworkDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkDeviceSshKey)(nil)).Elem()
}

func (o GetNetworkDeviceSshKeyOutput) ToGetNetworkDeviceSshKeyOutput() GetNetworkDeviceSshKeyOutput {
	return o
}

func (o GetNetworkDeviceSshKeyOutput) ToGetNetworkDeviceSshKeyOutputWithContext(ctx context.Context) GetNetworkDeviceSshKeyOutput {
	return o
}

func (o GetNetworkDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

func (o GetNetworkDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type GetNetworkDeviceSshKeyArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkDeviceSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkDeviceSshKey)(nil)).Elem()
}

func (o GetNetworkDeviceSshKeyArrayOutput) ToGetNetworkDeviceSshKeyArrayOutput() GetNetworkDeviceSshKeyArrayOutput {
	return o
}

func (o GetNetworkDeviceSshKeyArrayOutput) ToGetNetworkDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetNetworkDeviceSshKeyArrayOutput {
	return o
}

func (o GetNetworkDeviceSshKeyArrayOutput) Index(i pulumi.IntInput) GetNetworkDeviceSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkDeviceSshKey {
		return vs[0].([]GetNetworkDeviceSshKey)[vs[1].(int)]
	}).(GetNetworkDeviceSshKeyOutput)
}

type MetalConnectionPort struct {
	Id         *string `pulumi:"id"`
	LinkStatus *string `pulumi:"linkStatus"`
	// Name of the connection resource
	Name *string `pulumi:"name"`
	Role *string `pulumi:"role"`
	// Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
	Speed *int `pulumi:"speed"`
	// Status of the connection resource.
	Status            *string       `pulumi:"status"`
	VirtualCircuitIds []interface{} `pulumi:"virtualCircuitIds"`
}

// MetalConnectionPortInput is an input type that accepts MetalConnectionPortArgs and MetalConnectionPortOutput values.
// You can construct a concrete instance of `MetalConnectionPortInput` via:
//
//          MetalConnectionPortArgs{...}
type MetalConnectionPortInput interface {
	pulumi.Input

	ToMetalConnectionPortOutput() MetalConnectionPortOutput
	ToMetalConnectionPortOutputWithContext(context.Context) MetalConnectionPortOutput
}

type MetalConnectionPortArgs struct {
	Id         pulumi.StringPtrInput `pulumi:"id"`
	LinkStatus pulumi.StringPtrInput `pulumi:"linkStatus"`
	// Name of the connection resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
	Speed pulumi.IntPtrInput `pulumi:"speed"`
	// Status of the connection resource.
	Status            pulumi.StringPtrInput `pulumi:"status"`
	VirtualCircuitIds pulumi.ArrayInput     `pulumi:"virtualCircuitIds"`
}

func (MetalConnectionPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalConnectionPort)(nil)).Elem()
}

func (i MetalConnectionPortArgs) ToMetalConnectionPortOutput() MetalConnectionPortOutput {
	return i.ToMetalConnectionPortOutputWithContext(context.Background())
}

func (i MetalConnectionPortArgs) ToMetalConnectionPortOutputWithContext(ctx context.Context) MetalConnectionPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalConnectionPortOutput)
}

// MetalConnectionPortArrayInput is an input type that accepts MetalConnectionPortArray and MetalConnectionPortArrayOutput values.
// You can construct a concrete instance of `MetalConnectionPortArrayInput` via:
//
//          MetalConnectionPortArray{ MetalConnectionPortArgs{...} }
type MetalConnectionPortArrayInput interface {
	pulumi.Input

	ToMetalConnectionPortArrayOutput() MetalConnectionPortArrayOutput
	ToMetalConnectionPortArrayOutputWithContext(context.Context) MetalConnectionPortArrayOutput
}

type MetalConnectionPortArray []MetalConnectionPortInput

func (MetalConnectionPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalConnectionPort)(nil)).Elem()
}

func (i MetalConnectionPortArray) ToMetalConnectionPortArrayOutput() MetalConnectionPortArrayOutput {
	return i.ToMetalConnectionPortArrayOutputWithContext(context.Background())
}

func (i MetalConnectionPortArray) ToMetalConnectionPortArrayOutputWithContext(ctx context.Context) MetalConnectionPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalConnectionPortArrayOutput)
}

type MetalConnectionPortOutput struct{ *pulumi.OutputState }

func (MetalConnectionPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalConnectionPort)(nil)).Elem()
}

func (o MetalConnectionPortOutput) ToMetalConnectionPortOutput() MetalConnectionPortOutput {
	return o
}

func (o MetalConnectionPortOutput) ToMetalConnectionPortOutputWithContext(ctx context.Context) MetalConnectionPortOutput {
	return o
}

func (o MetalConnectionPortOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionPort) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionPortOutput) LinkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionPort) *string { return v.LinkStatus }).(pulumi.StringPtrOutput)
}

// Name of the connection resource
func (o MetalConnectionPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionPortOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionPort) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
func (o MetalConnectionPortOutput) Speed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetalConnectionPort) *int { return v.Speed }).(pulumi.IntPtrOutput)
}

// Status of the connection resource.
func (o MetalConnectionPortOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionPort) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionPortOutput) VirtualCircuitIds() pulumi.ArrayOutput {
	return o.ApplyT(func(v MetalConnectionPort) []interface{} { return v.VirtualCircuitIds }).(pulumi.ArrayOutput)
}

type MetalConnectionPortArrayOutput struct{ *pulumi.OutputState }

func (MetalConnectionPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalConnectionPort)(nil)).Elem()
}

func (o MetalConnectionPortArrayOutput) ToMetalConnectionPortArrayOutput() MetalConnectionPortArrayOutput {
	return o
}

func (o MetalConnectionPortArrayOutput) ToMetalConnectionPortArrayOutputWithContext(ctx context.Context) MetalConnectionPortArrayOutput {
	return o
}

func (o MetalConnectionPortArrayOutput) Index(i pulumi.IntInput) MetalConnectionPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetalConnectionPort {
		return vs[0].([]MetalConnectionPort)[vs[1].(int)]
	}).(MetalConnectionPortOutput)
}

type MetalConnectionServiceToken struct {
	ExpiresAt       *string `pulumi:"expiresAt"`
	Id              *string `pulumi:"id"`
	MaxAllowedSpeed *string `pulumi:"maxAllowedSpeed"`
	Role            *string `pulumi:"role"`
	State           *string `pulumi:"state"`
	// Connection type - dedicated or shared.
	Type *string `pulumi:"type"`
}

// MetalConnectionServiceTokenInput is an input type that accepts MetalConnectionServiceTokenArgs and MetalConnectionServiceTokenOutput values.
// You can construct a concrete instance of `MetalConnectionServiceTokenInput` via:
//
//          MetalConnectionServiceTokenArgs{...}
type MetalConnectionServiceTokenInput interface {
	pulumi.Input

	ToMetalConnectionServiceTokenOutput() MetalConnectionServiceTokenOutput
	ToMetalConnectionServiceTokenOutputWithContext(context.Context) MetalConnectionServiceTokenOutput
}

type MetalConnectionServiceTokenArgs struct {
	ExpiresAt       pulumi.StringPtrInput `pulumi:"expiresAt"`
	Id              pulumi.StringPtrInput `pulumi:"id"`
	MaxAllowedSpeed pulumi.StringPtrInput `pulumi:"maxAllowedSpeed"`
	Role            pulumi.StringPtrInput `pulumi:"role"`
	State           pulumi.StringPtrInput `pulumi:"state"`
	// Connection type - dedicated or shared.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MetalConnectionServiceTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalConnectionServiceToken)(nil)).Elem()
}

func (i MetalConnectionServiceTokenArgs) ToMetalConnectionServiceTokenOutput() MetalConnectionServiceTokenOutput {
	return i.ToMetalConnectionServiceTokenOutputWithContext(context.Background())
}

func (i MetalConnectionServiceTokenArgs) ToMetalConnectionServiceTokenOutputWithContext(ctx context.Context) MetalConnectionServiceTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalConnectionServiceTokenOutput)
}

// MetalConnectionServiceTokenArrayInput is an input type that accepts MetalConnectionServiceTokenArray and MetalConnectionServiceTokenArrayOutput values.
// You can construct a concrete instance of `MetalConnectionServiceTokenArrayInput` via:
//
//          MetalConnectionServiceTokenArray{ MetalConnectionServiceTokenArgs{...} }
type MetalConnectionServiceTokenArrayInput interface {
	pulumi.Input

	ToMetalConnectionServiceTokenArrayOutput() MetalConnectionServiceTokenArrayOutput
	ToMetalConnectionServiceTokenArrayOutputWithContext(context.Context) MetalConnectionServiceTokenArrayOutput
}

type MetalConnectionServiceTokenArray []MetalConnectionServiceTokenInput

func (MetalConnectionServiceTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalConnectionServiceToken)(nil)).Elem()
}

func (i MetalConnectionServiceTokenArray) ToMetalConnectionServiceTokenArrayOutput() MetalConnectionServiceTokenArrayOutput {
	return i.ToMetalConnectionServiceTokenArrayOutputWithContext(context.Background())
}

func (i MetalConnectionServiceTokenArray) ToMetalConnectionServiceTokenArrayOutputWithContext(ctx context.Context) MetalConnectionServiceTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalConnectionServiceTokenArrayOutput)
}

type MetalConnectionServiceTokenOutput struct{ *pulumi.OutputState }

func (MetalConnectionServiceTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalConnectionServiceToken)(nil)).Elem()
}

func (o MetalConnectionServiceTokenOutput) ToMetalConnectionServiceTokenOutput() MetalConnectionServiceTokenOutput {
	return o
}

func (o MetalConnectionServiceTokenOutput) ToMetalConnectionServiceTokenOutputWithContext(ctx context.Context) MetalConnectionServiceTokenOutput {
	return o
}

func (o MetalConnectionServiceTokenOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionServiceToken) *string { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionServiceTokenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionServiceToken) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionServiceTokenOutput) MaxAllowedSpeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionServiceToken) *string { return v.MaxAllowedSpeed }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionServiceTokenOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionServiceToken) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o MetalConnectionServiceTokenOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionServiceToken) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Connection type - dedicated or shared.
func (o MetalConnectionServiceTokenOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalConnectionServiceToken) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MetalConnectionServiceTokenArrayOutput struct{ *pulumi.OutputState }

func (MetalConnectionServiceTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalConnectionServiceToken)(nil)).Elem()
}

func (o MetalConnectionServiceTokenArrayOutput) ToMetalConnectionServiceTokenArrayOutput() MetalConnectionServiceTokenArrayOutput {
	return o
}

func (o MetalConnectionServiceTokenArrayOutput) ToMetalConnectionServiceTokenArrayOutputWithContext(ctx context.Context) MetalConnectionServiceTokenArrayOutput {
	return o
}

func (o MetalConnectionServiceTokenArrayOutput) Index(i pulumi.IntInput) MetalConnectionServiceTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetalConnectionServiceToken {
		return vs[0].([]MetalConnectionServiceToken)[vs[1].(int)]
	}).(MetalConnectionServiceTokenOutput)
}

type MetalDeviceIpAddress struct {
	// CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
	Cidr *int `pulumi:"cidr"`
	// List of UUIDs of IP block reservations
	// from which the public IPv4 address should be taken.
	ReservationIds []string `pulumi:"reservationIds"`
	// One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
	Type string `pulumi:"type"`
}

// MetalDeviceIpAddressInput is an input type that accepts MetalDeviceIpAddressArgs and MetalDeviceIpAddressOutput values.
// You can construct a concrete instance of `MetalDeviceIpAddressInput` via:
//
//          MetalDeviceIpAddressArgs{...}
type MetalDeviceIpAddressInput interface {
	pulumi.Input

	ToMetalDeviceIpAddressOutput() MetalDeviceIpAddressOutput
	ToMetalDeviceIpAddressOutputWithContext(context.Context) MetalDeviceIpAddressOutput
}

type MetalDeviceIpAddressArgs struct {
	// CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
	Cidr pulumi.IntPtrInput `pulumi:"cidr"`
	// List of UUIDs of IP block reservations
	// from which the public IPv4 address should be taken.
	ReservationIds pulumi.StringArrayInput `pulumi:"reservationIds"`
	// One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetalDeviceIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDeviceIpAddress)(nil)).Elem()
}

func (i MetalDeviceIpAddressArgs) ToMetalDeviceIpAddressOutput() MetalDeviceIpAddressOutput {
	return i.ToMetalDeviceIpAddressOutputWithContext(context.Background())
}

func (i MetalDeviceIpAddressArgs) ToMetalDeviceIpAddressOutputWithContext(ctx context.Context) MetalDeviceIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceIpAddressOutput)
}

// MetalDeviceIpAddressArrayInput is an input type that accepts MetalDeviceIpAddressArray and MetalDeviceIpAddressArrayOutput values.
// You can construct a concrete instance of `MetalDeviceIpAddressArrayInput` via:
//
//          MetalDeviceIpAddressArray{ MetalDeviceIpAddressArgs{...} }
type MetalDeviceIpAddressArrayInput interface {
	pulumi.Input

	ToMetalDeviceIpAddressArrayOutput() MetalDeviceIpAddressArrayOutput
	ToMetalDeviceIpAddressArrayOutputWithContext(context.Context) MetalDeviceIpAddressArrayOutput
}

type MetalDeviceIpAddressArray []MetalDeviceIpAddressInput

func (MetalDeviceIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalDeviceIpAddress)(nil)).Elem()
}

func (i MetalDeviceIpAddressArray) ToMetalDeviceIpAddressArrayOutput() MetalDeviceIpAddressArrayOutput {
	return i.ToMetalDeviceIpAddressArrayOutputWithContext(context.Background())
}

func (i MetalDeviceIpAddressArray) ToMetalDeviceIpAddressArrayOutputWithContext(ctx context.Context) MetalDeviceIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceIpAddressArrayOutput)
}

type MetalDeviceIpAddressOutput struct{ *pulumi.OutputState }

func (MetalDeviceIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDeviceIpAddress)(nil)).Elem()
}

func (o MetalDeviceIpAddressOutput) ToMetalDeviceIpAddressOutput() MetalDeviceIpAddressOutput {
	return o
}

func (o MetalDeviceIpAddressOutput) ToMetalDeviceIpAddressOutputWithContext(ctx context.Context) MetalDeviceIpAddressOutput {
	return o
}

// CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
func (o MetalDeviceIpAddressOutput) Cidr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetalDeviceIpAddress) *int { return v.Cidr }).(pulumi.IntPtrOutput)
}

// List of UUIDs of IP block reservations
// from which the public IPv4 address should be taken.
func (o MetalDeviceIpAddressOutput) ReservationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetalDeviceIpAddress) []string { return v.ReservationIds }).(pulumi.StringArrayOutput)
}

// One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
func (o MetalDeviceIpAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetalDeviceIpAddress) string { return v.Type }).(pulumi.StringOutput)
}

type MetalDeviceIpAddressArrayOutput struct{ *pulumi.OutputState }

func (MetalDeviceIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalDeviceIpAddress)(nil)).Elem()
}

func (o MetalDeviceIpAddressArrayOutput) ToMetalDeviceIpAddressArrayOutput() MetalDeviceIpAddressArrayOutput {
	return o
}

func (o MetalDeviceIpAddressArrayOutput) ToMetalDeviceIpAddressArrayOutputWithContext(ctx context.Context) MetalDeviceIpAddressArrayOutput {
	return o
}

func (o MetalDeviceIpAddressArrayOutput) Index(i pulumi.IntInput) MetalDeviceIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetalDeviceIpAddress {
		return vs[0].([]MetalDeviceIpAddress)[vs[1].(int)]
	}).(MetalDeviceIpAddressOutput)
}

type MetalDeviceNetwork struct {
	// IPv4 or IPv6 address string.
	Address *string `pulumi:"address"`
	// CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
	Cidr *int `pulumi:"cidr"`
	// IP version. One of `4`, `6`.
	Family *int `pulumi:"family"`
	// Address of router.
	Gateway *string `pulumi:"gateway"`
	// Whether the address is routable from the Internet.
	Public *bool `pulumi:"public"`
}

// MetalDeviceNetworkInput is an input type that accepts MetalDeviceNetworkArgs and MetalDeviceNetworkOutput values.
// You can construct a concrete instance of `MetalDeviceNetworkInput` via:
//
//          MetalDeviceNetworkArgs{...}
type MetalDeviceNetworkInput interface {
	pulumi.Input

	ToMetalDeviceNetworkOutput() MetalDeviceNetworkOutput
	ToMetalDeviceNetworkOutputWithContext(context.Context) MetalDeviceNetworkOutput
}

type MetalDeviceNetworkArgs struct {
	// IPv4 or IPv6 address string.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
	Cidr pulumi.IntPtrInput `pulumi:"cidr"`
	// IP version. One of `4`, `6`.
	Family pulumi.IntPtrInput `pulumi:"family"`
	// Address of router.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// Whether the address is routable from the Internet.
	Public pulumi.BoolPtrInput `pulumi:"public"`
}

func (MetalDeviceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDeviceNetwork)(nil)).Elem()
}

func (i MetalDeviceNetworkArgs) ToMetalDeviceNetworkOutput() MetalDeviceNetworkOutput {
	return i.ToMetalDeviceNetworkOutputWithContext(context.Background())
}

func (i MetalDeviceNetworkArgs) ToMetalDeviceNetworkOutputWithContext(ctx context.Context) MetalDeviceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceNetworkOutput)
}

// MetalDeviceNetworkArrayInput is an input type that accepts MetalDeviceNetworkArray and MetalDeviceNetworkArrayOutput values.
// You can construct a concrete instance of `MetalDeviceNetworkArrayInput` via:
//
//          MetalDeviceNetworkArray{ MetalDeviceNetworkArgs{...} }
type MetalDeviceNetworkArrayInput interface {
	pulumi.Input

	ToMetalDeviceNetworkArrayOutput() MetalDeviceNetworkArrayOutput
	ToMetalDeviceNetworkArrayOutputWithContext(context.Context) MetalDeviceNetworkArrayOutput
}

type MetalDeviceNetworkArray []MetalDeviceNetworkInput

func (MetalDeviceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalDeviceNetwork)(nil)).Elem()
}

func (i MetalDeviceNetworkArray) ToMetalDeviceNetworkArrayOutput() MetalDeviceNetworkArrayOutput {
	return i.ToMetalDeviceNetworkArrayOutputWithContext(context.Background())
}

func (i MetalDeviceNetworkArray) ToMetalDeviceNetworkArrayOutputWithContext(ctx context.Context) MetalDeviceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceNetworkArrayOutput)
}

type MetalDeviceNetworkOutput struct{ *pulumi.OutputState }

func (MetalDeviceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDeviceNetwork)(nil)).Elem()
}

func (o MetalDeviceNetworkOutput) ToMetalDeviceNetworkOutput() MetalDeviceNetworkOutput {
	return o
}

func (o MetalDeviceNetworkOutput) ToMetalDeviceNetworkOutputWithContext(ctx context.Context) MetalDeviceNetworkOutput {
	return o
}

// IPv4 or IPv6 address string.
func (o MetalDeviceNetworkOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalDeviceNetwork) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
func (o MetalDeviceNetworkOutput) Cidr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetalDeviceNetwork) *int { return v.Cidr }).(pulumi.IntPtrOutput)
}

// IP version. One of `4`, `6`.
func (o MetalDeviceNetworkOutput) Family() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetalDeviceNetwork) *int { return v.Family }).(pulumi.IntPtrOutput)
}

// Address of router.
func (o MetalDeviceNetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalDeviceNetwork) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// Whether the address is routable from the Internet.
func (o MetalDeviceNetworkOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalDeviceNetwork) *bool { return v.Public }).(pulumi.BoolPtrOutput)
}

type MetalDeviceNetworkArrayOutput struct{ *pulumi.OutputState }

func (MetalDeviceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalDeviceNetwork)(nil)).Elem()
}

func (o MetalDeviceNetworkArrayOutput) ToMetalDeviceNetworkArrayOutput() MetalDeviceNetworkArrayOutput {
	return o
}

func (o MetalDeviceNetworkArrayOutput) ToMetalDeviceNetworkArrayOutputWithContext(ctx context.Context) MetalDeviceNetworkArrayOutput {
	return o
}

func (o MetalDeviceNetworkArrayOutput) Index(i pulumi.IntInput) MetalDeviceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetalDeviceNetwork {
		return vs[0].([]MetalDeviceNetwork)[vs[1].(int)]
	}).(MetalDeviceNetworkOutput)
}

type MetalDevicePort struct {
	// Whether this port is part of a bond in bonded network setup.
	Bonded *bool `pulumi:"bonded"`
	// ID of the port.
	Id *string `pulumi:"id"`
	// MAC address assigned to the port.
	Mac *string `pulumi:"mac"`
	// Name of the port (e.g. `eth0`, or `bond0`).
	Name *string `pulumi:"name"`
	// One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
	Type *string `pulumi:"type"`
}

// MetalDevicePortInput is an input type that accepts MetalDevicePortArgs and MetalDevicePortOutput values.
// You can construct a concrete instance of `MetalDevicePortInput` via:
//
//          MetalDevicePortArgs{...}
type MetalDevicePortInput interface {
	pulumi.Input

	ToMetalDevicePortOutput() MetalDevicePortOutput
	ToMetalDevicePortOutputWithContext(context.Context) MetalDevicePortOutput
}

type MetalDevicePortArgs struct {
	// Whether this port is part of a bond in bonded network setup.
	Bonded pulumi.BoolPtrInput `pulumi:"bonded"`
	// ID of the port.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// MAC address assigned to the port.
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// Name of the port (e.g. `eth0`, or `bond0`).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MetalDevicePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDevicePort)(nil)).Elem()
}

func (i MetalDevicePortArgs) ToMetalDevicePortOutput() MetalDevicePortOutput {
	return i.ToMetalDevicePortOutputWithContext(context.Background())
}

func (i MetalDevicePortArgs) ToMetalDevicePortOutputWithContext(ctx context.Context) MetalDevicePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDevicePortOutput)
}

// MetalDevicePortArrayInput is an input type that accepts MetalDevicePortArray and MetalDevicePortArrayOutput values.
// You can construct a concrete instance of `MetalDevicePortArrayInput` via:
//
//          MetalDevicePortArray{ MetalDevicePortArgs{...} }
type MetalDevicePortArrayInput interface {
	pulumi.Input

	ToMetalDevicePortArrayOutput() MetalDevicePortArrayOutput
	ToMetalDevicePortArrayOutputWithContext(context.Context) MetalDevicePortArrayOutput
}

type MetalDevicePortArray []MetalDevicePortInput

func (MetalDevicePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalDevicePort)(nil)).Elem()
}

func (i MetalDevicePortArray) ToMetalDevicePortArrayOutput() MetalDevicePortArrayOutput {
	return i.ToMetalDevicePortArrayOutputWithContext(context.Background())
}

func (i MetalDevicePortArray) ToMetalDevicePortArrayOutputWithContext(ctx context.Context) MetalDevicePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDevicePortArrayOutput)
}

type MetalDevicePortOutput struct{ *pulumi.OutputState }

func (MetalDevicePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDevicePort)(nil)).Elem()
}

func (o MetalDevicePortOutput) ToMetalDevicePortOutput() MetalDevicePortOutput {
	return o
}

func (o MetalDevicePortOutput) ToMetalDevicePortOutputWithContext(ctx context.Context) MetalDevicePortOutput {
	return o
}

// Whether this port is part of a bond in bonded network setup.
func (o MetalDevicePortOutput) Bonded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalDevicePort) *bool { return v.Bonded }).(pulumi.BoolPtrOutput)
}

// ID of the port.
func (o MetalDevicePortOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalDevicePort) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// MAC address assigned to the port.
func (o MetalDevicePortOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalDevicePort) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// Name of the port (e.g. `eth0`, or `bond0`).
func (o MetalDevicePortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalDevicePort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
func (o MetalDevicePortOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalDevicePort) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MetalDevicePortArrayOutput struct{ *pulumi.OutputState }

func (MetalDevicePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetalDevicePort)(nil)).Elem()
}

func (o MetalDevicePortArrayOutput) ToMetalDevicePortArrayOutput() MetalDevicePortArrayOutput {
	return o
}

func (o MetalDevicePortArrayOutput) ToMetalDevicePortArrayOutputWithContext(ctx context.Context) MetalDevicePortArrayOutput {
	return o
}

func (o MetalDevicePortArrayOutput) Index(i pulumi.IntInput) MetalDevicePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetalDevicePort {
		return vs[0].([]MetalDevicePort)[vs[1].(int)]
	}).(MetalDevicePortOutput)
}

type MetalDeviceReinstall struct {
	// Whether the OS disk should be filled with `00h` bytes before reinstall.
	// Defaults to `false`.
	DeprovisionFast *bool `pulumi:"deprovisionFast"`
	// Whether the provider should favour reinstall over destroy and create. Defaults to
	// `false`.
	Enabled *bool `pulumi:"enabled"`
	// Whether the non-OS disks should be kept or wiped during reinstall.
	// Defaults to `false`.
	PreserveData *bool `pulumi:"preserveData"`
}

// MetalDeviceReinstallInput is an input type that accepts MetalDeviceReinstallArgs and MetalDeviceReinstallOutput values.
// You can construct a concrete instance of `MetalDeviceReinstallInput` via:
//
//          MetalDeviceReinstallArgs{...}
type MetalDeviceReinstallInput interface {
	pulumi.Input

	ToMetalDeviceReinstallOutput() MetalDeviceReinstallOutput
	ToMetalDeviceReinstallOutputWithContext(context.Context) MetalDeviceReinstallOutput
}

type MetalDeviceReinstallArgs struct {
	// Whether the OS disk should be filled with `00h` bytes before reinstall.
	// Defaults to `false`.
	DeprovisionFast pulumi.BoolPtrInput `pulumi:"deprovisionFast"`
	// Whether the provider should favour reinstall over destroy and create. Defaults to
	// `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether the non-OS disks should be kept or wiped during reinstall.
	// Defaults to `false`.
	PreserveData pulumi.BoolPtrInput `pulumi:"preserveData"`
}

func (MetalDeviceReinstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDeviceReinstall)(nil)).Elem()
}

func (i MetalDeviceReinstallArgs) ToMetalDeviceReinstallOutput() MetalDeviceReinstallOutput {
	return i.ToMetalDeviceReinstallOutputWithContext(context.Background())
}

func (i MetalDeviceReinstallArgs) ToMetalDeviceReinstallOutputWithContext(ctx context.Context) MetalDeviceReinstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceReinstallOutput)
}

func (i MetalDeviceReinstallArgs) ToMetalDeviceReinstallPtrOutput() MetalDeviceReinstallPtrOutput {
	return i.ToMetalDeviceReinstallPtrOutputWithContext(context.Background())
}

func (i MetalDeviceReinstallArgs) ToMetalDeviceReinstallPtrOutputWithContext(ctx context.Context) MetalDeviceReinstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceReinstallOutput).ToMetalDeviceReinstallPtrOutputWithContext(ctx)
}

// MetalDeviceReinstallPtrInput is an input type that accepts MetalDeviceReinstallArgs, MetalDeviceReinstallPtr and MetalDeviceReinstallPtrOutput values.
// You can construct a concrete instance of `MetalDeviceReinstallPtrInput` via:
//
//          MetalDeviceReinstallArgs{...}
//
//  or:
//
//          nil
type MetalDeviceReinstallPtrInput interface {
	pulumi.Input

	ToMetalDeviceReinstallPtrOutput() MetalDeviceReinstallPtrOutput
	ToMetalDeviceReinstallPtrOutputWithContext(context.Context) MetalDeviceReinstallPtrOutput
}

type metalDeviceReinstallPtrType MetalDeviceReinstallArgs

func MetalDeviceReinstallPtr(v *MetalDeviceReinstallArgs) MetalDeviceReinstallPtrInput {
	return (*metalDeviceReinstallPtrType)(v)
}

func (*metalDeviceReinstallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalDeviceReinstall)(nil)).Elem()
}

func (i *metalDeviceReinstallPtrType) ToMetalDeviceReinstallPtrOutput() MetalDeviceReinstallPtrOutput {
	return i.ToMetalDeviceReinstallPtrOutputWithContext(context.Background())
}

func (i *metalDeviceReinstallPtrType) ToMetalDeviceReinstallPtrOutputWithContext(ctx context.Context) MetalDeviceReinstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalDeviceReinstallPtrOutput)
}

type MetalDeviceReinstallOutput struct{ *pulumi.OutputState }

func (MetalDeviceReinstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalDeviceReinstall)(nil)).Elem()
}

func (o MetalDeviceReinstallOutput) ToMetalDeviceReinstallOutput() MetalDeviceReinstallOutput {
	return o
}

func (o MetalDeviceReinstallOutput) ToMetalDeviceReinstallOutputWithContext(ctx context.Context) MetalDeviceReinstallOutput {
	return o
}

func (o MetalDeviceReinstallOutput) ToMetalDeviceReinstallPtrOutput() MetalDeviceReinstallPtrOutput {
	return o.ToMetalDeviceReinstallPtrOutputWithContext(context.Background())
}

func (o MetalDeviceReinstallOutput) ToMetalDeviceReinstallPtrOutputWithContext(ctx context.Context) MetalDeviceReinstallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetalDeviceReinstall) *MetalDeviceReinstall {
		return &v
	}).(MetalDeviceReinstallPtrOutput)
}

// Whether the OS disk should be filled with `00h` bytes before reinstall.
// Defaults to `false`.
func (o MetalDeviceReinstallOutput) DeprovisionFast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalDeviceReinstall) *bool { return v.DeprovisionFast }).(pulumi.BoolPtrOutput)
}

// Whether the provider should favour reinstall over destroy and create. Defaults to
// `false`.
func (o MetalDeviceReinstallOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalDeviceReinstall) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether the non-OS disks should be kept or wiped during reinstall.
// Defaults to `false`.
func (o MetalDeviceReinstallOutput) PreserveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalDeviceReinstall) *bool { return v.PreserveData }).(pulumi.BoolPtrOutput)
}

type MetalDeviceReinstallPtrOutput struct{ *pulumi.OutputState }

func (MetalDeviceReinstallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalDeviceReinstall)(nil)).Elem()
}

func (o MetalDeviceReinstallPtrOutput) ToMetalDeviceReinstallPtrOutput() MetalDeviceReinstallPtrOutput {
	return o
}

func (o MetalDeviceReinstallPtrOutput) ToMetalDeviceReinstallPtrOutputWithContext(ctx context.Context) MetalDeviceReinstallPtrOutput {
	return o
}

func (o MetalDeviceReinstallPtrOutput) Elem() MetalDeviceReinstallOutput {
	return o.ApplyT(func(v *MetalDeviceReinstall) MetalDeviceReinstall {
		if v != nil {
			return *v
		}
		var ret MetalDeviceReinstall
		return ret
	}).(MetalDeviceReinstallOutput)
}

// Whether the OS disk should be filled with `00h` bytes before reinstall.
// Defaults to `false`.
func (o MetalDeviceReinstallPtrOutput) DeprovisionFast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalDeviceReinstall) *bool {
		if v == nil {
			return nil
		}
		return v.DeprovisionFast
	}).(pulumi.BoolPtrOutput)
}

// Whether the provider should favour reinstall over destroy and create. Defaults to
// `false`.
func (o MetalDeviceReinstallPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalDeviceReinstall) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the non-OS disks should be kept or wiped during reinstall.
// Defaults to `false`.
func (o MetalDeviceReinstallPtrOutput) PreserveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalDeviceReinstall) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveData
	}).(pulumi.BoolPtrOutput)
}

type MetalOrganizationAddress struct {
	// Postal address.
	Address string `pulumi:"address"`
	// City name.
	City string `pulumi:"city"`
	// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
	Country string `pulumi:"country"`
	// State name.
	State *string `pulumi:"state"`
	// Zip Code.
	ZipCode string `pulumi:"zipCode"`
}

// MetalOrganizationAddressInput is an input type that accepts MetalOrganizationAddressArgs and MetalOrganizationAddressOutput values.
// You can construct a concrete instance of `MetalOrganizationAddressInput` via:
//
//          MetalOrganizationAddressArgs{...}
type MetalOrganizationAddressInput interface {
	pulumi.Input

	ToMetalOrganizationAddressOutput() MetalOrganizationAddressOutput
	ToMetalOrganizationAddressOutputWithContext(context.Context) MetalOrganizationAddressOutput
}

type MetalOrganizationAddressArgs struct {
	// Postal address.
	Address pulumi.StringInput `pulumi:"address"`
	// City name.
	City pulumi.StringInput `pulumi:"city"`
	// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
	Country pulumi.StringInput `pulumi:"country"`
	// State name.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Zip Code.
	ZipCode pulumi.StringInput `pulumi:"zipCode"`
}

func (MetalOrganizationAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalOrganizationAddress)(nil)).Elem()
}

func (i MetalOrganizationAddressArgs) ToMetalOrganizationAddressOutput() MetalOrganizationAddressOutput {
	return i.ToMetalOrganizationAddressOutputWithContext(context.Background())
}

func (i MetalOrganizationAddressArgs) ToMetalOrganizationAddressOutputWithContext(ctx context.Context) MetalOrganizationAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalOrganizationAddressOutput)
}

func (i MetalOrganizationAddressArgs) ToMetalOrganizationAddressPtrOutput() MetalOrganizationAddressPtrOutput {
	return i.ToMetalOrganizationAddressPtrOutputWithContext(context.Background())
}

func (i MetalOrganizationAddressArgs) ToMetalOrganizationAddressPtrOutputWithContext(ctx context.Context) MetalOrganizationAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalOrganizationAddressOutput).ToMetalOrganizationAddressPtrOutputWithContext(ctx)
}

// MetalOrganizationAddressPtrInput is an input type that accepts MetalOrganizationAddressArgs, MetalOrganizationAddressPtr and MetalOrganizationAddressPtrOutput values.
// You can construct a concrete instance of `MetalOrganizationAddressPtrInput` via:
//
//          MetalOrganizationAddressArgs{...}
//
//  or:
//
//          nil
type MetalOrganizationAddressPtrInput interface {
	pulumi.Input

	ToMetalOrganizationAddressPtrOutput() MetalOrganizationAddressPtrOutput
	ToMetalOrganizationAddressPtrOutputWithContext(context.Context) MetalOrganizationAddressPtrOutput
}

type metalOrganizationAddressPtrType MetalOrganizationAddressArgs

func MetalOrganizationAddressPtr(v *MetalOrganizationAddressArgs) MetalOrganizationAddressPtrInput {
	return (*metalOrganizationAddressPtrType)(v)
}

func (*metalOrganizationAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalOrganizationAddress)(nil)).Elem()
}

func (i *metalOrganizationAddressPtrType) ToMetalOrganizationAddressPtrOutput() MetalOrganizationAddressPtrOutput {
	return i.ToMetalOrganizationAddressPtrOutputWithContext(context.Background())
}

func (i *metalOrganizationAddressPtrType) ToMetalOrganizationAddressPtrOutputWithContext(ctx context.Context) MetalOrganizationAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalOrganizationAddressPtrOutput)
}

type MetalOrganizationAddressOutput struct{ *pulumi.OutputState }

func (MetalOrganizationAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalOrganizationAddress)(nil)).Elem()
}

func (o MetalOrganizationAddressOutput) ToMetalOrganizationAddressOutput() MetalOrganizationAddressOutput {
	return o
}

func (o MetalOrganizationAddressOutput) ToMetalOrganizationAddressOutputWithContext(ctx context.Context) MetalOrganizationAddressOutput {
	return o
}

func (o MetalOrganizationAddressOutput) ToMetalOrganizationAddressPtrOutput() MetalOrganizationAddressPtrOutput {
	return o.ToMetalOrganizationAddressPtrOutputWithContext(context.Background())
}

func (o MetalOrganizationAddressOutput) ToMetalOrganizationAddressPtrOutputWithContext(ctx context.Context) MetalOrganizationAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetalOrganizationAddress) *MetalOrganizationAddress {
		return &v
	}).(MetalOrganizationAddressPtrOutput)
}

// Postal address.
func (o MetalOrganizationAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v MetalOrganizationAddress) string { return v.Address }).(pulumi.StringOutput)
}

// City name.
func (o MetalOrganizationAddressOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v MetalOrganizationAddress) string { return v.City }).(pulumi.StringOutput)
}

// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
func (o MetalOrganizationAddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v MetalOrganizationAddress) string { return v.Country }).(pulumi.StringOutput)
}

// State name.
func (o MetalOrganizationAddressOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalOrganizationAddress) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Zip Code.
func (o MetalOrganizationAddressOutput) ZipCode() pulumi.StringOutput {
	return o.ApplyT(func(v MetalOrganizationAddress) string { return v.ZipCode }).(pulumi.StringOutput)
}

type MetalOrganizationAddressPtrOutput struct{ *pulumi.OutputState }

func (MetalOrganizationAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalOrganizationAddress)(nil)).Elem()
}

func (o MetalOrganizationAddressPtrOutput) ToMetalOrganizationAddressPtrOutput() MetalOrganizationAddressPtrOutput {
	return o
}

func (o MetalOrganizationAddressPtrOutput) ToMetalOrganizationAddressPtrOutputWithContext(ctx context.Context) MetalOrganizationAddressPtrOutput {
	return o
}

func (o MetalOrganizationAddressPtrOutput) Elem() MetalOrganizationAddressOutput {
	return o.ApplyT(func(v *MetalOrganizationAddress) MetalOrganizationAddress {
		if v != nil {
			return *v
		}
		var ret MetalOrganizationAddress
		return ret
	}).(MetalOrganizationAddressOutput)
}

// Postal address.
func (o MetalOrganizationAddressPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalOrganizationAddress) *string {
		if v == nil {
			return nil
		}
		return &v.Address
	}).(pulumi.StringPtrOutput)
}

// City name.
func (o MetalOrganizationAddressPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalOrganizationAddress) *string {
		if v == nil {
			return nil
		}
		return &v.City
	}).(pulumi.StringPtrOutput)
}

// Two letter country code (ISO 3166-1 alpha-2), e.g. US.
func (o MetalOrganizationAddressPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalOrganizationAddress) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// State name.
func (o MetalOrganizationAddressPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalOrganizationAddress) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Zip Code.
func (o MetalOrganizationAddressPtrOutput) ZipCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalOrganizationAddress) *string {
		if v == nil {
			return nil
		}
		return &v.ZipCode
	}).(pulumi.StringPtrOutput)
}

type MetalProjectBgpConfig struct {
	// Autonomous System Number for local BGP deployment.
	Asn int `pulumi:"asn"`
	// `private` or `public`, the `private` is likely to be usable immediately, the
	// `public` will need to be reviewed by Equinix Metal engineers.
	DeploymentType string `pulumi:"deploymentType"`
	// The maximum number of route filters allowed per server.
	MaxPrefix *int `pulumi:"maxPrefix"`
	// Password for BGP session in plaintext (not a checksum).
	Md5 *string `pulumi:"md5"`
	// status of BGP configuration in the project.
	Status *string `pulumi:"status"`
}

// MetalProjectBgpConfigInput is an input type that accepts MetalProjectBgpConfigArgs and MetalProjectBgpConfigOutput values.
// You can construct a concrete instance of `MetalProjectBgpConfigInput` via:
//
//          MetalProjectBgpConfigArgs{...}
type MetalProjectBgpConfigInput interface {
	pulumi.Input

	ToMetalProjectBgpConfigOutput() MetalProjectBgpConfigOutput
	ToMetalProjectBgpConfigOutputWithContext(context.Context) MetalProjectBgpConfigOutput
}

type MetalProjectBgpConfigArgs struct {
	// Autonomous System Number for local BGP deployment.
	Asn pulumi.IntInput `pulumi:"asn"`
	// `private` or `public`, the `private` is likely to be usable immediately, the
	// `public` will need to be reviewed by Equinix Metal engineers.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The maximum number of route filters allowed per server.
	MaxPrefix pulumi.IntPtrInput `pulumi:"maxPrefix"`
	// Password for BGP session in plaintext (not a checksum).
	Md5 pulumi.StringPtrInput `pulumi:"md5"`
	// status of BGP configuration in the project.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (MetalProjectBgpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalProjectBgpConfig)(nil)).Elem()
}

func (i MetalProjectBgpConfigArgs) ToMetalProjectBgpConfigOutput() MetalProjectBgpConfigOutput {
	return i.ToMetalProjectBgpConfigOutputWithContext(context.Background())
}

func (i MetalProjectBgpConfigArgs) ToMetalProjectBgpConfigOutputWithContext(ctx context.Context) MetalProjectBgpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectBgpConfigOutput)
}

func (i MetalProjectBgpConfigArgs) ToMetalProjectBgpConfigPtrOutput() MetalProjectBgpConfigPtrOutput {
	return i.ToMetalProjectBgpConfigPtrOutputWithContext(context.Background())
}

func (i MetalProjectBgpConfigArgs) ToMetalProjectBgpConfigPtrOutputWithContext(ctx context.Context) MetalProjectBgpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectBgpConfigOutput).ToMetalProjectBgpConfigPtrOutputWithContext(ctx)
}

// MetalProjectBgpConfigPtrInput is an input type that accepts MetalProjectBgpConfigArgs, MetalProjectBgpConfigPtr and MetalProjectBgpConfigPtrOutput values.
// You can construct a concrete instance of `MetalProjectBgpConfigPtrInput` via:
//
//          MetalProjectBgpConfigArgs{...}
//
//  or:
//
//          nil
type MetalProjectBgpConfigPtrInput interface {
	pulumi.Input

	ToMetalProjectBgpConfigPtrOutput() MetalProjectBgpConfigPtrOutput
	ToMetalProjectBgpConfigPtrOutputWithContext(context.Context) MetalProjectBgpConfigPtrOutput
}

type metalProjectBgpConfigPtrType MetalProjectBgpConfigArgs

func MetalProjectBgpConfigPtr(v *MetalProjectBgpConfigArgs) MetalProjectBgpConfigPtrInput {
	return (*metalProjectBgpConfigPtrType)(v)
}

func (*metalProjectBgpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalProjectBgpConfig)(nil)).Elem()
}

func (i *metalProjectBgpConfigPtrType) ToMetalProjectBgpConfigPtrOutput() MetalProjectBgpConfigPtrOutput {
	return i.ToMetalProjectBgpConfigPtrOutputWithContext(context.Background())
}

func (i *metalProjectBgpConfigPtrType) ToMetalProjectBgpConfigPtrOutputWithContext(ctx context.Context) MetalProjectBgpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalProjectBgpConfigPtrOutput)
}

type MetalProjectBgpConfigOutput struct{ *pulumi.OutputState }

func (MetalProjectBgpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalProjectBgpConfig)(nil)).Elem()
}

func (o MetalProjectBgpConfigOutput) ToMetalProjectBgpConfigOutput() MetalProjectBgpConfigOutput {
	return o
}

func (o MetalProjectBgpConfigOutput) ToMetalProjectBgpConfigOutputWithContext(ctx context.Context) MetalProjectBgpConfigOutput {
	return o
}

func (o MetalProjectBgpConfigOutput) ToMetalProjectBgpConfigPtrOutput() MetalProjectBgpConfigPtrOutput {
	return o.ToMetalProjectBgpConfigPtrOutputWithContext(context.Background())
}

func (o MetalProjectBgpConfigOutput) ToMetalProjectBgpConfigPtrOutputWithContext(ctx context.Context) MetalProjectBgpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetalProjectBgpConfig) *MetalProjectBgpConfig {
		return &v
	}).(MetalProjectBgpConfigPtrOutput)
}

// Autonomous System Number for local BGP deployment.
func (o MetalProjectBgpConfigOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v MetalProjectBgpConfig) int { return v.Asn }).(pulumi.IntOutput)
}

// `private` or `public`, the `private` is likely to be usable immediately, the
// `public` will need to be reviewed by Equinix Metal engineers.
func (o MetalProjectBgpConfigOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v MetalProjectBgpConfig) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The maximum number of route filters allowed per server.
func (o MetalProjectBgpConfigOutput) MaxPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetalProjectBgpConfig) *int { return v.MaxPrefix }).(pulumi.IntPtrOutput)
}

// Password for BGP session in plaintext (not a checksum).
func (o MetalProjectBgpConfigOutput) Md5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalProjectBgpConfig) *string { return v.Md5 }).(pulumi.StringPtrOutput)
}

// status of BGP configuration in the project.
func (o MetalProjectBgpConfigOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalProjectBgpConfig) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type MetalProjectBgpConfigPtrOutput struct{ *pulumi.OutputState }

func (MetalProjectBgpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalProjectBgpConfig)(nil)).Elem()
}

func (o MetalProjectBgpConfigPtrOutput) ToMetalProjectBgpConfigPtrOutput() MetalProjectBgpConfigPtrOutput {
	return o
}

func (o MetalProjectBgpConfigPtrOutput) ToMetalProjectBgpConfigPtrOutputWithContext(ctx context.Context) MetalProjectBgpConfigPtrOutput {
	return o
}

func (o MetalProjectBgpConfigPtrOutput) Elem() MetalProjectBgpConfigOutput {
	return o.ApplyT(func(v *MetalProjectBgpConfig) MetalProjectBgpConfig {
		if v != nil {
			return *v
		}
		var ret MetalProjectBgpConfig
		return ret
	}).(MetalProjectBgpConfigOutput)
}

// Autonomous System Number for local BGP deployment.
func (o MetalProjectBgpConfigPtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetalProjectBgpConfig) *int {
		if v == nil {
			return nil
		}
		return &v.Asn
	}).(pulumi.IntPtrOutput)
}

// `private` or `public`, the `private` is likely to be usable immediately, the
// `public` will need to be reviewed by Equinix Metal engineers.
func (o MetalProjectBgpConfigPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalProjectBgpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// The maximum number of route filters allowed per server.
func (o MetalProjectBgpConfigPtrOutput) MaxPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetalProjectBgpConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefix
	}).(pulumi.IntPtrOutput)
}

// Password for BGP session in plaintext (not a checksum).
func (o MetalProjectBgpConfigPtrOutput) Md5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalProjectBgpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Md5
	}).(pulumi.StringPtrOutput)
}

// status of BGP configuration in the project.
func (o MetalProjectBgpConfigPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalProjectBgpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type MetalSpotMarketRequestInstanceParameters struct {
	AlwaysPxe     *bool    `pulumi:"alwaysPxe"`
	BillingCycle  string   `pulumi:"billingCycle"`
	Customdata    *string  `pulumi:"customdata"`
	Description   *string  `pulumi:"description"`
	Features      []string `pulumi:"features"`
	Hostname      string   `pulumi:"hostname"`
	IpxeScriptUrl *string  `pulumi:"ipxeScriptUrl"`
	// Blocks deletion of the SpotMarketRequest device until the lock is disabled.
	Locked           *bool    `pulumi:"locked"`
	OperatingSystem  string   `pulumi:"operatingSystem"`
	Plan             string   `pulumi:"plan"`
	ProjectSshKeys   []string `pulumi:"projectSshKeys"`
	Tags             []string `pulumi:"tags"`
	TermintationTime *string  `pulumi:"termintationTime"`
	UserSshKeys      []string `pulumi:"userSshKeys"`
	Userdata         *string  `pulumi:"userdata"`
}

// MetalSpotMarketRequestInstanceParametersInput is an input type that accepts MetalSpotMarketRequestInstanceParametersArgs and MetalSpotMarketRequestInstanceParametersOutput values.
// You can construct a concrete instance of `MetalSpotMarketRequestInstanceParametersInput` via:
//
//          MetalSpotMarketRequestInstanceParametersArgs{...}
type MetalSpotMarketRequestInstanceParametersInput interface {
	pulumi.Input

	ToMetalSpotMarketRequestInstanceParametersOutput() MetalSpotMarketRequestInstanceParametersOutput
	ToMetalSpotMarketRequestInstanceParametersOutputWithContext(context.Context) MetalSpotMarketRequestInstanceParametersOutput
}

type MetalSpotMarketRequestInstanceParametersArgs struct {
	AlwaysPxe     pulumi.BoolPtrInput     `pulumi:"alwaysPxe"`
	BillingCycle  pulumi.StringInput      `pulumi:"billingCycle"`
	Customdata    pulumi.StringPtrInput   `pulumi:"customdata"`
	Description   pulumi.StringPtrInput   `pulumi:"description"`
	Features      pulumi.StringArrayInput `pulumi:"features"`
	Hostname      pulumi.StringInput      `pulumi:"hostname"`
	IpxeScriptUrl pulumi.StringPtrInput   `pulumi:"ipxeScriptUrl"`
	// Blocks deletion of the SpotMarketRequest device until the lock is disabled.
	Locked           pulumi.BoolPtrInput     `pulumi:"locked"`
	OperatingSystem  pulumi.StringInput      `pulumi:"operatingSystem"`
	Plan             pulumi.StringInput      `pulumi:"plan"`
	ProjectSshKeys   pulumi.StringArrayInput `pulumi:"projectSshKeys"`
	Tags             pulumi.StringArrayInput `pulumi:"tags"`
	TermintationTime pulumi.StringPtrInput   `pulumi:"termintationTime"`
	UserSshKeys      pulumi.StringArrayInput `pulumi:"userSshKeys"`
	Userdata         pulumi.StringPtrInput   `pulumi:"userdata"`
}

func (MetalSpotMarketRequestInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalSpotMarketRequestInstanceParameters)(nil)).Elem()
}

func (i MetalSpotMarketRequestInstanceParametersArgs) ToMetalSpotMarketRequestInstanceParametersOutput() MetalSpotMarketRequestInstanceParametersOutput {
	return i.ToMetalSpotMarketRequestInstanceParametersOutputWithContext(context.Background())
}

func (i MetalSpotMarketRequestInstanceParametersArgs) ToMetalSpotMarketRequestInstanceParametersOutputWithContext(ctx context.Context) MetalSpotMarketRequestInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalSpotMarketRequestInstanceParametersOutput)
}

func (i MetalSpotMarketRequestInstanceParametersArgs) ToMetalSpotMarketRequestInstanceParametersPtrOutput() MetalSpotMarketRequestInstanceParametersPtrOutput {
	return i.ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(context.Background())
}

func (i MetalSpotMarketRequestInstanceParametersArgs) ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(ctx context.Context) MetalSpotMarketRequestInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalSpotMarketRequestInstanceParametersOutput).ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(ctx)
}

// MetalSpotMarketRequestInstanceParametersPtrInput is an input type that accepts MetalSpotMarketRequestInstanceParametersArgs, MetalSpotMarketRequestInstanceParametersPtr and MetalSpotMarketRequestInstanceParametersPtrOutput values.
// You can construct a concrete instance of `MetalSpotMarketRequestInstanceParametersPtrInput` via:
//
//          MetalSpotMarketRequestInstanceParametersArgs{...}
//
//  or:
//
//          nil
type MetalSpotMarketRequestInstanceParametersPtrInput interface {
	pulumi.Input

	ToMetalSpotMarketRequestInstanceParametersPtrOutput() MetalSpotMarketRequestInstanceParametersPtrOutput
	ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(context.Context) MetalSpotMarketRequestInstanceParametersPtrOutput
}

type metalSpotMarketRequestInstanceParametersPtrType MetalSpotMarketRequestInstanceParametersArgs

func MetalSpotMarketRequestInstanceParametersPtr(v *MetalSpotMarketRequestInstanceParametersArgs) MetalSpotMarketRequestInstanceParametersPtrInput {
	return (*metalSpotMarketRequestInstanceParametersPtrType)(v)
}

func (*metalSpotMarketRequestInstanceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalSpotMarketRequestInstanceParameters)(nil)).Elem()
}

func (i *metalSpotMarketRequestInstanceParametersPtrType) ToMetalSpotMarketRequestInstanceParametersPtrOutput() MetalSpotMarketRequestInstanceParametersPtrOutput {
	return i.ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(context.Background())
}

func (i *metalSpotMarketRequestInstanceParametersPtrType) ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(ctx context.Context) MetalSpotMarketRequestInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalSpotMarketRequestInstanceParametersPtrOutput)
}

type MetalSpotMarketRequestInstanceParametersOutput struct{ *pulumi.OutputState }

func (MetalSpotMarketRequestInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetalSpotMarketRequestInstanceParameters)(nil)).Elem()
}

func (o MetalSpotMarketRequestInstanceParametersOutput) ToMetalSpotMarketRequestInstanceParametersOutput() MetalSpotMarketRequestInstanceParametersOutput {
	return o
}

func (o MetalSpotMarketRequestInstanceParametersOutput) ToMetalSpotMarketRequestInstanceParametersOutputWithContext(ctx context.Context) MetalSpotMarketRequestInstanceParametersOutput {
	return o
}

func (o MetalSpotMarketRequestInstanceParametersOutput) ToMetalSpotMarketRequestInstanceParametersPtrOutput() MetalSpotMarketRequestInstanceParametersPtrOutput {
	return o.ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(context.Background())
}

func (o MetalSpotMarketRequestInstanceParametersOutput) ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(ctx context.Context) MetalSpotMarketRequestInstanceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetalSpotMarketRequestInstanceParameters) *MetalSpotMarketRequestInstanceParameters {
		return &v
	}).(MetalSpotMarketRequestInstanceParametersPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) AlwaysPxe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *bool { return v.AlwaysPxe }).(pulumi.BoolPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) BillingCycle() pulumi.StringOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) string { return v.BillingCycle }).(pulumi.StringOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Customdata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *string { return v.Customdata }).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) []string { return v.Features }).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) IpxeScriptUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *string { return v.IpxeScriptUrl }).(pulumi.StringPtrOutput)
}

// Blocks deletion of the SpotMarketRequest device until the lock is disabled.
func (o MetalSpotMarketRequestInstanceParametersOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *bool { return v.Locked }).(pulumi.BoolPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) string { return v.Plan }).(pulumi.StringOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) ProjectSshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) []string { return v.ProjectSshKeys }).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) TermintationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *string { return v.TermintationTime }).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) UserSshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) []string { return v.UserSshKeys }).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersOutput) Userdata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetalSpotMarketRequestInstanceParameters) *string { return v.Userdata }).(pulumi.StringPtrOutput)
}

type MetalSpotMarketRequestInstanceParametersPtrOutput struct{ *pulumi.OutputState }

func (MetalSpotMarketRequestInstanceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalSpotMarketRequestInstanceParameters)(nil)).Elem()
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) ToMetalSpotMarketRequestInstanceParametersPtrOutput() MetalSpotMarketRequestInstanceParametersPtrOutput {
	return o
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) ToMetalSpotMarketRequestInstanceParametersPtrOutputWithContext(ctx context.Context) MetalSpotMarketRequestInstanceParametersPtrOutput {
	return o
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Elem() MetalSpotMarketRequestInstanceParametersOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) MetalSpotMarketRequestInstanceParameters {
		if v != nil {
			return *v
		}
		var ret MetalSpotMarketRequestInstanceParameters
		return ret
	}).(MetalSpotMarketRequestInstanceParametersOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) AlwaysPxe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.AlwaysPxe
	}).(pulumi.BoolPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return &v.BillingCycle
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Customdata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Customdata
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) IpxeScriptUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.IpxeScriptUrl
	}).(pulumi.StringPtrOutput)
}

// Blocks deletion of the SpotMarketRequest device until the lock is disabled.
func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.Locked
	}).(pulumi.BoolPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return &v.OperatingSystem
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Plan
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) ProjectSshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.ProjectSshKeys
	}).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) TermintationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.TermintationTime
	}).(pulumi.StringPtrOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) UserSshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.UserSshKeys
	}).(pulumi.StringArrayOutput)
}

func (o MetalSpotMarketRequestInstanceParametersPtrOutput) Userdata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalSpotMarketRequestInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Userdata
	}).(pulumi.StringPtrOutput)
}

type NetworkACLTemplateDeviceDetail struct {
	// Device ACL provisioning status where template was applied. One of `PROVISIONING`,
	// `PROVISIONED`.
	AclStatus *string `pulumi:"aclStatus"`
	// ACL template name.
	Name *string `pulumi:"name"`
	// Device uuid.
	Uuid *string `pulumi:"uuid"`
}

// NetworkACLTemplateDeviceDetailInput is an input type that accepts NetworkACLTemplateDeviceDetailArgs and NetworkACLTemplateDeviceDetailOutput values.
// You can construct a concrete instance of `NetworkACLTemplateDeviceDetailInput` via:
//
//          NetworkACLTemplateDeviceDetailArgs{...}
type NetworkACLTemplateDeviceDetailInput interface {
	pulumi.Input

	ToNetworkACLTemplateDeviceDetailOutput() NetworkACLTemplateDeviceDetailOutput
	ToNetworkACLTemplateDeviceDetailOutputWithContext(context.Context) NetworkACLTemplateDeviceDetailOutput
}

type NetworkACLTemplateDeviceDetailArgs struct {
	// Device ACL provisioning status where template was applied. One of `PROVISIONING`,
	// `PROVISIONED`.
	AclStatus pulumi.StringPtrInput `pulumi:"aclStatus"`
	// ACL template name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device uuid.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
}

func (NetworkACLTemplateDeviceDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLTemplateDeviceDetail)(nil)).Elem()
}

func (i NetworkACLTemplateDeviceDetailArgs) ToNetworkACLTemplateDeviceDetailOutput() NetworkACLTemplateDeviceDetailOutput {
	return i.ToNetworkACLTemplateDeviceDetailOutputWithContext(context.Background())
}

func (i NetworkACLTemplateDeviceDetailArgs) ToNetworkACLTemplateDeviceDetailOutputWithContext(ctx context.Context) NetworkACLTemplateDeviceDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateDeviceDetailOutput)
}

// NetworkACLTemplateDeviceDetailArrayInput is an input type that accepts NetworkACLTemplateDeviceDetailArray and NetworkACLTemplateDeviceDetailArrayOutput values.
// You can construct a concrete instance of `NetworkACLTemplateDeviceDetailArrayInput` via:
//
//          NetworkACLTemplateDeviceDetailArray{ NetworkACLTemplateDeviceDetailArgs{...} }
type NetworkACLTemplateDeviceDetailArrayInput interface {
	pulumi.Input

	ToNetworkACLTemplateDeviceDetailArrayOutput() NetworkACLTemplateDeviceDetailArrayOutput
	ToNetworkACLTemplateDeviceDetailArrayOutputWithContext(context.Context) NetworkACLTemplateDeviceDetailArrayOutput
}

type NetworkACLTemplateDeviceDetailArray []NetworkACLTemplateDeviceDetailInput

func (NetworkACLTemplateDeviceDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkACLTemplateDeviceDetail)(nil)).Elem()
}

func (i NetworkACLTemplateDeviceDetailArray) ToNetworkACLTemplateDeviceDetailArrayOutput() NetworkACLTemplateDeviceDetailArrayOutput {
	return i.ToNetworkACLTemplateDeviceDetailArrayOutputWithContext(context.Background())
}

func (i NetworkACLTemplateDeviceDetailArray) ToNetworkACLTemplateDeviceDetailArrayOutputWithContext(ctx context.Context) NetworkACLTemplateDeviceDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateDeviceDetailArrayOutput)
}

type NetworkACLTemplateDeviceDetailOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateDeviceDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLTemplateDeviceDetail)(nil)).Elem()
}

func (o NetworkACLTemplateDeviceDetailOutput) ToNetworkACLTemplateDeviceDetailOutput() NetworkACLTemplateDeviceDetailOutput {
	return o
}

func (o NetworkACLTemplateDeviceDetailOutput) ToNetworkACLTemplateDeviceDetailOutputWithContext(ctx context.Context) NetworkACLTemplateDeviceDetailOutput {
	return o
}

// Device ACL provisioning status where template was applied. One of `PROVISIONING`,
// `PROVISIONED`.
func (o NetworkACLTemplateDeviceDetailOutput) AclStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkACLTemplateDeviceDetail) *string { return v.AclStatus }).(pulumi.StringPtrOutput)
}

// ACL template name.
func (o NetworkACLTemplateDeviceDetailOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkACLTemplateDeviceDetail) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Device uuid.
func (o NetworkACLTemplateDeviceDetailOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkACLTemplateDeviceDetail) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type NetworkACLTemplateDeviceDetailArrayOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateDeviceDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkACLTemplateDeviceDetail)(nil)).Elem()
}

func (o NetworkACLTemplateDeviceDetailArrayOutput) ToNetworkACLTemplateDeviceDetailArrayOutput() NetworkACLTemplateDeviceDetailArrayOutput {
	return o
}

func (o NetworkACLTemplateDeviceDetailArrayOutput) ToNetworkACLTemplateDeviceDetailArrayOutputWithContext(ctx context.Context) NetworkACLTemplateDeviceDetailArrayOutput {
	return o
}

func (o NetworkACLTemplateDeviceDetailArrayOutput) Index(i pulumi.IntInput) NetworkACLTemplateDeviceDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkACLTemplateDeviceDetail {
		return vs[0].([]NetworkACLTemplateDeviceDetail)[vs[1].(int)]
	}).(NetworkACLTemplateDeviceDetailOutput)
}

type NetworkACLTemplateInboundRule struct {
	// Inbound traffic destination ports. Allowed values are a comma separated
	// list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	DstPort string `pulumi:"dstPort"`
	// Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
	Protocol       string `pulumi:"protocol"`
	SequenceNumber *int   `pulumi:"sequenceNumber"`
	// Deprecated: Source Type will not be returned
	SourceType *string `pulumi:"sourceType"`
	// Inbound traffic source ports. Allowed values are a comma separated list
	// of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	SrcPort string `pulumi:"srcPort"`
	// Inbound traffic source IP subnet in CIDR format.
	Subnet *string `pulumi:"subnet"`
	// Inbound traffic source IP subnets in CIDR format.
	//
	// Deprecated: Use Subnet instead
	Subnets []string `pulumi:"subnets"`
}

// NetworkACLTemplateInboundRuleInput is an input type that accepts NetworkACLTemplateInboundRuleArgs and NetworkACLTemplateInboundRuleOutput values.
// You can construct a concrete instance of `NetworkACLTemplateInboundRuleInput` via:
//
//          NetworkACLTemplateInboundRuleArgs{...}
type NetworkACLTemplateInboundRuleInput interface {
	pulumi.Input

	ToNetworkACLTemplateInboundRuleOutput() NetworkACLTemplateInboundRuleOutput
	ToNetworkACLTemplateInboundRuleOutputWithContext(context.Context) NetworkACLTemplateInboundRuleOutput
}

type NetworkACLTemplateInboundRuleArgs struct {
	// Inbound traffic destination ports. Allowed values are a comma separated
	// list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	DstPort pulumi.StringInput `pulumi:"dstPort"`
	// Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
	Protocol       pulumi.StringInput `pulumi:"protocol"`
	SequenceNumber pulumi.IntPtrInput `pulumi:"sequenceNumber"`
	// Deprecated: Source Type will not be returned
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// Inbound traffic source ports. Allowed values are a comma separated list
	// of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	SrcPort pulumi.StringInput `pulumi:"srcPort"`
	// Inbound traffic source IP subnet in CIDR format.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// Inbound traffic source IP subnets in CIDR format.
	//
	// Deprecated: Use Subnet instead
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (NetworkACLTemplateInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLTemplateInboundRule)(nil)).Elem()
}

func (i NetworkACLTemplateInboundRuleArgs) ToNetworkACLTemplateInboundRuleOutput() NetworkACLTemplateInboundRuleOutput {
	return i.ToNetworkACLTemplateInboundRuleOutputWithContext(context.Background())
}

func (i NetworkACLTemplateInboundRuleArgs) ToNetworkACLTemplateInboundRuleOutputWithContext(ctx context.Context) NetworkACLTemplateInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateInboundRuleOutput)
}

// NetworkACLTemplateInboundRuleArrayInput is an input type that accepts NetworkACLTemplateInboundRuleArray and NetworkACLTemplateInboundRuleArrayOutput values.
// You can construct a concrete instance of `NetworkACLTemplateInboundRuleArrayInput` via:
//
//          NetworkACLTemplateInboundRuleArray{ NetworkACLTemplateInboundRuleArgs{...} }
type NetworkACLTemplateInboundRuleArrayInput interface {
	pulumi.Input

	ToNetworkACLTemplateInboundRuleArrayOutput() NetworkACLTemplateInboundRuleArrayOutput
	ToNetworkACLTemplateInboundRuleArrayOutputWithContext(context.Context) NetworkACLTemplateInboundRuleArrayOutput
}

type NetworkACLTemplateInboundRuleArray []NetworkACLTemplateInboundRuleInput

func (NetworkACLTemplateInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkACLTemplateInboundRule)(nil)).Elem()
}

func (i NetworkACLTemplateInboundRuleArray) ToNetworkACLTemplateInboundRuleArrayOutput() NetworkACLTemplateInboundRuleArrayOutput {
	return i.ToNetworkACLTemplateInboundRuleArrayOutputWithContext(context.Background())
}

func (i NetworkACLTemplateInboundRuleArray) ToNetworkACLTemplateInboundRuleArrayOutputWithContext(ctx context.Context) NetworkACLTemplateInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkACLTemplateInboundRuleArrayOutput)
}

type NetworkACLTemplateInboundRuleOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkACLTemplateInboundRule)(nil)).Elem()
}

func (o NetworkACLTemplateInboundRuleOutput) ToNetworkACLTemplateInboundRuleOutput() NetworkACLTemplateInboundRuleOutput {
	return o
}

func (o NetworkACLTemplateInboundRuleOutput) ToNetworkACLTemplateInboundRuleOutputWithContext(ctx context.Context) NetworkACLTemplateInboundRuleOutput {
	return o
}

// Inbound traffic destination ports. Allowed values are a comma separated
// list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
func (o NetworkACLTemplateInboundRuleOutput) DstPort() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) string { return v.DstPort }).(pulumi.StringOutput)
}

// Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
func (o NetworkACLTemplateInboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o NetworkACLTemplateInboundRuleOutput) SequenceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) *int { return v.SequenceNumber }).(pulumi.IntPtrOutput)
}

// Deprecated: Source Type will not be returned
func (o NetworkACLTemplateInboundRuleOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// Inbound traffic source ports. Allowed values are a comma separated list
// of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
func (o NetworkACLTemplateInboundRuleOutput) SrcPort() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) string { return v.SrcPort }).(pulumi.StringOutput)
}

// Inbound traffic source IP subnet in CIDR format.
func (o NetworkACLTemplateInboundRuleOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// Inbound traffic source IP subnets in CIDR format.
//
// Deprecated: Use Subnet instead
func (o NetworkACLTemplateInboundRuleOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkACLTemplateInboundRule) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type NetworkACLTemplateInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkACLTemplateInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkACLTemplateInboundRule)(nil)).Elem()
}

func (o NetworkACLTemplateInboundRuleArrayOutput) ToNetworkACLTemplateInboundRuleArrayOutput() NetworkACLTemplateInboundRuleArrayOutput {
	return o
}

func (o NetworkACLTemplateInboundRuleArrayOutput) ToNetworkACLTemplateInboundRuleArrayOutputWithContext(ctx context.Context) NetworkACLTemplateInboundRuleArrayOutput {
	return o
}

func (o NetworkACLTemplateInboundRuleArrayOutput) Index(i pulumi.IntInput) NetworkACLTemplateInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkACLTemplateInboundRule {
		return vs[0].([]NetworkACLTemplateInboundRule)[vs[1].(int)]
	}).(NetworkACLTemplateInboundRuleOutput)
}

type NetworkDeviceClusterDetails struct {
	// The ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The name of the cluster device
	ClusterName string `pulumi:"clusterName"`
	// An object that has `node0` configuration.
	// See Cluster Details - Nodes below for more details.
	Node0 NetworkDeviceClusterDetailsNode0 `pulumi:"node0"`
	// An object that has `node1` configuration.
	// See Cluster Details - Nodes below for more details.
	Node1 NetworkDeviceClusterDetailsNode1 `pulumi:"node1"`
	// The number of nodes in the cluster.
	NumOfNodes *int `pulumi:"numOfNodes"`
}

// NetworkDeviceClusterDetailsInput is an input type that accepts NetworkDeviceClusterDetailsArgs and NetworkDeviceClusterDetailsOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsInput` via:
//
//          NetworkDeviceClusterDetailsArgs{...}
type NetworkDeviceClusterDetailsInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsOutput() NetworkDeviceClusterDetailsOutput
	ToNetworkDeviceClusterDetailsOutputWithContext(context.Context) NetworkDeviceClusterDetailsOutput
}

type NetworkDeviceClusterDetailsArgs struct {
	// The ID of the cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The name of the cluster device
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// An object that has `node0` configuration.
	// See Cluster Details - Nodes below for more details.
	Node0 NetworkDeviceClusterDetailsNode0Input `pulumi:"node0"`
	// An object that has `node1` configuration.
	// See Cluster Details - Nodes below for more details.
	Node1 NetworkDeviceClusterDetailsNode1Input `pulumi:"node1"`
	// The number of nodes in the cluster.
	NumOfNodes pulumi.IntPtrInput `pulumi:"numOfNodes"`
}

func (NetworkDeviceClusterDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetails)(nil)).Elem()
}

func (i NetworkDeviceClusterDetailsArgs) ToNetworkDeviceClusterDetailsOutput() NetworkDeviceClusterDetailsOutput {
	return i.ToNetworkDeviceClusterDetailsOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsArgs) ToNetworkDeviceClusterDetailsOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsOutput)
}

func (i NetworkDeviceClusterDetailsArgs) ToNetworkDeviceClusterDetailsPtrOutput() NetworkDeviceClusterDetailsPtrOutput {
	return i.ToNetworkDeviceClusterDetailsPtrOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsArgs) ToNetworkDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsOutput).ToNetworkDeviceClusterDetailsPtrOutputWithContext(ctx)
}

// NetworkDeviceClusterDetailsPtrInput is an input type that accepts NetworkDeviceClusterDetailsArgs, NetworkDeviceClusterDetailsPtr and NetworkDeviceClusterDetailsPtrOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsPtrInput` via:
//
//          NetworkDeviceClusterDetailsArgs{...}
//
//  or:
//
//          nil
type NetworkDeviceClusterDetailsPtrInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsPtrOutput() NetworkDeviceClusterDetailsPtrOutput
	ToNetworkDeviceClusterDetailsPtrOutputWithContext(context.Context) NetworkDeviceClusterDetailsPtrOutput
}

type networkDeviceClusterDetailsPtrType NetworkDeviceClusterDetailsArgs

func NetworkDeviceClusterDetailsPtr(v *NetworkDeviceClusterDetailsArgs) NetworkDeviceClusterDetailsPtrInput {
	return (*networkDeviceClusterDetailsPtrType)(v)
}

func (*networkDeviceClusterDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetails)(nil)).Elem()
}

func (i *networkDeviceClusterDetailsPtrType) ToNetworkDeviceClusterDetailsPtrOutput() NetworkDeviceClusterDetailsPtrOutput {
	return i.ToNetworkDeviceClusterDetailsPtrOutputWithContext(context.Background())
}

func (i *networkDeviceClusterDetailsPtrType) ToNetworkDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsPtrOutput)
}

type NetworkDeviceClusterDetailsOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetails)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsOutput) ToNetworkDeviceClusterDetailsOutput() NetworkDeviceClusterDetailsOutput {
	return o
}

func (o NetworkDeviceClusterDetailsOutput) ToNetworkDeviceClusterDetailsOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsOutput {
	return o
}

func (o NetworkDeviceClusterDetailsOutput) ToNetworkDeviceClusterDetailsPtrOutput() NetworkDeviceClusterDetailsPtrOutput {
	return o.ToNetworkDeviceClusterDetailsPtrOutputWithContext(context.Background())
}

func (o NetworkDeviceClusterDetailsOutput) ToNetworkDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceClusterDetails) *NetworkDeviceClusterDetails {
		return &v
	}).(NetworkDeviceClusterDetailsPtrOutput)
}

// The ID of the cluster.
func (o NetworkDeviceClusterDetailsOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetails) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The name of the cluster device
func (o NetworkDeviceClusterDetailsOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetails) string { return v.ClusterName }).(pulumi.StringOutput)
}

// An object that has `node0` configuration.
// See Cluster Details - Nodes below for more details.
func (o NetworkDeviceClusterDetailsOutput) Node0() NetworkDeviceClusterDetailsNode0Output {
	return o.ApplyT(func(v NetworkDeviceClusterDetails) NetworkDeviceClusterDetailsNode0 { return v.Node0 }).(NetworkDeviceClusterDetailsNode0Output)
}

// An object that has `node1` configuration.
// See Cluster Details - Nodes below for more details.
func (o NetworkDeviceClusterDetailsOutput) Node1() NetworkDeviceClusterDetailsNode1Output {
	return o.ApplyT(func(v NetworkDeviceClusterDetails) NetworkDeviceClusterDetailsNode1 { return v.Node1 }).(NetworkDeviceClusterDetailsNode1Output)
}

// The number of nodes in the cluster.
func (o NetworkDeviceClusterDetailsOutput) NumOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetails) *int { return v.NumOfNodes }).(pulumi.IntPtrOutput)
}

type NetworkDeviceClusterDetailsPtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetails)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsPtrOutput) ToNetworkDeviceClusterDetailsPtrOutput() NetworkDeviceClusterDetailsPtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsPtrOutput) ToNetworkDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsPtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsPtrOutput) Elem() NetworkDeviceClusterDetailsOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetails) NetworkDeviceClusterDetails {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceClusterDetails
		return ret
	}).(NetworkDeviceClusterDetailsOutput)
}

// The ID of the cluster.
func (o NetworkDeviceClusterDetailsPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetails) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster device
func (o NetworkDeviceClusterDetailsPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetails) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// An object that has `node0` configuration.
// See Cluster Details - Nodes below for more details.
func (o NetworkDeviceClusterDetailsPtrOutput) Node0() NetworkDeviceClusterDetailsNode0PtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetails) *NetworkDeviceClusterDetailsNode0 {
		if v == nil {
			return nil
		}
		return &v.Node0
	}).(NetworkDeviceClusterDetailsNode0PtrOutput)
}

// An object that has `node1` configuration.
// See Cluster Details - Nodes below for more details.
func (o NetworkDeviceClusterDetailsPtrOutput) Node1() NetworkDeviceClusterDetailsNode1PtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetails) *NetworkDeviceClusterDetailsNode1 {
		if v == nil {
			return nil
		}
		return &v.Node1
	}).(NetworkDeviceClusterDetailsNode1PtrOutput)
}

// The number of nodes in the cluster.
func (o NetworkDeviceClusterDetailsPtrOutput) NumOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetails) *int {
		if v == nil {
			return nil
		}
		return v.NumOfNodes
	}).(pulumi.IntPtrOutput)
}

type NetworkDeviceClusterDetailsNode0 struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device name.
	Name *string `pulumi:"name"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration *NetworkDeviceClusterDetailsNode0VendorConfiguration `pulumi:"vendorConfiguration"`
}

// NetworkDeviceClusterDetailsNode0Input is an input type that accepts NetworkDeviceClusterDetailsNode0Args and NetworkDeviceClusterDetailsNode0Output values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode0Input` via:
//
//          NetworkDeviceClusterDetailsNode0Args{...}
type NetworkDeviceClusterDetailsNode0Input interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode0Output() NetworkDeviceClusterDetailsNode0Output
	ToNetworkDeviceClusterDetailsNode0OutputWithContext(context.Context) NetworkDeviceClusterDetailsNode0Output
}

type NetworkDeviceClusterDetailsNode0Args struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringPtrInput `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrInput `pulumi:"licenseToken"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device unique identifier.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration NetworkDeviceClusterDetailsNode0VendorConfigurationPtrInput `pulumi:"vendorConfiguration"`
}

func (NetworkDeviceClusterDetailsNode0Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode0)(nil)).Elem()
}

func (i NetworkDeviceClusterDetailsNode0Args) ToNetworkDeviceClusterDetailsNode0Output() NetworkDeviceClusterDetailsNode0Output {
	return i.ToNetworkDeviceClusterDetailsNode0OutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode0Args) ToNetworkDeviceClusterDetailsNode0OutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode0Output)
}

func (i NetworkDeviceClusterDetailsNode0Args) ToNetworkDeviceClusterDetailsNode0PtrOutput() NetworkDeviceClusterDetailsNode0PtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode0Args) ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode0Output).ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(ctx)
}

// NetworkDeviceClusterDetailsNode0PtrInput is an input type that accepts NetworkDeviceClusterDetailsNode0Args, NetworkDeviceClusterDetailsNode0Ptr and NetworkDeviceClusterDetailsNode0PtrOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode0PtrInput` via:
//
//          NetworkDeviceClusterDetailsNode0Args{...}
//
//  or:
//
//          nil
type NetworkDeviceClusterDetailsNode0PtrInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode0PtrOutput() NetworkDeviceClusterDetailsNode0PtrOutput
	ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(context.Context) NetworkDeviceClusterDetailsNode0PtrOutput
}

type networkDeviceClusterDetailsNode0PtrType NetworkDeviceClusterDetailsNode0Args

func NetworkDeviceClusterDetailsNode0Ptr(v *NetworkDeviceClusterDetailsNode0Args) NetworkDeviceClusterDetailsNode0PtrInput {
	return (*networkDeviceClusterDetailsNode0PtrType)(v)
}

func (*networkDeviceClusterDetailsNode0PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode0)(nil)).Elem()
}

func (i *networkDeviceClusterDetailsNode0PtrType) ToNetworkDeviceClusterDetailsNode0PtrOutput() NetworkDeviceClusterDetailsNode0PtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(context.Background())
}

func (i *networkDeviceClusterDetailsNode0PtrType) ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode0PtrOutput)
}

type NetworkDeviceClusterDetailsNode0Output struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode0Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode0)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode0Output) ToNetworkDeviceClusterDetailsNode0Output() NetworkDeviceClusterDetailsNode0Output {
	return o
}

func (o NetworkDeviceClusterDetailsNode0Output) ToNetworkDeviceClusterDetailsNode0OutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0Output {
	return o
}

func (o NetworkDeviceClusterDetailsNode0Output) ToNetworkDeviceClusterDetailsNode0PtrOutput() NetworkDeviceClusterDetailsNode0PtrOutput {
	return o.ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(context.Background())
}

func (o NetworkDeviceClusterDetailsNode0Output) ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceClusterDetailsNode0) *NetworkDeviceClusterDetailsNode0 {
		return &v
	}).(NetworkDeviceClusterDetailsNode0PtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceClusterDetailsNode0Output) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0) *string { return v.LicenseFileId }).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o NetworkDeviceClusterDetailsNode0Output) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0) *string { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceClusterDetailsNode0Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o NetworkDeviceClusterDetailsNode0Output) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o NetworkDeviceClusterDetailsNode0Output) VendorConfiguration() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0) *NetworkDeviceClusterDetailsNode0VendorConfiguration {
		return v.VendorConfiguration
	}).(NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

type NetworkDeviceClusterDetailsNode0PtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode0PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode0)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode0PtrOutput) ToNetworkDeviceClusterDetailsNode0PtrOutput() NetworkDeviceClusterDetailsNode0PtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode0PtrOutput) ToNetworkDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0PtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode0PtrOutput) Elem() NetworkDeviceClusterDetailsNode0Output {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0) NetworkDeviceClusterDetailsNode0 {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceClusterDetailsNode0
		return ret
	}).(NetworkDeviceClusterDetailsNode0Output)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceClusterDetailsNode0PtrOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFileId
	}).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o NetworkDeviceClusterDetailsNode0PtrOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.LicenseToken
	}).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceClusterDetailsNode0PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o NetworkDeviceClusterDetailsNode0PtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o NetworkDeviceClusterDetailsNode0PtrOutput) VendorConfiguration() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0) *NetworkDeviceClusterDetailsNode0VendorConfiguration {
		if v == nil {
			return nil
		}
		return v.VendorConfiguration
	}).(NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

type NetworkDeviceClusterDetailsNode0VendorConfiguration struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey *string `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword *string `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 *string `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn *string `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname *string `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword *string `pulumi:"rootPassword"`
}

// NetworkDeviceClusterDetailsNode0VendorConfigurationInput is an input type that accepts NetworkDeviceClusterDetailsNode0VendorConfigurationArgs and NetworkDeviceClusterDetailsNode0VendorConfigurationOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode0VendorConfigurationInput` via:
//
//          NetworkDeviceClusterDetailsNode0VendorConfigurationArgs{...}
type NetworkDeviceClusterDetailsNode0VendorConfigurationInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationOutput
	ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationOutput
}

type NetworkDeviceClusterDetailsNode0VendorConfigurationArgs struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey pulumi.StringPtrInput `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 pulumi.StringPtrInput `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn pulumi.StringPtrInput `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword pulumi.StringPtrInput `pulumi:"rootPassword"`
}

func (NetworkDeviceClusterDetailsNode0VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (i NetworkDeviceClusterDetailsNode0VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationOutput {
	return i.ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode0VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode0VendorConfigurationOutput)
}

func (i NetworkDeviceClusterDetailsNode0VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode0VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode0VendorConfigurationOutput).ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx)
}

// NetworkDeviceClusterDetailsNode0VendorConfigurationPtrInput is an input type that accepts NetworkDeviceClusterDetailsNode0VendorConfigurationArgs, NetworkDeviceClusterDetailsNode0VendorConfigurationPtr and NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode0VendorConfigurationPtrInput` via:
//
//          NetworkDeviceClusterDetailsNode0VendorConfigurationArgs{...}
//
//  or:
//
//          nil
type NetworkDeviceClusterDetailsNode0VendorConfigurationPtrInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput
	ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput
}

type networkDeviceClusterDetailsNode0VendorConfigurationPtrType NetworkDeviceClusterDetailsNode0VendorConfigurationArgs

func NetworkDeviceClusterDetailsNode0VendorConfigurationPtr(v *NetworkDeviceClusterDetailsNode0VendorConfigurationArgs) NetworkDeviceClusterDetailsNode0VendorConfigurationPtrInput {
	return (*networkDeviceClusterDetailsNode0VendorConfigurationPtrType)(v)
}

func (*networkDeviceClusterDetailsNode0VendorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (i *networkDeviceClusterDetailsNode0VendorConfigurationPtrType) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i *networkDeviceClusterDetailsNode0VendorConfigurationPtrType) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

type NetworkDeviceClusterDetailsNode0VendorConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Background())
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceClusterDetailsNode0VendorConfiguration) *NetworkDeviceClusterDetailsNode0VendorConfiguration {
		return &v
	}).(NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0VendorConfiguration) *string { return v.ActivationKey }).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0VendorConfiguration) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0VendorConfiguration) *string { return v.Controller1 }).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0VendorConfiguration) *string { return v.ControllerFqdn }).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0VendorConfiguration) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode0VendorConfiguration) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

type NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) ToNetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) Elem() NetworkDeviceClusterDetailsNode0VendorConfigurationOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) NetworkDeviceClusterDetailsNode0VendorConfiguration {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceClusterDetailsNode0VendorConfiguration
		return ret
	}).(NetworkDeviceClusterDetailsNode0VendorConfigurationOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ActivationKey
	}).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Controller1
	}).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ControllerFqdn
	}).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

type NetworkDeviceClusterDetailsNode1 struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device name.
	Name *string `pulumi:"name"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration *NetworkDeviceClusterDetailsNode1VendorConfiguration `pulumi:"vendorConfiguration"`
}

// NetworkDeviceClusterDetailsNode1Input is an input type that accepts NetworkDeviceClusterDetailsNode1Args and NetworkDeviceClusterDetailsNode1Output values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode1Input` via:
//
//          NetworkDeviceClusterDetailsNode1Args{...}
type NetworkDeviceClusterDetailsNode1Input interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode1Output() NetworkDeviceClusterDetailsNode1Output
	ToNetworkDeviceClusterDetailsNode1OutputWithContext(context.Context) NetworkDeviceClusterDetailsNode1Output
}

type NetworkDeviceClusterDetailsNode1Args struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringPtrInput `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrInput `pulumi:"licenseToken"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device unique identifier.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration NetworkDeviceClusterDetailsNode1VendorConfigurationPtrInput `pulumi:"vendorConfiguration"`
}

func (NetworkDeviceClusterDetailsNode1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode1)(nil)).Elem()
}

func (i NetworkDeviceClusterDetailsNode1Args) ToNetworkDeviceClusterDetailsNode1Output() NetworkDeviceClusterDetailsNode1Output {
	return i.ToNetworkDeviceClusterDetailsNode1OutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode1Args) ToNetworkDeviceClusterDetailsNode1OutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode1Output)
}

func (i NetworkDeviceClusterDetailsNode1Args) ToNetworkDeviceClusterDetailsNode1PtrOutput() NetworkDeviceClusterDetailsNode1PtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode1Args) ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode1Output).ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(ctx)
}

// NetworkDeviceClusterDetailsNode1PtrInput is an input type that accepts NetworkDeviceClusterDetailsNode1Args, NetworkDeviceClusterDetailsNode1Ptr and NetworkDeviceClusterDetailsNode1PtrOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode1PtrInput` via:
//
//          NetworkDeviceClusterDetailsNode1Args{...}
//
//  or:
//
//          nil
type NetworkDeviceClusterDetailsNode1PtrInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode1PtrOutput() NetworkDeviceClusterDetailsNode1PtrOutput
	ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(context.Context) NetworkDeviceClusterDetailsNode1PtrOutput
}

type networkDeviceClusterDetailsNode1PtrType NetworkDeviceClusterDetailsNode1Args

func NetworkDeviceClusterDetailsNode1Ptr(v *NetworkDeviceClusterDetailsNode1Args) NetworkDeviceClusterDetailsNode1PtrInput {
	return (*networkDeviceClusterDetailsNode1PtrType)(v)
}

func (*networkDeviceClusterDetailsNode1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode1)(nil)).Elem()
}

func (i *networkDeviceClusterDetailsNode1PtrType) ToNetworkDeviceClusterDetailsNode1PtrOutput() NetworkDeviceClusterDetailsNode1PtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(context.Background())
}

func (i *networkDeviceClusterDetailsNode1PtrType) ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode1PtrOutput)
}

type NetworkDeviceClusterDetailsNode1Output struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode1)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode1Output) ToNetworkDeviceClusterDetailsNode1Output() NetworkDeviceClusterDetailsNode1Output {
	return o
}

func (o NetworkDeviceClusterDetailsNode1Output) ToNetworkDeviceClusterDetailsNode1OutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1Output {
	return o
}

func (o NetworkDeviceClusterDetailsNode1Output) ToNetworkDeviceClusterDetailsNode1PtrOutput() NetworkDeviceClusterDetailsNode1PtrOutput {
	return o.ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(context.Background())
}

func (o NetworkDeviceClusterDetailsNode1Output) ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceClusterDetailsNode1) *NetworkDeviceClusterDetailsNode1 {
		return &v
	}).(NetworkDeviceClusterDetailsNode1PtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceClusterDetailsNode1Output) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1) *string { return v.LicenseFileId }).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o NetworkDeviceClusterDetailsNode1Output) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1) *string { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceClusterDetailsNode1Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o NetworkDeviceClusterDetailsNode1Output) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o NetworkDeviceClusterDetailsNode1Output) VendorConfiguration() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1) *NetworkDeviceClusterDetailsNode1VendorConfiguration {
		return v.VendorConfiguration
	}).(NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

type NetworkDeviceClusterDetailsNode1PtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode1)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode1PtrOutput) ToNetworkDeviceClusterDetailsNode1PtrOutput() NetworkDeviceClusterDetailsNode1PtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode1PtrOutput) ToNetworkDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1PtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode1PtrOutput) Elem() NetworkDeviceClusterDetailsNode1Output {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1) NetworkDeviceClusterDetailsNode1 {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceClusterDetailsNode1
		return ret
	}).(NetworkDeviceClusterDetailsNode1Output)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceClusterDetailsNode1PtrOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFileId
	}).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o NetworkDeviceClusterDetailsNode1PtrOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.LicenseToken
	}).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceClusterDetailsNode1PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o NetworkDeviceClusterDetailsNode1PtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o NetworkDeviceClusterDetailsNode1PtrOutput) VendorConfiguration() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1) *NetworkDeviceClusterDetailsNode1VendorConfiguration {
		if v == nil {
			return nil
		}
		return v.VendorConfiguration
	}).(NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

type NetworkDeviceClusterDetailsNode1VendorConfiguration struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey *string `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword *string `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 *string `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn *string `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname *string `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword *string `pulumi:"rootPassword"`
}

// NetworkDeviceClusterDetailsNode1VendorConfigurationInput is an input type that accepts NetworkDeviceClusterDetailsNode1VendorConfigurationArgs and NetworkDeviceClusterDetailsNode1VendorConfigurationOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode1VendorConfigurationInput` via:
//
//          NetworkDeviceClusterDetailsNode1VendorConfigurationArgs{...}
type NetworkDeviceClusterDetailsNode1VendorConfigurationInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationOutput
	ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationOutput
}

type NetworkDeviceClusterDetailsNode1VendorConfigurationArgs struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey pulumi.StringPtrInput `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 pulumi.StringPtrInput `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn pulumi.StringPtrInput `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword pulumi.StringPtrInput `pulumi:"rootPassword"`
}

func (NetworkDeviceClusterDetailsNode1VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (i NetworkDeviceClusterDetailsNode1VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationOutput {
	return i.ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode1VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode1VendorConfigurationOutput)
}

func (i NetworkDeviceClusterDetailsNode1VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i NetworkDeviceClusterDetailsNode1VendorConfigurationArgs) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode1VendorConfigurationOutput).ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx)
}

// NetworkDeviceClusterDetailsNode1VendorConfigurationPtrInput is an input type that accepts NetworkDeviceClusterDetailsNode1VendorConfigurationArgs, NetworkDeviceClusterDetailsNode1VendorConfigurationPtr and NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput values.
// You can construct a concrete instance of `NetworkDeviceClusterDetailsNode1VendorConfigurationPtrInput` via:
//
//          NetworkDeviceClusterDetailsNode1VendorConfigurationArgs{...}
//
//  or:
//
//          nil
type NetworkDeviceClusterDetailsNode1VendorConfigurationPtrInput interface {
	pulumi.Input

	ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput
	ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput
}

type networkDeviceClusterDetailsNode1VendorConfigurationPtrType NetworkDeviceClusterDetailsNode1VendorConfigurationArgs

func NetworkDeviceClusterDetailsNode1VendorConfigurationPtr(v *NetworkDeviceClusterDetailsNode1VendorConfigurationArgs) NetworkDeviceClusterDetailsNode1VendorConfigurationPtrInput {
	return (*networkDeviceClusterDetailsNode1VendorConfigurationPtrType)(v)
}

func (*networkDeviceClusterDetailsNode1VendorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (i *networkDeviceClusterDetailsNode1VendorConfigurationPtrType) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return i.ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i *networkDeviceClusterDetailsNode1VendorConfigurationPtrType) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

type NetworkDeviceClusterDetailsNode1VendorConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Background())
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceClusterDetailsNode1VendorConfiguration) *NetworkDeviceClusterDetailsNode1VendorConfiguration {
		return &v
	}).(NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1VendorConfiguration) *string { return v.ActivationKey }).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1VendorConfiguration) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1VendorConfiguration) *string { return v.Controller1 }).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1VendorConfiguration) *string { return v.ControllerFqdn }).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1VendorConfiguration) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceClusterDetailsNode1VendorConfiguration) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

type NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput() NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) ToNetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o
}

func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) Elem() NetworkDeviceClusterDetailsNode1VendorConfigurationOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) NetworkDeviceClusterDetailsNode1VendorConfiguration {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceClusterDetailsNode1VendorConfiguration
		return ret
	}).(NetworkDeviceClusterDetailsNode1VendorConfigurationOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ActivationKey
	}).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Controller1
	}).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ControllerFqdn
	}).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

type NetworkDeviceInterface struct {
	// interface management type (Equinix Managed or empty).
	AssignedType *string `pulumi:"assignedType"`
	// interface identifier.
	Id *int `pulumi:"id"`
	// interface IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// Device name.
	Name *string `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus *string `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// interface type.
	Type *string `pulumi:"type"`
}

// NetworkDeviceInterfaceInput is an input type that accepts NetworkDeviceInterfaceArgs and NetworkDeviceInterfaceOutput values.
// You can construct a concrete instance of `NetworkDeviceInterfaceInput` via:
//
//          NetworkDeviceInterfaceArgs{...}
type NetworkDeviceInterfaceInput interface {
	pulumi.Input

	ToNetworkDeviceInterfaceOutput() NetworkDeviceInterfaceOutput
	ToNetworkDeviceInterfaceOutputWithContext(context.Context) NetworkDeviceInterfaceOutput
}

type NetworkDeviceInterfaceArgs struct {
	// interface management type (Equinix Managed or empty).
	AssignedType pulumi.StringPtrInput `pulumi:"assignedType"`
	// interface identifier.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// interface IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus pulumi.StringPtrInput `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// interface type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworkDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceInterface)(nil)).Elem()
}

func (i NetworkDeviceInterfaceArgs) ToNetworkDeviceInterfaceOutput() NetworkDeviceInterfaceOutput {
	return i.ToNetworkDeviceInterfaceOutputWithContext(context.Background())
}

func (i NetworkDeviceInterfaceArgs) ToNetworkDeviceInterfaceOutputWithContext(ctx context.Context) NetworkDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceInterfaceOutput)
}

// NetworkDeviceInterfaceArrayInput is an input type that accepts NetworkDeviceInterfaceArray and NetworkDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkDeviceInterfaceArrayInput` via:
//
//          NetworkDeviceInterfaceArray{ NetworkDeviceInterfaceArgs{...} }
type NetworkDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkDeviceInterfaceArrayOutput() NetworkDeviceInterfaceArrayOutput
	ToNetworkDeviceInterfaceArrayOutputWithContext(context.Context) NetworkDeviceInterfaceArrayOutput
}

type NetworkDeviceInterfaceArray []NetworkDeviceInterfaceInput

func (NetworkDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceInterface)(nil)).Elem()
}

func (i NetworkDeviceInterfaceArray) ToNetworkDeviceInterfaceArrayOutput() NetworkDeviceInterfaceArrayOutput {
	return i.ToNetworkDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkDeviceInterfaceArray) ToNetworkDeviceInterfaceArrayOutputWithContext(ctx context.Context) NetworkDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceInterfaceArrayOutput)
}

type NetworkDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceInterface)(nil)).Elem()
}

func (o NetworkDeviceInterfaceOutput) ToNetworkDeviceInterfaceOutput() NetworkDeviceInterfaceOutput {
	return o
}

func (o NetworkDeviceInterfaceOutput) ToNetworkDeviceInterfaceOutputWithContext(ctx context.Context) NetworkDeviceInterfaceOutput {
	return o
}

// interface management type (Equinix Managed or empty).
func (o NetworkDeviceInterfaceOutput) AssignedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.AssignedType }).(pulumi.StringPtrOutput)
}

// interface identifier.
func (o NetworkDeviceInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// interface IP address.
func (o NetworkDeviceInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// interface MAC address.
func (o NetworkDeviceInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// interface operational status. One of `up`, `down`.
func (o NetworkDeviceInterfaceOutput) OperationalStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.OperationalStatus }).(pulumi.StringPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o NetworkDeviceInterfaceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// interface type.
func (o NetworkDeviceInterfaceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceInterface) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworkDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceInterface)(nil)).Elem()
}

func (o NetworkDeviceInterfaceArrayOutput) ToNetworkDeviceInterfaceArrayOutput() NetworkDeviceInterfaceArrayOutput {
	return o
}

func (o NetworkDeviceInterfaceArrayOutput) ToNetworkDeviceInterfaceArrayOutputWithContext(ctx context.Context) NetworkDeviceInterfaceArrayOutput {
	return o
}

func (o NetworkDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkDeviceInterface {
		return vs[0].([]NetworkDeviceInterface)[vs[1].(int)]
	}).(NetworkDeviceInterfaceOutput)
}

type NetworkDeviceLinkDevice struct {
	// Device ASN number. Not required for self configured devices.
	Asn *int `pulumi:"asn"`
	// Device identifier.
	Id string `pulumi:"id"`
	// Device network interface identifier to use for device link
	// connection.
	InterfaceId *int `pulumi:"interfaceId"`
	// IP address from device link subnet that was assigned to the device
	IpAddress *string `pulumi:"ipAddress"`
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status *string `pulumi:"status"`
}

// NetworkDeviceLinkDeviceInput is an input type that accepts NetworkDeviceLinkDeviceArgs and NetworkDeviceLinkDeviceOutput values.
// You can construct a concrete instance of `NetworkDeviceLinkDeviceInput` via:
//
//          NetworkDeviceLinkDeviceArgs{...}
type NetworkDeviceLinkDeviceInput interface {
	pulumi.Input

	ToNetworkDeviceLinkDeviceOutput() NetworkDeviceLinkDeviceOutput
	ToNetworkDeviceLinkDeviceOutputWithContext(context.Context) NetworkDeviceLinkDeviceOutput
}

type NetworkDeviceLinkDeviceArgs struct {
	// Device ASN number. Not required for self configured devices.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
	// Device identifier.
	Id pulumi.StringInput `pulumi:"id"`
	// Device network interface identifier to use for device link
	// connection.
	InterfaceId pulumi.IntPtrInput `pulumi:"interfaceId"`
	// IP address from device link subnet that was assigned to the device
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (NetworkDeviceLinkDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceLinkDevice)(nil)).Elem()
}

func (i NetworkDeviceLinkDeviceArgs) ToNetworkDeviceLinkDeviceOutput() NetworkDeviceLinkDeviceOutput {
	return i.ToNetworkDeviceLinkDeviceOutputWithContext(context.Background())
}

func (i NetworkDeviceLinkDeviceArgs) ToNetworkDeviceLinkDeviceOutputWithContext(ctx context.Context) NetworkDeviceLinkDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkDeviceOutput)
}

// NetworkDeviceLinkDeviceArrayInput is an input type that accepts NetworkDeviceLinkDeviceArray and NetworkDeviceLinkDeviceArrayOutput values.
// You can construct a concrete instance of `NetworkDeviceLinkDeviceArrayInput` via:
//
//          NetworkDeviceLinkDeviceArray{ NetworkDeviceLinkDeviceArgs{...} }
type NetworkDeviceLinkDeviceArrayInput interface {
	pulumi.Input

	ToNetworkDeviceLinkDeviceArrayOutput() NetworkDeviceLinkDeviceArrayOutput
	ToNetworkDeviceLinkDeviceArrayOutputWithContext(context.Context) NetworkDeviceLinkDeviceArrayOutput
}

type NetworkDeviceLinkDeviceArray []NetworkDeviceLinkDeviceInput

func (NetworkDeviceLinkDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceLinkDevice)(nil)).Elem()
}

func (i NetworkDeviceLinkDeviceArray) ToNetworkDeviceLinkDeviceArrayOutput() NetworkDeviceLinkDeviceArrayOutput {
	return i.ToNetworkDeviceLinkDeviceArrayOutputWithContext(context.Background())
}

func (i NetworkDeviceLinkDeviceArray) ToNetworkDeviceLinkDeviceArrayOutputWithContext(ctx context.Context) NetworkDeviceLinkDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkDeviceArrayOutput)
}

type NetworkDeviceLinkDeviceOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceLinkDevice)(nil)).Elem()
}

func (o NetworkDeviceLinkDeviceOutput) ToNetworkDeviceLinkDeviceOutput() NetworkDeviceLinkDeviceOutput {
	return o
}

func (o NetworkDeviceLinkDeviceOutput) ToNetworkDeviceLinkDeviceOutputWithContext(ctx context.Context) NetworkDeviceLinkDeviceOutput {
	return o
}

// Device ASN number. Not required for self configured devices.
func (o NetworkDeviceLinkDeviceOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceLinkDevice) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

// Device identifier.
func (o NetworkDeviceLinkDeviceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceLinkDevice) string { return v.Id }).(pulumi.StringOutput)
}

// Device network interface identifier to use for device link
// connection.
func (o NetworkDeviceLinkDeviceOutput) InterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceLinkDevice) *int { return v.InterfaceId }).(pulumi.IntPtrOutput)
}

// IP address from device link subnet that was assigned to the device
func (o NetworkDeviceLinkDeviceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceLinkDevice) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// device link provisioning status on a given device. One of `PROVISIONING`,
// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
func (o NetworkDeviceLinkDeviceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceLinkDevice) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type NetworkDeviceLinkDeviceArrayOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceLinkDevice)(nil)).Elem()
}

func (o NetworkDeviceLinkDeviceArrayOutput) ToNetworkDeviceLinkDeviceArrayOutput() NetworkDeviceLinkDeviceArrayOutput {
	return o
}

func (o NetworkDeviceLinkDeviceArrayOutput) ToNetworkDeviceLinkDeviceArrayOutputWithContext(ctx context.Context) NetworkDeviceLinkDeviceArrayOutput {
	return o
}

func (o NetworkDeviceLinkDeviceArrayOutput) Index(i pulumi.IntInput) NetworkDeviceLinkDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkDeviceLinkDevice {
		return vs[0].([]NetworkDeviceLinkDevice)[vs[1].(int)]
	}).(NetworkDeviceLinkDeviceOutput)
}

type NetworkDeviceLinkLink struct {
	// billing account number to be used for
	// connection charges
	AccountNumber string `pulumi:"accountNumber"`
	// connection destination metro code.
	DstMetroCode string `pulumi:"dstMetroCode"`
	// connection destination zone code is not required.
	//
	// Deprecated: DestinationZoneCode is not required
	DstZoneCode *string `pulumi:"dstZoneCode"`
	// connection source metro code.
	SrcMetroCode string `pulumi:"srcMetroCode"`
	// connection source zone code is not required.
	//
	// Deprecated: SourceZoneCode is not required
	SrcZoneCode *string `pulumi:"srcZoneCode"`
	// connection throughput.
	Throughput string `pulumi:"throughput"`
	// connection throughput unit (Mbps or Gbps).
	ThroughputUnit string `pulumi:"throughputUnit"`
}

// NetworkDeviceLinkLinkInput is an input type that accepts NetworkDeviceLinkLinkArgs and NetworkDeviceLinkLinkOutput values.
// You can construct a concrete instance of `NetworkDeviceLinkLinkInput` via:
//
//          NetworkDeviceLinkLinkArgs{...}
type NetworkDeviceLinkLinkInput interface {
	pulumi.Input

	ToNetworkDeviceLinkLinkOutput() NetworkDeviceLinkLinkOutput
	ToNetworkDeviceLinkLinkOutputWithContext(context.Context) NetworkDeviceLinkLinkOutput
}

type NetworkDeviceLinkLinkArgs struct {
	// billing account number to be used for
	// connection charges
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// connection destination metro code.
	DstMetroCode pulumi.StringInput `pulumi:"dstMetroCode"`
	// connection destination zone code is not required.
	//
	// Deprecated: DestinationZoneCode is not required
	DstZoneCode pulumi.StringPtrInput `pulumi:"dstZoneCode"`
	// connection source metro code.
	SrcMetroCode pulumi.StringInput `pulumi:"srcMetroCode"`
	// connection source zone code is not required.
	//
	// Deprecated: SourceZoneCode is not required
	SrcZoneCode pulumi.StringPtrInput `pulumi:"srcZoneCode"`
	// connection throughput.
	Throughput pulumi.StringInput `pulumi:"throughput"`
	// connection throughput unit (Mbps or Gbps).
	ThroughputUnit pulumi.StringInput `pulumi:"throughputUnit"`
}

func (NetworkDeviceLinkLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceLinkLink)(nil)).Elem()
}

func (i NetworkDeviceLinkLinkArgs) ToNetworkDeviceLinkLinkOutput() NetworkDeviceLinkLinkOutput {
	return i.ToNetworkDeviceLinkLinkOutputWithContext(context.Background())
}

func (i NetworkDeviceLinkLinkArgs) ToNetworkDeviceLinkLinkOutputWithContext(ctx context.Context) NetworkDeviceLinkLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkLinkOutput)
}

// NetworkDeviceLinkLinkArrayInput is an input type that accepts NetworkDeviceLinkLinkArray and NetworkDeviceLinkLinkArrayOutput values.
// You can construct a concrete instance of `NetworkDeviceLinkLinkArrayInput` via:
//
//          NetworkDeviceLinkLinkArray{ NetworkDeviceLinkLinkArgs{...} }
type NetworkDeviceLinkLinkArrayInput interface {
	pulumi.Input

	ToNetworkDeviceLinkLinkArrayOutput() NetworkDeviceLinkLinkArrayOutput
	ToNetworkDeviceLinkLinkArrayOutputWithContext(context.Context) NetworkDeviceLinkLinkArrayOutput
}

type NetworkDeviceLinkLinkArray []NetworkDeviceLinkLinkInput

func (NetworkDeviceLinkLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceLinkLink)(nil)).Elem()
}

func (i NetworkDeviceLinkLinkArray) ToNetworkDeviceLinkLinkArrayOutput() NetworkDeviceLinkLinkArrayOutput {
	return i.ToNetworkDeviceLinkLinkArrayOutputWithContext(context.Background())
}

func (i NetworkDeviceLinkLinkArray) ToNetworkDeviceLinkLinkArrayOutputWithContext(ctx context.Context) NetworkDeviceLinkLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceLinkLinkArrayOutput)
}

type NetworkDeviceLinkLinkOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceLinkLink)(nil)).Elem()
}

func (o NetworkDeviceLinkLinkOutput) ToNetworkDeviceLinkLinkOutput() NetworkDeviceLinkLinkOutput {
	return o
}

func (o NetworkDeviceLinkLinkOutput) ToNetworkDeviceLinkLinkOutputWithContext(ctx context.Context) NetworkDeviceLinkLinkOutput {
	return o
}

// billing account number to be used for
// connection charges
func (o NetworkDeviceLinkLinkOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// connection destination metro code.
func (o NetworkDeviceLinkLinkOutput) DstMetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) string { return v.DstMetroCode }).(pulumi.StringOutput)
}

// connection destination zone code is not required.
//
// Deprecated: DestinationZoneCode is not required
func (o NetworkDeviceLinkLinkOutput) DstZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) *string { return v.DstZoneCode }).(pulumi.StringPtrOutput)
}

// connection source metro code.
func (o NetworkDeviceLinkLinkOutput) SrcMetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) string { return v.SrcMetroCode }).(pulumi.StringOutput)
}

// connection source zone code is not required.
//
// Deprecated: SourceZoneCode is not required
func (o NetworkDeviceLinkLinkOutput) SrcZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) *string { return v.SrcZoneCode }).(pulumi.StringPtrOutput)
}

// connection throughput.
func (o NetworkDeviceLinkLinkOutput) Throughput() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) string { return v.Throughput }).(pulumi.StringOutput)
}

// connection throughput unit (Mbps or Gbps).
func (o NetworkDeviceLinkLinkOutput) ThroughputUnit() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceLinkLink) string { return v.ThroughputUnit }).(pulumi.StringOutput)
}

type NetworkDeviceLinkLinkArrayOutput struct{ *pulumi.OutputState }

func (NetworkDeviceLinkLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceLinkLink)(nil)).Elem()
}

func (o NetworkDeviceLinkLinkArrayOutput) ToNetworkDeviceLinkLinkArrayOutput() NetworkDeviceLinkLinkArrayOutput {
	return o
}

func (o NetworkDeviceLinkLinkArrayOutput) ToNetworkDeviceLinkLinkArrayOutputWithContext(ctx context.Context) NetworkDeviceLinkLinkArrayOutput {
	return o
}

func (o NetworkDeviceLinkLinkArrayOutput) Index(i pulumi.IntInput) NetworkDeviceLinkLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkDeviceLinkLink {
		return vs[0].([]NetworkDeviceLinkLink)[vs[1].(int)]
	}).(NetworkDeviceLinkLinkOutput)
}

type NetworkDeviceSecondaryDevice struct {
	// Billing account number for secondary device.
	AccountNumber string `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied
	// on a secondary device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, for a secondary
	// device.
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn *int `pulumi:"asn"`
	// Secondary device hostname.
	Hostname *string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx *string `pulumi:"ibx"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces []NetworkDeviceSecondaryDeviceInterface `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// secondary device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus *string `pulumi:"licenseStatus"`
	// License Token can be provided for some device types o the device.
	LicenseToken *string `pulumi:"licenseToken"`
	// Metro location of a secondary device.
	MetroCode string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	// * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
	//   device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Secondary device name.
	Name string `pulumi:"name"`
	// List of email addresses that will receive notifications about
	// secondary device.
	Notifications []string `pulumi:"notifications"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId *string `pulumi:"redundantId"`
	// Device location region.
	Region *string `pulumi:"region"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress *string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn *string                             `pulumi:"sshIpFqdn"`
	SshKey    *NetworkDeviceSecondaryDeviceSshKey `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// Key/Value pairs of vendor specific configuration parameters
	// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
	// `systemIpAddress`.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	WanInterfaceId      *string           `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode *string `pulumi:"zoneCode"`
}

// NetworkDeviceSecondaryDeviceInput is an input type that accepts NetworkDeviceSecondaryDeviceArgs and NetworkDeviceSecondaryDeviceOutput values.
// You can construct a concrete instance of `NetworkDeviceSecondaryDeviceInput` via:
//
//          NetworkDeviceSecondaryDeviceArgs{...}
type NetworkDeviceSecondaryDeviceInput interface {
	pulumi.Input

	ToNetworkDeviceSecondaryDeviceOutput() NetworkDeviceSecondaryDeviceOutput
	ToNetworkDeviceSecondaryDeviceOutputWithContext(context.Context) NetworkDeviceSecondaryDeviceOutput
}

type NetworkDeviceSecondaryDeviceArgs struct {
	// Billing account number for secondary device.
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied
	// on a secondary device.
	AclTemplateId pulumi.StringPtrInput `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, for a secondary
	// device.
	AdditionalBandwidth pulumi.IntPtrInput `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
	// Secondary device hostname.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringPtrInput `pulumi:"ibx"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces NetworkDeviceSecondaryDeviceInterfaceArrayInput `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// secondary device. Applicable for some devices types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput `pulumi:"licenseFile"`
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringPtrInput `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringPtrInput `pulumi:"licenseStatus"`
	// License Token can be provided for some device types o the device.
	LicenseToken pulumi.StringPtrInput `pulumi:"licenseToken"`
	// Metro location of a secondary device.
	MetroCode pulumi.StringInput `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	// * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
	//   device.
	MgmtAclTemplateUuid pulumi.StringPtrInput `pulumi:"mgmtAclTemplateUuid"`
	// Secondary device name.
	Name pulumi.StringInput `pulumi:"name"`
	// List of email addresses that will receive notifications about
	// secondary device.
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType pulumi.StringPtrInput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringPtrInput `pulumi:"redundantId"`
	// Device location region.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringPtrInput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringPtrInput                      `pulumi:"sshIpFqdn"`
	SshKey    NetworkDeviceSecondaryDeviceSshKeyPtrInput `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Device unique identifier.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// Key/Value pairs of vendor specific configuration parameters
	// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
	// `systemIpAddress`.
	VendorConfiguration pulumi.StringMapInput `pulumi:"vendorConfiguration"`
	WanInterfaceId      pulumi.StringPtrInput `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode pulumi.StringPtrInput `pulumi:"zoneCode"`
}

func (NetworkDeviceSecondaryDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (i NetworkDeviceSecondaryDeviceArgs) ToNetworkDeviceSecondaryDeviceOutput() NetworkDeviceSecondaryDeviceOutput {
	return i.ToNetworkDeviceSecondaryDeviceOutputWithContext(context.Background())
}

func (i NetworkDeviceSecondaryDeviceArgs) ToNetworkDeviceSecondaryDeviceOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceOutput)
}

func (i NetworkDeviceSecondaryDeviceArgs) ToNetworkDeviceSecondaryDevicePtrOutput() NetworkDeviceSecondaryDevicePtrOutput {
	return i.ToNetworkDeviceSecondaryDevicePtrOutputWithContext(context.Background())
}

func (i NetworkDeviceSecondaryDeviceArgs) ToNetworkDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceOutput).ToNetworkDeviceSecondaryDevicePtrOutputWithContext(ctx)
}

// NetworkDeviceSecondaryDevicePtrInput is an input type that accepts NetworkDeviceSecondaryDeviceArgs, NetworkDeviceSecondaryDevicePtr and NetworkDeviceSecondaryDevicePtrOutput values.
// You can construct a concrete instance of `NetworkDeviceSecondaryDevicePtrInput` via:
//
//          NetworkDeviceSecondaryDeviceArgs{...}
//
//  or:
//
//          nil
type NetworkDeviceSecondaryDevicePtrInput interface {
	pulumi.Input

	ToNetworkDeviceSecondaryDevicePtrOutput() NetworkDeviceSecondaryDevicePtrOutput
	ToNetworkDeviceSecondaryDevicePtrOutputWithContext(context.Context) NetworkDeviceSecondaryDevicePtrOutput
}

type networkDeviceSecondaryDevicePtrType NetworkDeviceSecondaryDeviceArgs

func NetworkDeviceSecondaryDevicePtr(v *NetworkDeviceSecondaryDeviceArgs) NetworkDeviceSecondaryDevicePtrInput {
	return (*networkDeviceSecondaryDevicePtrType)(v)
}

func (*networkDeviceSecondaryDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (i *networkDeviceSecondaryDevicePtrType) ToNetworkDeviceSecondaryDevicePtrOutput() NetworkDeviceSecondaryDevicePtrOutput {
	return i.ToNetworkDeviceSecondaryDevicePtrOutputWithContext(context.Background())
}

func (i *networkDeviceSecondaryDevicePtrType) ToNetworkDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDevicePtrOutput)
}

type NetworkDeviceSecondaryDeviceOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSecondaryDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (o NetworkDeviceSecondaryDeviceOutput) ToNetworkDeviceSecondaryDeviceOutput() NetworkDeviceSecondaryDeviceOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceOutput) ToNetworkDeviceSecondaryDeviceOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceOutput) ToNetworkDeviceSecondaryDevicePtrOutput() NetworkDeviceSecondaryDevicePtrOutput {
	return o.ToNetworkDeviceSecondaryDevicePtrOutputWithContext(context.Background())
}

func (o NetworkDeviceSecondaryDeviceOutput) ToNetworkDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDevicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceSecondaryDevice) *NetworkDeviceSecondaryDevice {
		return &v
	}).(NetworkDeviceSecondaryDevicePtrOutput)
}

// Billing account number for secondary device.
func (o NetworkDeviceSecondaryDeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// Identifier of a WAN interface ACL template that will be applied
// on a secondary device.
func (o NetworkDeviceSecondaryDeviceOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.AclTemplateId }).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, for a secondary
// device.
func (o NetworkDeviceSecondaryDeviceOutput) AdditionalBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *int { return v.AdditionalBandwidth }).(pulumi.IntPtrOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o NetworkDeviceSecondaryDeviceOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

// Secondary device hostname.
func (o NetworkDeviceSecondaryDeviceOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Device location Equinix Business Exchange name.
func (o NetworkDeviceSecondaryDeviceOutput) Ibx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.Ibx }).(pulumi.StringPtrOutput)
}

// List of device interfaces. See Interface Attribute below
// for more details.
func (o NetworkDeviceSecondaryDeviceOutput) Interfaces() NetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) []NetworkDeviceSecondaryDeviceInterface { return v.Interfaces }).(NetworkDeviceSecondaryDeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a
// secondary device. Applicable for some devices types in BYOL licensing mode.
func (o NetworkDeviceSecondaryDeviceOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.LicenseFile }).(pulumi.StringPtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceSecondaryDeviceOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.LicenseFileId }).(pulumi.StringPtrOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`,
// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o NetworkDeviceSecondaryDeviceOutput) LicenseStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.LicenseStatus }).(pulumi.StringPtrOutput)
}

// License Token can be provided for some device types o the device.
func (o NetworkDeviceSecondaryDeviceOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Metro location of a secondary device.
func (o NetworkDeviceSecondaryDeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) string { return v.MetroCode }).(pulumi.StringOutput)
}

// Identifier of an MGMT interface ACL template that will be
// applied on the device.
// * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
//   device.
func (o NetworkDeviceSecondaryDeviceOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.MgmtAclTemplateUuid }).(pulumi.StringPtrOutput)
}

// Secondary device name.
func (o NetworkDeviceSecondaryDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) string { return v.Name }).(pulumi.StringOutput)
}

// List of email addresses that will receive notifications about
// secondary device.
func (o NetworkDeviceSecondaryDeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary.
func (o NetworkDeviceSecondaryDeviceOutput) RedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.RedundancyType }).(pulumi.StringPtrOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o NetworkDeviceSecondaryDeviceOutput) RedundantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.RedundantId }).(pulumi.StringPtrOutput)
}

// Device location region.
func (o NetworkDeviceSecondaryDeviceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o NetworkDeviceSecondaryDeviceOutput) SshIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.SshIpAddress }).(pulumi.StringPtrOutput)
}

// FQDN of SSH enabled interface on the device.
func (o NetworkDeviceSecondaryDeviceOutput) SshIpFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.SshIpFqdn }).(pulumi.StringPtrOutput)
}

func (o NetworkDeviceSecondaryDeviceOutput) SshKey() NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *NetworkDeviceSecondaryDeviceSshKey { return v.SshKey }).(NetworkDeviceSecondaryDeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o NetworkDeviceSecondaryDeviceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o NetworkDeviceSecondaryDeviceOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// Key/Value pairs of vendor specific configuration parameters
// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
// `systemIpAddress`.
func (o NetworkDeviceSecondaryDeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) map[string]string { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

func (o NetworkDeviceSecondaryDeviceOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.WanInterfaceId }).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o NetworkDeviceSecondaryDeviceOutput) ZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDevice) *string { return v.ZoneCode }).(pulumi.StringPtrOutput)
}

type NetworkDeviceSecondaryDevicePtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSecondaryDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceSecondaryDevice)(nil)).Elem()
}

func (o NetworkDeviceSecondaryDevicePtrOutput) ToNetworkDeviceSecondaryDevicePtrOutput() NetworkDeviceSecondaryDevicePtrOutput {
	return o
}

func (o NetworkDeviceSecondaryDevicePtrOutput) ToNetworkDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDevicePtrOutput {
	return o
}

func (o NetworkDeviceSecondaryDevicePtrOutput) Elem() NetworkDeviceSecondaryDeviceOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) NetworkDeviceSecondaryDevice {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceSecondaryDevice
		return ret
	}).(NetworkDeviceSecondaryDeviceOutput)
}

// Billing account number for secondary device.
func (o NetworkDeviceSecondaryDevicePtrOutput) AccountNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return &v.AccountNumber
	}).(pulumi.StringPtrOutput)
}

// Identifier of a WAN interface ACL template that will be applied
// on a secondary device.
func (o NetworkDeviceSecondaryDevicePtrOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.AclTemplateId
	}).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, for a secondary
// device.
func (o NetworkDeviceSecondaryDevicePtrOutput) AdditionalBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalBandwidth
	}).(pulumi.IntPtrOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o NetworkDeviceSecondaryDevicePtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *int {
		if v == nil {
			return nil
		}
		return v.Asn
	}).(pulumi.IntPtrOutput)
}

// Secondary device hostname.
func (o NetworkDeviceSecondaryDevicePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Device location Equinix Business Exchange name.
func (o NetworkDeviceSecondaryDevicePtrOutput) Ibx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Ibx
	}).(pulumi.StringPtrOutput)
}

// List of device interfaces. See Interface Attribute below
// for more details.
func (o NetworkDeviceSecondaryDevicePtrOutput) Interfaces() NetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) []NetworkDeviceSecondaryDeviceInterface {
		if v == nil {
			return nil
		}
		return v.Interfaces
	}).(NetworkDeviceSecondaryDeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a
// secondary device. Applicable for some devices types in BYOL licensing mode.
func (o NetworkDeviceSecondaryDevicePtrOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFile
	}).(pulumi.StringPtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o NetworkDeviceSecondaryDevicePtrOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFileId
	}).(pulumi.StringPtrOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`,
// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o NetworkDeviceSecondaryDevicePtrOutput) LicenseStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseStatus
	}).(pulumi.StringPtrOutput)
}

// License Token can be provided for some device types o the device.
func (o NetworkDeviceSecondaryDevicePtrOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseToken
	}).(pulumi.StringPtrOutput)
}

// Metro location of a secondary device.
func (o NetworkDeviceSecondaryDevicePtrOutput) MetroCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return &v.MetroCode
	}).(pulumi.StringPtrOutput)
}

// Identifier of an MGMT interface ACL template that will be
// applied on the device.
// * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
//   device.
func (o NetworkDeviceSecondaryDevicePtrOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.MgmtAclTemplateUuid
	}).(pulumi.StringPtrOutput)
}

// Secondary device name.
func (o NetworkDeviceSecondaryDevicePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// List of email addresses that will receive notifications about
// secondary device.
func (o NetworkDeviceSecondaryDevicePtrOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) []string {
		if v == nil {
			return nil
		}
		return v.Notifications
	}).(pulumi.StringArrayOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary.
func (o NetworkDeviceSecondaryDevicePtrOutput) RedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.RedundancyType
	}).(pulumi.StringPtrOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o NetworkDeviceSecondaryDevicePtrOutput) RedundantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.RedundantId
	}).(pulumi.StringPtrOutput)
}

// Device location region.
func (o NetworkDeviceSecondaryDevicePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o NetworkDeviceSecondaryDevicePtrOutput) SshIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.SshIpAddress
	}).(pulumi.StringPtrOutput)
}

// FQDN of SSH enabled interface on the device.
func (o NetworkDeviceSecondaryDevicePtrOutput) SshIpFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.SshIpFqdn
	}).(pulumi.StringPtrOutput)
}

func (o NetworkDeviceSecondaryDevicePtrOutput) SshKey() NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *NetworkDeviceSecondaryDeviceSshKey {
		if v == nil {
			return nil
		}
		return v.SshKey
	}).(NetworkDeviceSecondaryDeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o NetworkDeviceSecondaryDevicePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o NetworkDeviceSecondaryDevicePtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// Key/Value pairs of vendor specific configuration parameters
// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
// `systemIpAddress`.
func (o NetworkDeviceSecondaryDevicePtrOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) map[string]string {
		if v == nil {
			return nil
		}
		return v.VendorConfiguration
	}).(pulumi.StringMapOutput)
}

func (o NetworkDeviceSecondaryDevicePtrOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.WanInterfaceId
	}).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o NetworkDeviceSecondaryDevicePtrOutput) ZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.ZoneCode
	}).(pulumi.StringPtrOutput)
}

type NetworkDeviceSecondaryDeviceInterface struct {
	// interface management type (Equinix Managed or empty).
	AssignedType *string `pulumi:"assignedType"`
	// interface identifier.
	Id *int `pulumi:"id"`
	// interface IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// Device name.
	Name *string `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus *string `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// interface type.
	Type *string `pulumi:"type"`
}

// NetworkDeviceSecondaryDeviceInterfaceInput is an input type that accepts NetworkDeviceSecondaryDeviceInterfaceArgs and NetworkDeviceSecondaryDeviceInterfaceOutput values.
// You can construct a concrete instance of `NetworkDeviceSecondaryDeviceInterfaceInput` via:
//
//          NetworkDeviceSecondaryDeviceInterfaceArgs{...}
type NetworkDeviceSecondaryDeviceInterfaceInput interface {
	pulumi.Input

	ToNetworkDeviceSecondaryDeviceInterfaceOutput() NetworkDeviceSecondaryDeviceInterfaceOutput
	ToNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(context.Context) NetworkDeviceSecondaryDeviceInterfaceOutput
}

type NetworkDeviceSecondaryDeviceInterfaceArgs struct {
	// interface management type (Equinix Managed or empty).
	AssignedType pulumi.StringPtrInput `pulumi:"assignedType"`
	// interface identifier.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// interface IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus pulumi.StringPtrInput `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// interface type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworkDeviceSecondaryDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i NetworkDeviceSecondaryDeviceInterfaceArgs) ToNetworkDeviceSecondaryDeviceInterfaceOutput() NetworkDeviceSecondaryDeviceInterfaceOutput {
	return i.ToNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(context.Background())
}

func (i NetworkDeviceSecondaryDeviceInterfaceArgs) ToNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceInterfaceOutput)
}

// NetworkDeviceSecondaryDeviceInterfaceArrayInput is an input type that accepts NetworkDeviceSecondaryDeviceInterfaceArray and NetworkDeviceSecondaryDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkDeviceSecondaryDeviceInterfaceArrayInput` via:
//
//          NetworkDeviceSecondaryDeviceInterfaceArray{ NetworkDeviceSecondaryDeviceInterfaceArgs{...} }
type NetworkDeviceSecondaryDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkDeviceSecondaryDeviceInterfaceArrayOutput() NetworkDeviceSecondaryDeviceInterfaceArrayOutput
	ToNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Context) NetworkDeviceSecondaryDeviceInterfaceArrayOutput
}

type NetworkDeviceSecondaryDeviceInterfaceArray []NetworkDeviceSecondaryDeviceInterfaceInput

func (NetworkDeviceSecondaryDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i NetworkDeviceSecondaryDeviceInterfaceArray) ToNetworkDeviceSecondaryDeviceInterfaceArrayOutput() NetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return i.ToNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkDeviceSecondaryDeviceInterfaceArray) ToNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceInterfaceArrayOutput)
}

type NetworkDeviceSecondaryDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSecondaryDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o NetworkDeviceSecondaryDeviceInterfaceOutput) ToNetworkDeviceSecondaryDeviceInterfaceOutput() NetworkDeviceSecondaryDeviceInterfaceOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceInterfaceOutput) ToNetworkDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceInterfaceOutput {
	return o
}

// interface management type (Equinix Managed or empty).
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) AssignedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.AssignedType }).(pulumi.StringPtrOutput)
}

// interface identifier.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// interface IP address.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// interface MAC address.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// Device name.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// interface operational status. One of `up`, `down`.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) OperationalStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.OperationalStatus }).(pulumi.StringPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// interface type.
func (o NetworkDeviceSecondaryDeviceInterfaceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceInterface) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworkDeviceSecondaryDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSecondaryDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o NetworkDeviceSecondaryDeviceInterfaceArrayOutput) ToNetworkDeviceSecondaryDeviceInterfaceArrayOutput() NetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceInterfaceArrayOutput) ToNetworkDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkDeviceSecondaryDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkDeviceSecondaryDeviceInterface {
		return vs[0].([]NetworkDeviceSecondaryDeviceInterface)[vs[1].(int)]
	}).(NetworkDeviceSecondaryDeviceInterfaceOutput)
}

type NetworkDeviceSecondaryDeviceSshKey struct {
	KeyName string `pulumi:"keyName"`
	// username associated with given key.
	Username string `pulumi:"username"`
}

// NetworkDeviceSecondaryDeviceSshKeyInput is an input type that accepts NetworkDeviceSecondaryDeviceSshKeyArgs and NetworkDeviceSecondaryDeviceSshKeyOutput values.
// You can construct a concrete instance of `NetworkDeviceSecondaryDeviceSshKeyInput` via:
//
//          NetworkDeviceSecondaryDeviceSshKeyArgs{...}
type NetworkDeviceSecondaryDeviceSshKeyInput interface {
	pulumi.Input

	ToNetworkDeviceSecondaryDeviceSshKeyOutput() NetworkDeviceSecondaryDeviceSshKeyOutput
	ToNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(context.Context) NetworkDeviceSecondaryDeviceSshKeyOutput
}

type NetworkDeviceSecondaryDeviceSshKeyArgs struct {
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// username associated with given key.
	Username pulumi.StringInput `pulumi:"username"`
}

func (NetworkDeviceSecondaryDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i NetworkDeviceSecondaryDeviceSshKeyArgs) ToNetworkDeviceSecondaryDeviceSshKeyOutput() NetworkDeviceSecondaryDeviceSshKeyOutput {
	return i.ToNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(context.Background())
}

func (i NetworkDeviceSecondaryDeviceSshKeyArgs) ToNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceSshKeyOutput)
}

func (i NetworkDeviceSecondaryDeviceSshKeyArgs) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutput() NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return i.ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i NetworkDeviceSecondaryDeviceSshKeyArgs) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceSshKeyOutput).ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx)
}

// NetworkDeviceSecondaryDeviceSshKeyPtrInput is an input type that accepts NetworkDeviceSecondaryDeviceSshKeyArgs, NetworkDeviceSecondaryDeviceSshKeyPtr and NetworkDeviceSecondaryDeviceSshKeyPtrOutput values.
// You can construct a concrete instance of `NetworkDeviceSecondaryDeviceSshKeyPtrInput` via:
//
//          NetworkDeviceSecondaryDeviceSshKeyArgs{...}
//
//  or:
//
//          nil
type NetworkDeviceSecondaryDeviceSshKeyPtrInput interface {
	pulumi.Input

	ToNetworkDeviceSecondaryDeviceSshKeyPtrOutput() NetworkDeviceSecondaryDeviceSshKeyPtrOutput
	ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Context) NetworkDeviceSecondaryDeviceSshKeyPtrOutput
}

type networkDeviceSecondaryDeviceSshKeyPtrType NetworkDeviceSecondaryDeviceSshKeyArgs

func NetworkDeviceSecondaryDeviceSshKeyPtr(v *NetworkDeviceSecondaryDeviceSshKeyArgs) NetworkDeviceSecondaryDeviceSshKeyPtrInput {
	return (*networkDeviceSecondaryDeviceSshKeyPtrType)(v)
}

func (*networkDeviceSecondaryDeviceSshKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i *networkDeviceSecondaryDeviceSshKeyPtrType) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutput() NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return i.ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i *networkDeviceSecondaryDeviceSshKeyPtrType) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSecondaryDeviceSshKeyPtrOutput)
}

type NetworkDeviceSecondaryDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSecondaryDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o NetworkDeviceSecondaryDeviceSshKeyOutput) ToNetworkDeviceSecondaryDeviceSshKeyOutput() NetworkDeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceSshKeyOutput) ToNetworkDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceSshKeyOutput) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutput() NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (o NetworkDeviceSecondaryDeviceSshKeyOutput) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceSecondaryDeviceSshKey) *NetworkDeviceSecondaryDeviceSshKey {
		return &v
	}).(NetworkDeviceSecondaryDeviceSshKeyPtrOutput)
}

func (o NetworkDeviceSecondaryDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// username associated with given key.
func (o NetworkDeviceSecondaryDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSecondaryDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type NetworkDeviceSecondaryDeviceSshKeyPtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSecondaryDeviceSshKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o NetworkDeviceSecondaryDeviceSshKeyPtrOutput) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutput() NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceSshKeyPtrOutput) ToNetworkDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSecondaryDeviceSshKeyPtrOutput {
	return o
}

func (o NetworkDeviceSecondaryDeviceSshKeyPtrOutput) Elem() NetworkDeviceSecondaryDeviceSshKeyOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDeviceSshKey) NetworkDeviceSecondaryDeviceSshKey {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceSecondaryDeviceSshKey
		return ret
	}).(NetworkDeviceSecondaryDeviceSshKeyOutput)
}

func (o NetworkDeviceSecondaryDeviceSshKeyPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// username associated with given key.
func (o NetworkDeviceSecondaryDeviceSshKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSecondaryDeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type NetworkDeviceSshKey struct {
	KeyName string `pulumi:"keyName"`
	// username associated with given key.
	Username string `pulumi:"username"`
}

// NetworkDeviceSshKeyInput is an input type that accepts NetworkDeviceSshKeyArgs and NetworkDeviceSshKeyOutput values.
// You can construct a concrete instance of `NetworkDeviceSshKeyInput` via:
//
//          NetworkDeviceSshKeyArgs{...}
type NetworkDeviceSshKeyInput interface {
	pulumi.Input

	ToNetworkDeviceSshKeyOutput() NetworkDeviceSshKeyOutput
	ToNetworkDeviceSshKeyOutputWithContext(context.Context) NetworkDeviceSshKeyOutput
}

type NetworkDeviceSshKeyArgs struct {
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// username associated with given key.
	Username pulumi.StringInput `pulumi:"username"`
}

func (NetworkDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSshKey)(nil)).Elem()
}

func (i NetworkDeviceSshKeyArgs) ToNetworkDeviceSshKeyOutput() NetworkDeviceSshKeyOutput {
	return i.ToNetworkDeviceSshKeyOutputWithContext(context.Background())
}

func (i NetworkDeviceSshKeyArgs) ToNetworkDeviceSshKeyOutputWithContext(ctx context.Context) NetworkDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSshKeyOutput)
}

func (i NetworkDeviceSshKeyArgs) ToNetworkDeviceSshKeyPtrOutput() NetworkDeviceSshKeyPtrOutput {
	return i.ToNetworkDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i NetworkDeviceSshKeyArgs) ToNetworkDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSshKeyOutput).ToNetworkDeviceSshKeyPtrOutputWithContext(ctx)
}

// NetworkDeviceSshKeyPtrInput is an input type that accepts NetworkDeviceSshKeyArgs, NetworkDeviceSshKeyPtr and NetworkDeviceSshKeyPtrOutput values.
// You can construct a concrete instance of `NetworkDeviceSshKeyPtrInput` via:
//
//          NetworkDeviceSshKeyArgs{...}
//
//  or:
//
//          nil
type NetworkDeviceSshKeyPtrInput interface {
	pulumi.Input

	ToNetworkDeviceSshKeyPtrOutput() NetworkDeviceSshKeyPtrOutput
	ToNetworkDeviceSshKeyPtrOutputWithContext(context.Context) NetworkDeviceSshKeyPtrOutput
}

type networkDeviceSshKeyPtrType NetworkDeviceSshKeyArgs

func NetworkDeviceSshKeyPtr(v *NetworkDeviceSshKeyArgs) NetworkDeviceSshKeyPtrInput {
	return (*networkDeviceSshKeyPtrType)(v)
}

func (*networkDeviceSshKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceSshKey)(nil)).Elem()
}

func (i *networkDeviceSshKeyPtrType) ToNetworkDeviceSshKeyPtrOutput() NetworkDeviceSshKeyPtrOutput {
	return i.ToNetworkDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i *networkDeviceSshKeyPtrType) ToNetworkDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkDeviceSshKeyPtrOutput)
}

type NetworkDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDeviceSshKey)(nil)).Elem()
}

func (o NetworkDeviceSshKeyOutput) ToNetworkDeviceSshKeyOutput() NetworkDeviceSshKeyOutput {
	return o
}

func (o NetworkDeviceSshKeyOutput) ToNetworkDeviceSshKeyOutputWithContext(ctx context.Context) NetworkDeviceSshKeyOutput {
	return o
}

func (o NetworkDeviceSshKeyOutput) ToNetworkDeviceSshKeyPtrOutput() NetworkDeviceSshKeyPtrOutput {
	return o.ToNetworkDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (o NetworkDeviceSshKeyOutput) ToNetworkDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSshKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDeviceSshKey) *NetworkDeviceSshKey {
		return &v
	}).(NetworkDeviceSshKeyPtrOutput)
}

func (o NetworkDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// username associated with given key.
func (o NetworkDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type NetworkDeviceSshKeyPtrOutput struct{ *pulumi.OutputState }

func (NetworkDeviceSshKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDeviceSshKey)(nil)).Elem()
}

func (o NetworkDeviceSshKeyPtrOutput) ToNetworkDeviceSshKeyPtrOutput() NetworkDeviceSshKeyPtrOutput {
	return o
}

func (o NetworkDeviceSshKeyPtrOutput) ToNetworkDeviceSshKeyPtrOutputWithContext(ctx context.Context) NetworkDeviceSshKeyPtrOutput {
	return o
}

func (o NetworkDeviceSshKeyPtrOutput) Elem() NetworkDeviceSshKeyOutput {
	return o.ApplyT(func(v *NetworkDeviceSshKey) NetworkDeviceSshKey {
		if v != nil {
			return *v
		}
		var ret NetworkDeviceSshKey
		return ret
	}).(NetworkDeviceSshKeyOutput)
}

func (o NetworkDeviceSshKeyPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// username associated with given key.
func (o NetworkDeviceSshKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkDeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionActionInput)(nil)).Elem(), ECXL2ConnectionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionActionArrayInput)(nil)).Elem(), ECXL2ConnectionActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionActionRequiredDataInput)(nil)).Elem(), ECXL2ConnectionActionRequiredDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionActionRequiredDataArrayInput)(nil)).Elem(), ECXL2ConnectionActionRequiredDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionAdditionalInfoInput)(nil)).Elem(), ECXL2ConnectionAdditionalInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionAdditionalInfoArrayInput)(nil)).Elem(), ECXL2ConnectionAdditionalInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionInput)(nil)).Elem(), ECXL2ConnectionSecondaryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionPtrInput)(nil)).Elem(), ECXL2ConnectionSecondaryConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionActionInput)(nil)).Elem(), ECXL2ConnectionSecondaryConnectionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionActionArrayInput)(nil)).Elem(), ECXL2ConnectionSecondaryConnectionActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionActionRequiredDataInput)(nil)).Elem(), ECXL2ConnectionSecondaryConnectionActionRequiredDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayInput)(nil)).Elem(), ECXL2ConnectionSecondaryConnectionActionRequiredDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileFeaturesInput)(nil)).Elem(), ECXL2ServiceprofileFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileFeaturesPtrInput)(nil)).Elem(), ECXL2ServiceprofileFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofilePortInput)(nil)).Elem(), ECXL2ServiceprofilePortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofilePortArrayInput)(nil)).Elem(), ECXL2ServiceprofilePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileSpeedBandInput)(nil)).Elem(), ECXL2ServiceprofileSpeedBandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileSpeedBandArrayInput)(nil)).Elem(), ECXL2ServiceprofileSpeedBandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofileAdditionalInfoInput)(nil)).Elem(), GetECXL2SellerprofileAdditionalInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofileAdditionalInfoArrayInput)(nil)).Elem(), GetECXL2SellerprofileAdditionalInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofileMetroInput)(nil)).Elem(), GetECXL2SellerprofileMetroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofileMetroArrayInput)(nil)).Elem(), GetECXL2SellerprofileMetroArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofileSpeedBandInput)(nil)).Elem(), GetECXL2SellerprofileSpeedBandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofileSpeedBandArrayInput)(nil)).Elem(), GetECXL2SellerprofileSpeedBandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileInput)(nil)).Elem(), GetECXL2SellerprofilesProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileArrayInput)(nil)).Elem(), GetECXL2SellerprofilesProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileAdditionalInfoInput)(nil)).Elem(), GetECXL2SellerprofilesProfileAdditionalInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileAdditionalInfoArrayInput)(nil)).Elem(), GetECXL2SellerprofilesProfileAdditionalInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileMetroInput)(nil)).Elem(), GetECXL2SellerprofilesProfileMetroArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileMetroArrayInput)(nil)).Elem(), GetECXL2SellerprofilesProfileMetroArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileSpeedBandInput)(nil)).Elem(), GetECXL2SellerprofilesProfileSpeedBandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetECXL2SellerprofilesProfileSpeedBandArrayInput)(nil)).Elem(), GetECXL2SellerprofilesProfileSpeedBandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalConnectionPortInput)(nil)).Elem(), GetMetalConnectionPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalConnectionPortArrayInput)(nil)).Elem(), GetMetalConnectionPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalConnectionServiceTokenInput)(nil)).Elem(), GetMetalConnectionServiceTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalConnectionServiceTokenArrayInput)(nil)).Elem(), GetMetalConnectionServiceTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborInput)(nil)).Elem(), GetMetalDeviceBGPNeighborsBgpNeighborArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborArrayInput)(nil)).Elem(), GetMetalDeviceBGPNeighborsBgpNeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesInInput)(nil)).Elem(), GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayInput)(nil)).Elem(), GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutInput)(nil)).Elem(), GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayInput)(nil)).Elem(), GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceNetworkInput)(nil)).Elem(), GetMetalDeviceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDeviceNetworkArrayInput)(nil)).Elem(), GetMetalDeviceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDevicePortInput)(nil)).Elem(), GetMetalDevicePortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalDevicePortArrayInput)(nil)).Elem(), GetMetalDevicePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalFacilityCapacityInput)(nil)).Elem(), GetMetalFacilityCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalFacilityCapacityArrayInput)(nil)).Elem(), GetMetalFacilityCapacityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalMetroCapacityInput)(nil)).Elem(), GetMetalMetroCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalMetroCapacityArrayInput)(nil)).Elem(), GetMetalMetroCapacityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalOrganizationAddressInput)(nil)).Elem(), GetMetalOrganizationAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalOrganizationAddressArrayInput)(nil)).Elem(), GetMetalOrganizationAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalPlansFilterInput)(nil)).Elem(), GetMetalPlansFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalPlansFilterArrayInput)(nil)).Elem(), GetMetalPlansFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalPlansPlanInput)(nil)).Elem(), GetMetalPlansPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalPlansPlanArrayInput)(nil)).Elem(), GetMetalPlansPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalPlansSortInput)(nil)).Elem(), GetMetalPlansSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalPlansSortArrayInput)(nil)).Elem(), GetMetalPlansSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalProjectBgpConfigInput)(nil)).Elem(), GetMetalProjectBgpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetalProjectBgpConfigArrayInput)(nil)).Elem(), GetMetalProjectBgpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailInput)(nil)).Elem(), GetNetworkDeviceClusterDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailArrayInput)(nil)).Elem(), GetNetworkDeviceClusterDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0Input)(nil)).Elem(), GetNetworkDeviceClusterDetailNode0Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0ArrayInput)(nil)).Elem(), GetNetworkDeviceClusterDetailNode0Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0VendorConfigurationInput)(nil)).Elem(), GetNetworkDeviceClusterDetailNode0VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayInput)(nil)).Elem(), GetNetworkDeviceClusterDetailNode0VendorConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1Input)(nil)).Elem(), GetNetworkDeviceClusterDetailNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1ArrayInput)(nil)).Elem(), GetNetworkDeviceClusterDetailNode1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1VendorConfigurationInput)(nil)).Elem(), GetNetworkDeviceClusterDetailNode1VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayInput)(nil)).Elem(), GetNetworkDeviceClusterDetailNode1VendorConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceInterfaceInput)(nil)).Elem(), GetNetworkDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceInterfaceArrayInput)(nil)).Elem(), GetNetworkDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceInput)(nil)).Elem(), GetNetworkDeviceSecondaryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceArrayInput)(nil)).Elem(), GetNetworkDeviceSecondaryDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceInterfaceInput)(nil)).Elem(), GetNetworkDeviceSecondaryDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceInterfaceArrayInput)(nil)).Elem(), GetNetworkDeviceSecondaryDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceSshKeyInput)(nil)).Elem(), GetNetworkDeviceSecondaryDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSecondaryDeviceSshKeyArrayInput)(nil)).Elem(), GetNetworkDeviceSecondaryDeviceSshKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSshKeyInput)(nil)).Elem(), GetNetworkDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkDeviceSshKeyArrayInput)(nil)).Elem(), GetNetworkDeviceSshKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalConnectionPortInput)(nil)).Elem(), MetalConnectionPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalConnectionPortArrayInput)(nil)).Elem(), MetalConnectionPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalConnectionServiceTokenInput)(nil)).Elem(), MetalConnectionServiceTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalConnectionServiceTokenArrayInput)(nil)).Elem(), MetalConnectionServiceTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDeviceIpAddressInput)(nil)).Elem(), MetalDeviceIpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDeviceIpAddressArrayInput)(nil)).Elem(), MetalDeviceIpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDeviceNetworkInput)(nil)).Elem(), MetalDeviceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDeviceNetworkArrayInput)(nil)).Elem(), MetalDeviceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDevicePortInput)(nil)).Elem(), MetalDevicePortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDevicePortArrayInput)(nil)).Elem(), MetalDevicePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDeviceReinstallInput)(nil)).Elem(), MetalDeviceReinstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalDeviceReinstallPtrInput)(nil)).Elem(), MetalDeviceReinstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalOrganizationAddressInput)(nil)).Elem(), MetalOrganizationAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalOrganizationAddressPtrInput)(nil)).Elem(), MetalOrganizationAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectBgpConfigInput)(nil)).Elem(), MetalProjectBgpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalProjectBgpConfigPtrInput)(nil)).Elem(), MetalProjectBgpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalSpotMarketRequestInstanceParametersInput)(nil)).Elem(), MetalSpotMarketRequestInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalSpotMarketRequestInstanceParametersPtrInput)(nil)).Elem(), MetalSpotMarketRequestInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateDeviceDetailInput)(nil)).Elem(), NetworkACLTemplateDeviceDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateDeviceDetailArrayInput)(nil)).Elem(), NetworkACLTemplateDeviceDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateInboundRuleInput)(nil)).Elem(), NetworkACLTemplateInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkACLTemplateInboundRuleArrayInput)(nil)).Elem(), NetworkACLTemplateInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsInput)(nil)).Elem(), NetworkDeviceClusterDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsPtrInput)(nil)).Elem(), NetworkDeviceClusterDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode0Input)(nil)).Elem(), NetworkDeviceClusterDetailsNode0Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode0PtrInput)(nil)).Elem(), NetworkDeviceClusterDetailsNode0Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode0VendorConfigurationInput)(nil)).Elem(), NetworkDeviceClusterDetailsNode0VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode0VendorConfigurationPtrInput)(nil)).Elem(), NetworkDeviceClusterDetailsNode0VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode1Input)(nil)).Elem(), NetworkDeviceClusterDetailsNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode1PtrInput)(nil)).Elem(), NetworkDeviceClusterDetailsNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode1VendorConfigurationInput)(nil)).Elem(), NetworkDeviceClusterDetailsNode1VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceClusterDetailsNode1VendorConfigurationPtrInput)(nil)).Elem(), NetworkDeviceClusterDetailsNode1VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceInterfaceInput)(nil)).Elem(), NetworkDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceInterfaceArrayInput)(nil)).Elem(), NetworkDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkDeviceInput)(nil)).Elem(), NetworkDeviceLinkDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkDeviceArrayInput)(nil)).Elem(), NetworkDeviceLinkDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkLinkInput)(nil)).Elem(), NetworkDeviceLinkLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceLinkLinkArrayInput)(nil)).Elem(), NetworkDeviceLinkLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSecondaryDeviceInput)(nil)).Elem(), NetworkDeviceSecondaryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSecondaryDevicePtrInput)(nil)).Elem(), NetworkDeviceSecondaryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSecondaryDeviceInterfaceInput)(nil)).Elem(), NetworkDeviceSecondaryDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSecondaryDeviceInterfaceArrayInput)(nil)).Elem(), NetworkDeviceSecondaryDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSecondaryDeviceSshKeyInput)(nil)).Elem(), NetworkDeviceSecondaryDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSecondaryDeviceSshKeyPtrInput)(nil)).Elem(), NetworkDeviceSecondaryDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSshKeyInput)(nil)).Elem(), NetworkDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkDeviceSshKeyPtrInput)(nil)).Elem(), NetworkDeviceSshKeyArgs{})
	pulumi.RegisterOutputType(ECXL2ConnectionActionOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionActionArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionActionRequiredDataOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionActionRequiredDataArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionAdditionalInfoOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionAdditionalInfoArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionSecondaryConnectionOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionSecondaryConnectionPtrOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionSecondaryConnectionActionOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionSecondaryConnectionActionArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionSecondaryConnectionActionRequiredDataOutput{})
	pulumi.RegisterOutputType(ECXL2ConnectionSecondaryConnectionActionRequiredDataArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileFeaturesOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileFeaturesPtrOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofilePortOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofilePortArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileSpeedBandOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileSpeedBandArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofileAdditionalInfoOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofileAdditionalInfoArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofileMetroOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofileMetroArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofileSpeedBandOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofileSpeedBandArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileAdditionalInfoOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileAdditionalInfoArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileMetroOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileMetroArrayOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileSpeedBandOutput{})
	pulumi.RegisterOutputType(GetECXL2SellerprofilesProfileSpeedBandArrayOutput{})
	pulumi.RegisterOutputType(GetMetalConnectionPortOutput{})
	pulumi.RegisterOutputType(GetMetalConnectionPortArrayOutput{})
	pulumi.RegisterOutputType(GetMetalConnectionServiceTokenOutput{})
	pulumi.RegisterOutputType(GetMetalConnectionServiceTokenArrayOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceBGPNeighborsBgpNeighborOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceBGPNeighborsBgpNeighborArrayOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceBGPNeighborsBgpNeighborRoutesInOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceBGPNeighborsBgpNeighborRoutesInArrayOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceBGPNeighborsBgpNeighborRoutesOutArrayOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceNetworkOutput{})
	pulumi.RegisterOutputType(GetMetalDeviceNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetMetalDevicePortOutput{})
	pulumi.RegisterOutputType(GetMetalDevicePortArrayOutput{})
	pulumi.RegisterOutputType(GetMetalFacilityCapacityOutput{})
	pulumi.RegisterOutputType(GetMetalFacilityCapacityArrayOutput{})
	pulumi.RegisterOutputType(GetMetalMetroCapacityOutput{})
	pulumi.RegisterOutputType(GetMetalMetroCapacityArrayOutput{})
	pulumi.RegisterOutputType(GetMetalOrganizationAddressOutput{})
	pulumi.RegisterOutputType(GetMetalOrganizationAddressArrayOutput{})
	pulumi.RegisterOutputType(GetMetalPlansFilterOutput{})
	pulumi.RegisterOutputType(GetMetalPlansFilterArrayOutput{})
	pulumi.RegisterOutputType(GetMetalPlansPlanOutput{})
	pulumi.RegisterOutputType(GetMetalPlansPlanArrayOutput{})
	pulumi.RegisterOutputType(GetMetalPlansSortOutput{})
	pulumi.RegisterOutputType(GetMetalPlansSortArrayOutput{})
	pulumi.RegisterOutputType(GetMetalProjectBgpConfigOutput{})
	pulumi.RegisterOutputType(GetMetalProjectBgpConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode0Output{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode0ArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode0VendorConfigurationOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode0VendorConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode1Output{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode1ArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode1VendorConfigurationOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceClusterDetailNode1VendorConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSecondaryDeviceOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSecondaryDeviceArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSecondaryDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSecondaryDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSecondaryDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSecondaryDeviceSshKeyArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(GetNetworkDeviceSshKeyArrayOutput{})
	pulumi.RegisterOutputType(MetalConnectionPortOutput{})
	pulumi.RegisterOutputType(MetalConnectionPortArrayOutput{})
	pulumi.RegisterOutputType(MetalConnectionServiceTokenOutput{})
	pulumi.RegisterOutputType(MetalConnectionServiceTokenArrayOutput{})
	pulumi.RegisterOutputType(MetalDeviceIpAddressOutput{})
	pulumi.RegisterOutputType(MetalDeviceIpAddressArrayOutput{})
	pulumi.RegisterOutputType(MetalDeviceNetworkOutput{})
	pulumi.RegisterOutputType(MetalDeviceNetworkArrayOutput{})
	pulumi.RegisterOutputType(MetalDevicePortOutput{})
	pulumi.RegisterOutputType(MetalDevicePortArrayOutput{})
	pulumi.RegisterOutputType(MetalDeviceReinstallOutput{})
	pulumi.RegisterOutputType(MetalDeviceReinstallPtrOutput{})
	pulumi.RegisterOutputType(MetalOrganizationAddressOutput{})
	pulumi.RegisterOutputType(MetalOrganizationAddressPtrOutput{})
	pulumi.RegisterOutputType(MetalProjectBgpConfigOutput{})
	pulumi.RegisterOutputType(MetalProjectBgpConfigPtrOutput{})
	pulumi.RegisterOutputType(MetalSpotMarketRequestInstanceParametersOutput{})
	pulumi.RegisterOutputType(MetalSpotMarketRequestInstanceParametersPtrOutput{})
	pulumi.RegisterOutputType(NetworkACLTemplateDeviceDetailOutput{})
	pulumi.RegisterOutputType(NetworkACLTemplateDeviceDetailArrayOutput{})
	pulumi.RegisterOutputType(NetworkACLTemplateInboundRuleOutput{})
	pulumi.RegisterOutputType(NetworkACLTemplateInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsPtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode0Output{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode0PtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode0VendorConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode0VendorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode1Output{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode1PtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode1VendorConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkDeviceClusterDetailsNode1VendorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceLinkDeviceOutput{})
	pulumi.RegisterOutputType(NetworkDeviceLinkDeviceArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceLinkLinkOutput{})
	pulumi.RegisterOutputType(NetworkDeviceLinkLinkArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSecondaryDeviceOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSecondaryDevicePtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSecondaryDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSecondaryDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSecondaryDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSecondaryDeviceSshKeyPtrOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(NetworkDeviceSshKeyPtrOutput{})
}
