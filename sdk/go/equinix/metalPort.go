// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// See the Network Types Guide for examples of this resource.
type MetalPort struct {
	pulumi.CustomResourceState

	// UUID of the bond port.
	BondId pulumi.StringOutput `pulumi:"bondId"`
	// Name of the bond port.
	BondName pulumi.StringOutput `pulumi:"bondName"`
	// Whether the port should be bonded.
	Bonded pulumi.BoolOutput `pulumi:"bonded"`
	// Flag indicating whether the port can be removed from a bond.
	DisbondSupported pulumi.BoolOutput `pulumi:"disbondSupported"`
	// Whether to put the port to Layer 2 mode, valid only for bond ports.
	Layer2 pulumi.BoolPtrOutput `pulumi:"layer2"`
	// MAC address of the port.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// Name of the port, e.g. `bond0` or `eth0`.
	Name pulumi.StringOutput `pulumi:"name"`
	// UUID of a VLAN to assign as a native VLAN. It must be one of
	// attached VLANs (from `vlanIds` parameter), valid only for physical (non-bond) ports.
	NativeVlanId pulumi.StringPtrOutput `pulumi:"nativeVlanId"`
	// One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This
	// attribute is only set on bond ports.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// ID of the port to read.
	PortId pulumi.StringOutput `pulumi:"portId"`
	// Behavioral setting to reset the port to default settings. For a
	// bond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and
	// vlans attached.
	ResetOnDelete pulumi.BoolPtrOutput `pulumi:"resetOnDelete"`
	// Type is either "NetworkBondPort" for bond ports or "NetworkPort" for bondable ethernet ports.
	Type pulumi.StringOutput `pulumi:"type"`
	// List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VlanIds pulumi.StringArrayOutput `pulumi:"vlanIds"`
	// List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VxlanIds pulumi.IntArrayOutput `pulumi:"vxlanIds"`
}

// NewMetalPort registers a new resource with the given unique name, arguments, and options.
func NewMetalPort(ctx *pulumi.Context,
	name string, args *MetalPortArgs, opts ...pulumi.ResourceOption) (*MetalPort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bonded == nil {
		return nil, errors.New("invalid value for required argument 'Bonded'")
	}
	if args.PortId == nil {
		return nil, errors.New("invalid value for required argument 'PortId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MetalPort
	err := ctx.RegisterResource("equinix:index/metalPort:MetalPort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetalPort gets an existing MetalPort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetalPort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetalPortState, opts ...pulumi.ResourceOption) (*MetalPort, error) {
	var resource MetalPort
	err := ctx.ReadResource("equinix:index/metalPort:MetalPort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetalPort resources.
type metalPortState struct {
	// UUID of the bond port.
	BondId *string `pulumi:"bondId"`
	// Name of the bond port.
	BondName *string `pulumi:"bondName"`
	// Whether the port should be bonded.
	Bonded *bool `pulumi:"bonded"`
	// Flag indicating whether the port can be removed from a bond.
	DisbondSupported *bool `pulumi:"disbondSupported"`
	// Whether to put the port to Layer 2 mode, valid only for bond ports.
	Layer2 *bool `pulumi:"layer2"`
	// MAC address of the port.
	Mac *string `pulumi:"mac"`
	// Name of the port, e.g. `bond0` or `eth0`.
	Name *string `pulumi:"name"`
	// UUID of a VLAN to assign as a native VLAN. It must be one of
	// attached VLANs (from `vlanIds` parameter), valid only for physical (non-bond) ports.
	NativeVlanId *string `pulumi:"nativeVlanId"`
	// One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This
	// attribute is only set on bond ports.
	NetworkType *string `pulumi:"networkType"`
	// ID of the port to read.
	PortId *string `pulumi:"portId"`
	// Behavioral setting to reset the port to default settings. For a
	// bond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and
	// vlans attached.
	ResetOnDelete *bool `pulumi:"resetOnDelete"`
	// Type is either "NetworkBondPort" for bond ports or "NetworkPort" for bondable ethernet ports.
	Type *string `pulumi:"type"`
	// List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VlanIds []string `pulumi:"vlanIds"`
	// List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VxlanIds []int `pulumi:"vxlanIds"`
}

type MetalPortState struct {
	// UUID of the bond port.
	BondId pulumi.StringPtrInput
	// Name of the bond port.
	BondName pulumi.StringPtrInput
	// Whether the port should be bonded.
	Bonded pulumi.BoolPtrInput
	// Flag indicating whether the port can be removed from a bond.
	DisbondSupported pulumi.BoolPtrInput
	// Whether to put the port to Layer 2 mode, valid only for bond ports.
	Layer2 pulumi.BoolPtrInput
	// MAC address of the port.
	Mac pulumi.StringPtrInput
	// Name of the port, e.g. `bond0` or `eth0`.
	Name pulumi.StringPtrInput
	// UUID of a VLAN to assign as a native VLAN. It must be one of
	// attached VLANs (from `vlanIds` parameter), valid only for physical (non-bond) ports.
	NativeVlanId pulumi.StringPtrInput
	// One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This
	// attribute is only set on bond ports.
	NetworkType pulumi.StringPtrInput
	// ID of the port to read.
	PortId pulumi.StringPtrInput
	// Behavioral setting to reset the port to default settings. For a
	// bond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and
	// vlans attached.
	ResetOnDelete pulumi.BoolPtrInput
	// Type is either "NetworkBondPort" for bond ports or "NetworkPort" for bondable ethernet ports.
	Type pulumi.StringPtrInput
	// List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VlanIds pulumi.StringArrayInput
	// List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VxlanIds pulumi.IntArrayInput
}

func (MetalPortState) ElementType() reflect.Type {
	return reflect.TypeOf((*metalPortState)(nil)).Elem()
}

type metalPortArgs struct {
	// Whether the port should be bonded.
	Bonded bool `pulumi:"bonded"`
	// Whether to put the port to Layer 2 mode, valid only for bond ports.
	Layer2 *bool `pulumi:"layer2"`
	// UUID of a VLAN to assign as a native VLAN. It must be one of
	// attached VLANs (from `vlanIds` parameter), valid only for physical (non-bond) ports.
	NativeVlanId *string `pulumi:"nativeVlanId"`
	// ID of the port to read.
	PortId string `pulumi:"portId"`
	// Behavioral setting to reset the port to default settings. For a
	// bond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and
	// vlans attached.
	ResetOnDelete *bool `pulumi:"resetOnDelete"`
	// List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VlanIds []string `pulumi:"vlanIds"`
	// List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VxlanIds []int `pulumi:"vxlanIds"`
}

// The set of arguments for constructing a MetalPort resource.
type MetalPortArgs struct {
	// Whether the port should be bonded.
	Bonded pulumi.BoolInput
	// Whether to put the port to Layer 2 mode, valid only for bond ports.
	Layer2 pulumi.BoolPtrInput
	// UUID of a VLAN to assign as a native VLAN. It must be one of
	// attached VLANs (from `vlanIds` parameter), valid only for physical (non-bond) ports.
	NativeVlanId pulumi.StringPtrInput
	// ID of the port to read.
	PortId pulumi.StringInput
	// Behavioral setting to reset the port to default settings. For a
	// bond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and
	// vlans attached.
	ResetOnDelete pulumi.BoolPtrInput
	// List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VlanIds pulumi.StringArrayInput
	// List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
	// ports.
	VxlanIds pulumi.IntArrayInput
}

func (MetalPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metalPortArgs)(nil)).Elem()
}

type MetalPortInput interface {
	pulumi.Input

	ToMetalPortOutput() MetalPortOutput
	ToMetalPortOutputWithContext(ctx context.Context) MetalPortOutput
}

func (*MetalPort) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalPort)(nil)).Elem()
}

func (i *MetalPort) ToMetalPortOutput() MetalPortOutput {
	return i.ToMetalPortOutputWithContext(context.Background())
}

func (i *MetalPort) ToMetalPortOutputWithContext(ctx context.Context) MetalPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalPortOutput)
}

// MetalPortArrayInput is an input type that accepts MetalPortArray and MetalPortArrayOutput values.
// You can construct a concrete instance of `MetalPortArrayInput` via:
//
//          MetalPortArray{ MetalPortArgs{...} }
type MetalPortArrayInput interface {
	pulumi.Input

	ToMetalPortArrayOutput() MetalPortArrayOutput
	ToMetalPortArrayOutputWithContext(context.Context) MetalPortArrayOutput
}

type MetalPortArray []MetalPortInput

func (MetalPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalPort)(nil)).Elem()
}

func (i MetalPortArray) ToMetalPortArrayOutput() MetalPortArrayOutput {
	return i.ToMetalPortArrayOutputWithContext(context.Background())
}

func (i MetalPortArray) ToMetalPortArrayOutputWithContext(ctx context.Context) MetalPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalPortArrayOutput)
}

// MetalPortMapInput is an input type that accepts MetalPortMap and MetalPortMapOutput values.
// You can construct a concrete instance of `MetalPortMapInput` via:
//
//          MetalPortMap{ "key": MetalPortArgs{...} }
type MetalPortMapInput interface {
	pulumi.Input

	ToMetalPortMapOutput() MetalPortMapOutput
	ToMetalPortMapOutputWithContext(context.Context) MetalPortMapOutput
}

type MetalPortMap map[string]MetalPortInput

func (MetalPortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalPort)(nil)).Elem()
}

func (i MetalPortMap) ToMetalPortMapOutput() MetalPortMapOutput {
	return i.ToMetalPortMapOutputWithContext(context.Background())
}

func (i MetalPortMap) ToMetalPortMapOutputWithContext(ctx context.Context) MetalPortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetalPortMapOutput)
}

type MetalPortOutput struct{ *pulumi.OutputState }

func (MetalPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetalPort)(nil)).Elem()
}

func (o MetalPortOutput) ToMetalPortOutput() MetalPortOutput {
	return o
}

func (o MetalPortOutput) ToMetalPortOutputWithContext(ctx context.Context) MetalPortOutput {
	return o
}

// UUID of the bond port.
func (o MetalPortOutput) BondId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.BondId }).(pulumi.StringOutput)
}

// Name of the bond port.
func (o MetalPortOutput) BondName() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.BondName }).(pulumi.StringOutput)
}

// Whether the port should be bonded.
func (o MetalPortOutput) Bonded() pulumi.BoolOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.BoolOutput { return v.Bonded }).(pulumi.BoolOutput)
}

// Flag indicating whether the port can be removed from a bond.
func (o MetalPortOutput) DisbondSupported() pulumi.BoolOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.BoolOutput { return v.DisbondSupported }).(pulumi.BoolOutput)
}

// Whether to put the port to Layer 2 mode, valid only for bond ports.
func (o MetalPortOutput) Layer2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.BoolPtrOutput { return v.Layer2 }).(pulumi.BoolPtrOutput)
}

// MAC address of the port.
func (o MetalPortOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// Name of the port, e.g. `bond0` or `eth0`.
func (o MetalPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// UUID of a VLAN to assign as a native VLAN. It must be one of
// attached VLANs (from `vlanIds` parameter), valid only for physical (non-bond) ports.
func (o MetalPortOutput) NativeVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringPtrOutput { return v.NativeVlanId }).(pulumi.StringPtrOutput)
}

// One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This
// attribute is only set on bond ports.
func (o MetalPortOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// ID of the port to read.
func (o MetalPortOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// Behavioral setting to reset the port to default settings. For a
// bond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and
// vlans attached.
func (o MetalPortOutput) ResetOnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.BoolPtrOutput { return v.ResetOnDelete }).(pulumi.BoolPtrOutput)
}

// Type is either "NetworkBondPort" for bond ports or "NetworkPort" for bondable ethernet ports.
func (o MetalPortOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
// ports.
func (o MetalPortOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.StringArrayOutput { return v.VlanIds }).(pulumi.StringArrayOutput)
}

// List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
// ports.
func (o MetalPortOutput) VxlanIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *MetalPort) pulumi.IntArrayOutput { return v.VxlanIds }).(pulumi.IntArrayOutput)
}

type MetalPortArrayOutput struct{ *pulumi.OutputState }

func (MetalPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetalPort)(nil)).Elem()
}

func (o MetalPortArrayOutput) ToMetalPortArrayOutput() MetalPortArrayOutput {
	return o
}

func (o MetalPortArrayOutput) ToMetalPortArrayOutputWithContext(ctx context.Context) MetalPortArrayOutput {
	return o
}

func (o MetalPortArrayOutput) Index(i pulumi.IntInput) MetalPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetalPort {
		return vs[0].([]*MetalPort)[vs[1].(int)]
	}).(MetalPortOutput)
}

type MetalPortMapOutput struct{ *pulumi.OutputState }

func (MetalPortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetalPort)(nil)).Elem()
}

func (o MetalPortMapOutput) ToMetalPortMapOutput() MetalPortMapOutput {
	return o
}

func (o MetalPortMapOutput) ToMetalPortMapOutputWithContext(ctx context.Context) MetalPortMapOutput {
	return o
}

func (o MetalPortMapOutput) MapIndex(k pulumi.StringInput) MetalPortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetalPort {
		return vs[0].(map[string]*MetalPort)[vs[1].(string)]
	}).(MetalPortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetalPortInput)(nil)).Elem(), &MetalPort{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalPortArrayInput)(nil)).Elem(), MetalPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetalPortMapInput)(nil)).Elem(), MetalPortMap{})
	pulumi.RegisterOutputType(MetalPortOutput{})
	pulumi.RegisterOutputType(MetalPortArrayOutput{})
	pulumi.RegisterOutputType(MetalPortMapOutput{})
}
