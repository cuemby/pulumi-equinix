// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to read ports of existing devices. You can read port by either its UUID,
// or by a device UUID and port name.
//
// ## Example Usage
//
// Create a device and read it's eth0 port to the datasource.
//
// ```go
// package main
//
// import (
// 	"github.com/cuemby/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		projectId := "<UUID_of_your_project>"
// 		testMetalDevice, err := equinix.NewMetalDevice(ctx, "testMetalDevice", &equinix.MetalDeviceArgs{
// 			Hostname: pulumi.String("tfacc-test-device-port"),
// 			Plan:     pulumi.String("c3.medium.x86"),
// 			Facilities: pulumi.StringArray{
// 				pulumi.String("sv15"),
// 			},
// 			OperatingSystem: pulumi.String("ubuntu_20_04"),
// 			BillingCycle:    pulumi.String("hourly"),
// 			ProjectId:       pulumi.String(projectId),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_ = equinix.GetMetalPortOutput(ctx, GetMetalPortOutputArgs{
// 			DeviceId: testMetalDevice.ID(),
// 			Name:     pulumi.String("eth0"),
// 		}, nil)
// 		return nil
// 	})
// }
// ```
func LookupMetalPort(ctx *pulumi.Context, args *LookupMetalPortArgs, opts ...pulumi.InvokeOption) (*LookupMetalPortResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupMetalPortResult
	err := ctx.Invoke("equinix:index/getMetalPort:GetMetalPort", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetMetalPort.
type LookupMetalPortArgs struct {
	// Device UUID where to lookup the port.
	DeviceId *string `pulumi:"deviceId"`
	// Name of the port to look up, i.e. `bond0`, `eth1`.
	Name *string `pulumi:"name"`
	// ID of the port to read, conflicts with `deviceId`.
	PortId *string `pulumi:"portId"`
}

// A collection of values returned by GetMetalPort.
type LookupMetalPortResult struct {
	// UUID of the bond port.
	BondId string `pulumi:"bondId"`
	// Name of the bond port.
	BondName string `pulumi:"bondName"`
	// Flag indicating whether the port is bonded.
	Bonded   bool    `pulumi:"bonded"`
	DeviceId *string `pulumi:"deviceId"`
	// Flag indicating whether the port can be removed from a bond.
	DisbondSupported bool `pulumi:"disbondSupported"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Layer2 bool   `pulumi:"layer2"`
	// MAC address of the port.
	Mac  string `pulumi:"mac"`
	Name string `pulumi:"name"`
	// UUID of native VLAN of the port.
	NativeVlanId string `pulumi:"nativeVlanId"`
	// One of `layer2-bonded`, `layer2-individual`, `layer3`, `hybrid`, `hybrid-bonded`.
	NetworkType string  `pulumi:"networkType"`
	PortId      *string `pulumi:"portId"`
	// Type is either `NetworkBondPort` for bond ports or `NetworkPort` for bondable ethernet ports.
	Type string `pulumi:"type"`
	// UUIDs of attached VLANs.
	VlanIds []string `pulumi:"vlanIds"`
	// VXLAN ids of attached VLANs.
	VxlanIds []int `pulumi:"vxlanIds"`
}

func LookupMetalPortOutput(ctx *pulumi.Context, args LookupMetalPortOutputArgs, opts ...pulumi.InvokeOption) LookupMetalPortResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetalPortResult, error) {
			args := v.(LookupMetalPortArgs)
			r, err := LookupMetalPort(ctx, &args, opts...)
			var s LookupMetalPortResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetalPortResultOutput)
}

// A collection of arguments for invoking GetMetalPort.
type LookupMetalPortOutputArgs struct {
	// Device UUID where to lookup the port.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// Name of the port to look up, i.e. `bond0`, `eth1`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the port to read, conflicts with `deviceId`.
	PortId pulumi.StringPtrInput `pulumi:"portId"`
}

func (LookupMetalPortOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalPortArgs)(nil)).Elem()
}

// A collection of values returned by GetMetalPort.
type LookupMetalPortResultOutput struct{ *pulumi.OutputState }

func (LookupMetalPortResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalPortResult)(nil)).Elem()
}

func (o LookupMetalPortResultOutput) ToLookupMetalPortResultOutput() LookupMetalPortResultOutput {
	return o
}

func (o LookupMetalPortResultOutput) ToLookupMetalPortResultOutputWithContext(ctx context.Context) LookupMetalPortResultOutput {
	return o
}

// UUID of the bond port.
func (o LookupMetalPortResultOutput) BondId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.BondId }).(pulumi.StringOutput)
}

// Name of the bond port.
func (o LookupMetalPortResultOutput) BondName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.BondName }).(pulumi.StringOutput)
}

// Flag indicating whether the port is bonded.
func (o LookupMetalPortResultOutput) Bonded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMetalPortResult) bool { return v.Bonded }).(pulumi.BoolOutput)
}

func (o LookupMetalPortResultOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMetalPortResult) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// Flag indicating whether the port can be removed from a bond.
func (o LookupMetalPortResultOutput) DisbondSupported() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMetalPortResult) bool { return v.DisbondSupported }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetalPortResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetalPortResultOutput) Layer2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMetalPortResult) bool { return v.Layer2 }).(pulumi.BoolOutput)
}

// MAC address of the port.
func (o LookupMetalPortResultOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.Mac }).(pulumi.StringOutput)
}

func (o LookupMetalPortResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.Name }).(pulumi.StringOutput)
}

// UUID of native VLAN of the port.
func (o LookupMetalPortResultOutput) NativeVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.NativeVlanId }).(pulumi.StringOutput)
}

// One of `layer2-bonded`, `layer2-individual`, `layer3`, `hybrid`, `hybrid-bonded`.
func (o LookupMetalPortResultOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.NetworkType }).(pulumi.StringOutput)
}

func (o LookupMetalPortResultOutput) PortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMetalPortResult) *string { return v.PortId }).(pulumi.StringPtrOutput)
}

// Type is either `NetworkBondPort` for bond ports or `NetworkPort` for bondable ethernet ports.
func (o LookupMetalPortResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalPortResult) string { return v.Type }).(pulumi.StringOutput)
}

// UUIDs of attached VLANs.
func (o LookupMetalPortResultOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMetalPortResult) []string { return v.VlanIds }).(pulumi.StringArrayOutput)
}

// VXLAN ids of attached VLANs.
func (o LookupMetalPortResultOutput) VxlanIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupMetalPortResult) []int { return v.VxlanIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetalPortResultOutput{})
}
