// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this datasource to retrieve attributes of the Project API resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tfProject1, err := equinix.GetMetalProject(ctx, &GetMetalProjectArgs{
// 			Name: pulumi.StringRef("Terraform Fun"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("usersOfTerraformFun", tfProject1.UserIds)
// 		return nil
// 	})
// }
// ```
func LookupMetalProject(ctx *pulumi.Context, args *LookupMetalProjectArgs, opts ...pulumi.InvokeOption) (*LookupMetalProjectResult, error) {
	var rv LookupMetalProjectResult
	err := ctx.Invoke("equinix:index/getMetalProject:GetMetalProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetMetalProject.
type LookupMetalProjectArgs struct {
	// The name which is used to look up the project.
	Name *string `pulumi:"name"`
	// The UUID by which to look up the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by GetMetalProject.
type LookupMetalProjectResult struct {
	// Whether Backend Transfer is enabled for this project.
	BackendTransfer bool `pulumi:"backendTransfer"`
	// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
	BgpConfigs []GetMetalProjectBgpConfig `pulumi:"bgpConfigs"`
	// The timestamp for when the project was created.
	Created string `pulumi:"created"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The UUID of this project's parent organization.
	OrganizationId string `pulumi:"organizationId"`
	// The UUID of payment method for this project.
	PaymentMethodId string `pulumi:"paymentMethodId"`
	ProjectId       string `pulumi:"projectId"`
	// The timestamp for the last time the project was updated.
	Updated string `pulumi:"updated"`
	// List of UUIDs of user accounts which belong to this project.
	UserIds []string `pulumi:"userIds"`
}

func LookupMetalProjectOutput(ctx *pulumi.Context, args LookupMetalProjectOutputArgs, opts ...pulumi.InvokeOption) LookupMetalProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetalProjectResult, error) {
			args := v.(LookupMetalProjectArgs)
			r, err := LookupMetalProject(ctx, &args, opts...)
			var s LookupMetalProjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetalProjectResultOutput)
}

// A collection of arguments for invoking GetMetalProject.
type LookupMetalProjectOutputArgs struct {
	// The name which is used to look up the project.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The UUID by which to look up the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupMetalProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalProjectArgs)(nil)).Elem()
}

// A collection of values returned by GetMetalProject.
type LookupMetalProjectResultOutput struct{ *pulumi.OutputState }

func (LookupMetalProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetalProjectResult)(nil)).Elem()
}

func (o LookupMetalProjectResultOutput) ToLookupMetalProjectResultOutput() LookupMetalProjectResultOutput {
	return o
}

func (o LookupMetalProjectResultOutput) ToLookupMetalProjectResultOutputWithContext(ctx context.Context) LookupMetalProjectResultOutput {
	return o
}

// Whether Backend Transfer is enabled for this project.
func (o LookupMetalProjectResultOutput) BackendTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) bool { return v.BackendTransfer }).(pulumi.BoolOutput)
}

// Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
func (o LookupMetalProjectResultOutput) BgpConfigs() GetMetalProjectBgpConfigArrayOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) []GetMetalProjectBgpConfig { return v.BgpConfigs }).(GetMetalProjectBgpConfigArrayOutput)
}

// The timestamp for when the project was created.
func (o LookupMetalProjectResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.Created }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMetalProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMetalProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

// The UUID of this project's parent organization.
func (o LookupMetalProjectResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The UUID of payment method for this project.
func (o LookupMetalProjectResultOutput) PaymentMethodId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.PaymentMethodId }).(pulumi.StringOutput)
}

func (o LookupMetalProjectResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The timestamp for the last time the project was updated.
func (o LookupMetalProjectResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) string { return v.Updated }).(pulumi.StringOutput)
}

// List of UUIDs of user accounts which belong to this project.
func (o LookupMetalProjectResultOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMetalProjectResult) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetalProjectResultOutput{})
}
