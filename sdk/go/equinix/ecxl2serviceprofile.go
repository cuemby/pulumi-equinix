// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package equinix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `ECXL2Serviceprofile` is used to manage layer 2 service profiles
// in Equinix Fabric.
//
// This resource relies on the Equinix Fabric API. The parameters
// and attributes available map to the fields described at
// <https://developer.equinix.com/catalog/sellerv3#operation/getProfileByIdOrNameUsingGET>.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/cuemby/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi-equinix/sdk/go/equinix"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := equinix.NewECXL2Serviceprofile(ctx, "private-profile", &equinix.ECXL2ServiceprofileArgs{
// 			BandwidthThresholdNotifications: pulumi.StringArray{
// 				pulumi.String("John.Doe@example.com"),
// 				pulumi.String("Marry.Doe@example.com"),
// 			},
// 			ConnectionNameLabel: pulumi.String("Connection"),
// 			Description:         pulumi.String("my private profile"),
// 			Features: &ECXL2ServiceprofileFeaturesArgs{
// 				AllowRemoteConnections: pulumi.Bool(true),
// 				TestProfile:            pulumi.Bool(false),
// 			},
// 			Ports: ECXL2ServiceprofilePortArray{
// 				&ECXL2ServiceprofilePortArgs{
// 					MetroCode: pulumi.String("NY"),
// 					Uuid:      pulumi.String("a867f685-422f-22f7-6de0-320a5c00abdd"),
// 				},
// 				&ECXL2ServiceprofilePortArgs{
// 					MetroCode: pulumi.String("NY"),
// 					Uuid:      pulumi.String("a867f685-4231-2317-6de0-320a5c00abdd"),
// 				},
// 			},
// 			Private: pulumi.Bool(true),
// 			PrivateUserEmails: pulumi.StringArray{
// 				pulumi.String("John.Doe@example.com"),
// 				pulumi.String("Marry.Doe@example.com"),
// 			},
// 			ProfileStatuschangeNotifications: pulumi.StringArray{
// 				pulumi.String("John.Doe@example.com"),
// 				pulumi.String("Marry.Doe@example.com"),
// 			},
// 			SpeedBands: ECXL2ServiceprofileSpeedBandArray{
// 				&ECXL2ServiceprofileSpeedBandArgs{
// 					Speed:     pulumi.Int(1000),
// 					SpeedUnit: pulumi.String("MB"),
// 				},
// 				&ECXL2ServiceprofileSpeedBandArgs{
// 					Speed:     pulumi.Int(500),
// 					SpeedUnit: pulumi.String("MB"),
// 				},
// 				&ECXL2ServiceprofileSpeedBandArgs{
// 					Speed:     pulumi.Int(100),
// 					SpeedUnit: pulumi.String("MB"),
// 				},
// 			},
// 			VcStatuschangeNotifications: pulumi.StringArray{
// 				pulumi.String("John.Doe@example.com"),
// 				pulumi.String("Marry.Doe@example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an existing ID
//
// ```sh
//  $ pulumi import equinix:index/eCXL2Serviceprofile:ECXL2Serviceprofile example {existing_id}
// ```
type ECXL2Serviceprofile struct {
	pulumi.CustomResourceState

	// Boolean value that determines if API integration is enabled. It
	// allows you to complete connection provisioning in less than five minutes. Without API Integration,
	// additional manual steps will be required and the provisioning will likely take longer.
	ApiIntegration pulumi.BoolPtrOutput `pulumi:"apiIntegration"`
	// Name of the authentication key label to be used by the
	// Authentication Key service. It allows Service Providers with QinQ ports to accept groups of
	// connections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.
	AuthkeyLabel pulumi.StringPtrOutput `pulumi:"authkeyLabel"`
	// Specifies the port bandwidth threshold percentage. If
	// the bandwidth limit is met or exceeded, an alert is sent to the seller.
	BandwidthAlertThreshold pulumi.Float64PtrOutput `pulumi:"bandwidthAlertThreshold"`
	// A list of email addresses that will receive
	// notifications about bandwidth thresholds.
	BandwidthThresholdNotifications pulumi.StringArrayOutput `pulumi:"bandwidthThresholdNotifications"`
	// Custom name used for calling a connections
	// e.g. `circuit`. Defaults to `Connection`.
	ConnectionNameLabel pulumi.StringPtrOutput `pulumi:"connectionNameLabel"`
	// C-Tag/Inner-Tag label name for the connections.
	CtagLabel pulumi.StringPtrOutput `pulumi:"ctagLabel"`
	// Description of the service profile.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Applicable when `apiIntegration` is set to `true`. It
	// indicates whether the port and VLAN details are managed by Equinix.
	EquinixManagedPortVlan pulumi.BoolPtrOutput `pulumi:"equinixManagedPortVlan"`
	// Block of profile features configuration. See Features below
	// for more details.
	Features ECXL2ServiceprofileFeaturesOutput `pulumi:"features"`
	// Specifies the API integration ID that was provided to the customer
	// during onboarding. You can validate your API integration ID using the validateIntegrationId API.
	IntegrationId pulumi.StringPtrOutput `pulumi:"integrationId"`
	// Name of the service profile. An alpha-numeric 50 characters string which can
	// include only hyphens and underscores.
	Name pulumi.StringOutput `pulumi:"name"`
	// You can set an alert for when a percentage of your profile has
	// been sold. Service providers like to use this functionality to alert them when they need to add
	// more ports or when they need to create a new service profile. Required with
	// `oversubscriptionAllowed`, defaults to `1x`.
	Oversubscription pulumi.StringPtrOutput `pulumi:"oversubscription"`
	// Boolean value that determines if, regardless of the
	// utilization, Equinix Fabric will continue to add connections to your links until we reach the
	// oversubscription limit. By selecting this service, you acknowledge that you will manage decisions
	// on when to increase capacity on these link.
	OversubscriptionAllowed pulumi.BoolPtrOutput `pulumi:"oversubscriptionAllowed"`
	// One or more definitions of ports residing in locations, from which your
	// customers will be able to access services using this service profile. See Port below for
	// more details.
	Ports ECXL2ServiceprofilePortArrayOutput `pulumi:"ports"`
	// Boolean value that indicates whether or not this is a private profile,
	// i.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for
	// creating connections if correct permissions are granted.
	Private pulumi.BoolPtrOutput `pulumi:"private"`
	// An array of users email ids who have permission to access this
	// service profile. Argument is required when profile is set as private.
	PrivateUserEmails pulumi.StringArrayOutput `pulumi:"privateUserEmails"`
	// A list of email addresses that will receive
	// notifications about profile status changes.
	ProfileStatuschangeNotifications pulumi.StringArrayOutput `pulumi:"profileStatuschangeNotifications"`
	// Boolean value that determines if your connections will require
	// redundancy. if yes, then users need to create a secondary redundant connection.
	RedundancyRequired pulumi.BoolPtrOutput `pulumi:"redundancyRequired"`
	// Indicates whether the VLAN ID of. the secondary
	// connection is the same as the primary connection.
	SecondaryVlanFromPrimary pulumi.BoolPtrOutput `pulumi:"secondaryVlanFromPrimary"`
	// Boolean value that indicates whether multiple connections
	// can be created with the same authorization key to connect to this service profile after the first
	// connection has been approved by the seller.
	ServicekeyAutogenerated pulumi.BoolPtrOutput `pulumi:"servicekeyAutogenerated"`
	// One or more definitions of supported speed/bandwidth. Argument is
	// required when `speedFromApi` is set to `false`. See Speed Band below for more
	// details.
	SpeedBands ECXL2ServiceprofileSpeedBandArrayOutput `pulumi:"speedBands"`
	// Boolean value that determines if customer is allowed
	// to enter a custom connection speed.
	SpeedCustomizationAllowed pulumi.BoolPtrOutput `pulumi:"speedCustomizationAllowed"`
	// Boolean valuta that determines if connection speed will be derived
	// from an API call. Argument has to be specified when `apiIntegration` is enabled.
	SpeedFromApi pulumi.BoolPtrOutput `pulumi:"speedFromApi"`
	// Service profile provisioning status.
	State pulumi.StringOutput `pulumi:"state"`
	// Specifies additional tagging information required by the seller profile
	// for Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)
	// for additional information. Valid values are:
	TagType pulumi.StringPtrOutput `pulumi:"tagType"`
	// Unique identifier of the port.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// A list of email addresses that will receive
	// notifications about connections approvals and rejections.
	VcStatuschangeNotifications pulumi.StringArrayOutput `pulumi:"vcStatuschangeNotifications"`
}

// NewECXL2Serviceprofile registers a new resource with the given unique name, arguments, and options.
func NewECXL2Serviceprofile(ctx *pulumi.Context,
	name string, args *ECXL2ServiceprofileArgs, opts ...pulumi.ResourceOption) (*ECXL2Serviceprofile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BandwidthThresholdNotifications == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthThresholdNotifications'")
	}
	if args.Features == nil {
		return nil, errors.New("invalid value for required argument 'Features'")
	}
	if args.Ports == nil {
		return nil, errors.New("invalid value for required argument 'Ports'")
	}
	if args.ProfileStatuschangeNotifications == nil {
		return nil, errors.New("invalid value for required argument 'ProfileStatuschangeNotifications'")
	}
	if args.VcStatuschangeNotifications == nil {
		return nil, errors.New("invalid value for required argument 'VcStatuschangeNotifications'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ECXL2Serviceprofile
	err := ctx.RegisterResource("equinix:index/eCXL2Serviceprofile:ECXL2Serviceprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetECXL2Serviceprofile gets an existing ECXL2Serviceprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetECXL2Serviceprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ECXL2ServiceprofileState, opts ...pulumi.ResourceOption) (*ECXL2Serviceprofile, error) {
	var resource ECXL2Serviceprofile
	err := ctx.ReadResource("equinix:index/eCXL2Serviceprofile:ECXL2Serviceprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ECXL2Serviceprofile resources.
type ecxl2serviceprofileState struct {
	// Boolean value that determines if API integration is enabled. It
	// allows you to complete connection provisioning in less than five minutes. Without API Integration,
	// additional manual steps will be required and the provisioning will likely take longer.
	ApiIntegration *bool `pulumi:"apiIntegration"`
	// Name of the authentication key label to be used by the
	// Authentication Key service. It allows Service Providers with QinQ ports to accept groups of
	// connections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.
	AuthkeyLabel *string `pulumi:"authkeyLabel"`
	// Specifies the port bandwidth threshold percentage. If
	// the bandwidth limit is met or exceeded, an alert is sent to the seller.
	BandwidthAlertThreshold *float64 `pulumi:"bandwidthAlertThreshold"`
	// A list of email addresses that will receive
	// notifications about bandwidth thresholds.
	BandwidthThresholdNotifications []string `pulumi:"bandwidthThresholdNotifications"`
	// Custom name used for calling a connections
	// e.g. `circuit`. Defaults to `Connection`.
	ConnectionNameLabel *string `pulumi:"connectionNameLabel"`
	// C-Tag/Inner-Tag label name for the connections.
	CtagLabel *string `pulumi:"ctagLabel"`
	// Description of the service profile.
	Description *string `pulumi:"description"`
	// Applicable when `apiIntegration` is set to `true`. It
	// indicates whether the port and VLAN details are managed by Equinix.
	EquinixManagedPortVlan *bool `pulumi:"equinixManagedPortVlan"`
	// Block of profile features configuration. See Features below
	// for more details.
	Features *ECXL2ServiceprofileFeatures `pulumi:"features"`
	// Specifies the API integration ID that was provided to the customer
	// during onboarding. You can validate your API integration ID using the validateIntegrationId API.
	IntegrationId *string `pulumi:"integrationId"`
	// Name of the service profile. An alpha-numeric 50 characters string which can
	// include only hyphens and underscores.
	Name *string `pulumi:"name"`
	// You can set an alert for when a percentage of your profile has
	// been sold. Service providers like to use this functionality to alert them when they need to add
	// more ports or when they need to create a new service profile. Required with
	// `oversubscriptionAllowed`, defaults to `1x`.
	Oversubscription *string `pulumi:"oversubscription"`
	// Boolean value that determines if, regardless of the
	// utilization, Equinix Fabric will continue to add connections to your links until we reach the
	// oversubscription limit. By selecting this service, you acknowledge that you will manage decisions
	// on when to increase capacity on these link.
	OversubscriptionAllowed *bool `pulumi:"oversubscriptionAllowed"`
	// One or more definitions of ports residing in locations, from which your
	// customers will be able to access services using this service profile. See Port below for
	// more details.
	Ports []ECXL2ServiceprofilePort `pulumi:"ports"`
	// Boolean value that indicates whether or not this is a private profile,
	// i.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for
	// creating connections if correct permissions are granted.
	Private *bool `pulumi:"private"`
	// An array of users email ids who have permission to access this
	// service profile. Argument is required when profile is set as private.
	PrivateUserEmails []string `pulumi:"privateUserEmails"`
	// A list of email addresses that will receive
	// notifications about profile status changes.
	ProfileStatuschangeNotifications []string `pulumi:"profileStatuschangeNotifications"`
	// Boolean value that determines if your connections will require
	// redundancy. if yes, then users need to create a secondary redundant connection.
	RedundancyRequired *bool `pulumi:"redundancyRequired"`
	// Indicates whether the VLAN ID of. the secondary
	// connection is the same as the primary connection.
	SecondaryVlanFromPrimary *bool `pulumi:"secondaryVlanFromPrimary"`
	// Boolean value that indicates whether multiple connections
	// can be created with the same authorization key to connect to this service profile after the first
	// connection has been approved by the seller.
	ServicekeyAutogenerated *bool `pulumi:"servicekeyAutogenerated"`
	// One or more definitions of supported speed/bandwidth. Argument is
	// required when `speedFromApi` is set to `false`. See Speed Band below for more
	// details.
	SpeedBands []ECXL2ServiceprofileSpeedBand `pulumi:"speedBands"`
	// Boolean value that determines if customer is allowed
	// to enter a custom connection speed.
	SpeedCustomizationAllowed *bool `pulumi:"speedCustomizationAllowed"`
	// Boolean valuta that determines if connection speed will be derived
	// from an API call. Argument has to be specified when `apiIntegration` is enabled.
	SpeedFromApi *bool `pulumi:"speedFromApi"`
	// Service profile provisioning status.
	State *string `pulumi:"state"`
	// Specifies additional tagging information required by the seller profile
	// for Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)
	// for additional information. Valid values are:
	TagType *string `pulumi:"tagType"`
	// Unique identifier of the port.
	Uuid *string `pulumi:"uuid"`
	// A list of email addresses that will receive
	// notifications about connections approvals and rejections.
	VcStatuschangeNotifications []string `pulumi:"vcStatuschangeNotifications"`
}

type ECXL2ServiceprofileState struct {
	// Boolean value that determines if API integration is enabled. It
	// allows you to complete connection provisioning in less than five minutes. Without API Integration,
	// additional manual steps will be required and the provisioning will likely take longer.
	ApiIntegration pulumi.BoolPtrInput
	// Name of the authentication key label to be used by the
	// Authentication Key service. It allows Service Providers with QinQ ports to accept groups of
	// connections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.
	AuthkeyLabel pulumi.StringPtrInput
	// Specifies the port bandwidth threshold percentage. If
	// the bandwidth limit is met or exceeded, an alert is sent to the seller.
	BandwidthAlertThreshold pulumi.Float64PtrInput
	// A list of email addresses that will receive
	// notifications about bandwidth thresholds.
	BandwidthThresholdNotifications pulumi.StringArrayInput
	// Custom name used for calling a connections
	// e.g. `circuit`. Defaults to `Connection`.
	ConnectionNameLabel pulumi.StringPtrInput
	// C-Tag/Inner-Tag label name for the connections.
	CtagLabel pulumi.StringPtrInput
	// Description of the service profile.
	Description pulumi.StringPtrInput
	// Applicable when `apiIntegration` is set to `true`. It
	// indicates whether the port and VLAN details are managed by Equinix.
	EquinixManagedPortVlan pulumi.BoolPtrInput
	// Block of profile features configuration. See Features below
	// for more details.
	Features ECXL2ServiceprofileFeaturesPtrInput
	// Specifies the API integration ID that was provided to the customer
	// during onboarding. You can validate your API integration ID using the validateIntegrationId API.
	IntegrationId pulumi.StringPtrInput
	// Name of the service profile. An alpha-numeric 50 characters string which can
	// include only hyphens and underscores.
	Name pulumi.StringPtrInput
	// You can set an alert for when a percentage of your profile has
	// been sold. Service providers like to use this functionality to alert them when they need to add
	// more ports or when they need to create a new service profile. Required with
	// `oversubscriptionAllowed`, defaults to `1x`.
	Oversubscription pulumi.StringPtrInput
	// Boolean value that determines if, regardless of the
	// utilization, Equinix Fabric will continue to add connections to your links until we reach the
	// oversubscription limit. By selecting this service, you acknowledge that you will manage decisions
	// on when to increase capacity on these link.
	OversubscriptionAllowed pulumi.BoolPtrInput
	// One or more definitions of ports residing in locations, from which your
	// customers will be able to access services using this service profile. See Port below for
	// more details.
	Ports ECXL2ServiceprofilePortArrayInput
	// Boolean value that indicates whether or not this is a private profile,
	// i.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for
	// creating connections if correct permissions are granted.
	Private pulumi.BoolPtrInput
	// An array of users email ids who have permission to access this
	// service profile. Argument is required when profile is set as private.
	PrivateUserEmails pulumi.StringArrayInput
	// A list of email addresses that will receive
	// notifications about profile status changes.
	ProfileStatuschangeNotifications pulumi.StringArrayInput
	// Boolean value that determines if your connections will require
	// redundancy. if yes, then users need to create a secondary redundant connection.
	RedundancyRequired pulumi.BoolPtrInput
	// Indicates whether the VLAN ID of. the secondary
	// connection is the same as the primary connection.
	SecondaryVlanFromPrimary pulumi.BoolPtrInput
	// Boolean value that indicates whether multiple connections
	// can be created with the same authorization key to connect to this service profile after the first
	// connection has been approved by the seller.
	ServicekeyAutogenerated pulumi.BoolPtrInput
	// One or more definitions of supported speed/bandwidth. Argument is
	// required when `speedFromApi` is set to `false`. See Speed Band below for more
	// details.
	SpeedBands ECXL2ServiceprofileSpeedBandArrayInput
	// Boolean value that determines if customer is allowed
	// to enter a custom connection speed.
	SpeedCustomizationAllowed pulumi.BoolPtrInput
	// Boolean valuta that determines if connection speed will be derived
	// from an API call. Argument has to be specified when `apiIntegration` is enabled.
	SpeedFromApi pulumi.BoolPtrInput
	// Service profile provisioning status.
	State pulumi.StringPtrInput
	// Specifies additional tagging information required by the seller profile
	// for Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)
	// for additional information. Valid values are:
	TagType pulumi.StringPtrInput
	// Unique identifier of the port.
	Uuid pulumi.StringPtrInput
	// A list of email addresses that will receive
	// notifications about connections approvals and rejections.
	VcStatuschangeNotifications pulumi.StringArrayInput
}

func (ECXL2ServiceprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecxl2serviceprofileState)(nil)).Elem()
}

type ecxl2serviceprofileArgs struct {
	// Boolean value that determines if API integration is enabled. It
	// allows you to complete connection provisioning in less than five minutes. Without API Integration,
	// additional manual steps will be required and the provisioning will likely take longer.
	ApiIntegration *bool `pulumi:"apiIntegration"`
	// Name of the authentication key label to be used by the
	// Authentication Key service. It allows Service Providers with QinQ ports to accept groups of
	// connections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.
	AuthkeyLabel *string `pulumi:"authkeyLabel"`
	// Specifies the port bandwidth threshold percentage. If
	// the bandwidth limit is met or exceeded, an alert is sent to the seller.
	BandwidthAlertThreshold *float64 `pulumi:"bandwidthAlertThreshold"`
	// A list of email addresses that will receive
	// notifications about bandwidth thresholds.
	BandwidthThresholdNotifications []string `pulumi:"bandwidthThresholdNotifications"`
	// Custom name used for calling a connections
	// e.g. `circuit`. Defaults to `Connection`.
	ConnectionNameLabel *string `pulumi:"connectionNameLabel"`
	// C-Tag/Inner-Tag label name for the connections.
	CtagLabel *string `pulumi:"ctagLabel"`
	// Description of the service profile.
	Description *string `pulumi:"description"`
	// Applicable when `apiIntegration` is set to `true`. It
	// indicates whether the port and VLAN details are managed by Equinix.
	EquinixManagedPortVlan *bool `pulumi:"equinixManagedPortVlan"`
	// Block of profile features configuration. See Features below
	// for more details.
	Features ECXL2ServiceprofileFeatures `pulumi:"features"`
	// Specifies the API integration ID that was provided to the customer
	// during onboarding. You can validate your API integration ID using the validateIntegrationId API.
	IntegrationId *string `pulumi:"integrationId"`
	// Name of the service profile. An alpha-numeric 50 characters string which can
	// include only hyphens and underscores.
	Name *string `pulumi:"name"`
	// You can set an alert for when a percentage of your profile has
	// been sold. Service providers like to use this functionality to alert them when they need to add
	// more ports or when they need to create a new service profile. Required with
	// `oversubscriptionAllowed`, defaults to `1x`.
	Oversubscription *string `pulumi:"oversubscription"`
	// Boolean value that determines if, regardless of the
	// utilization, Equinix Fabric will continue to add connections to your links until we reach the
	// oversubscription limit. By selecting this service, you acknowledge that you will manage decisions
	// on when to increase capacity on these link.
	OversubscriptionAllowed *bool `pulumi:"oversubscriptionAllowed"`
	// One or more definitions of ports residing in locations, from which your
	// customers will be able to access services using this service profile. See Port below for
	// more details.
	Ports []ECXL2ServiceprofilePort `pulumi:"ports"`
	// Boolean value that indicates whether or not this is a private profile,
	// i.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for
	// creating connections if correct permissions are granted.
	Private *bool `pulumi:"private"`
	// An array of users email ids who have permission to access this
	// service profile. Argument is required when profile is set as private.
	PrivateUserEmails []string `pulumi:"privateUserEmails"`
	// A list of email addresses that will receive
	// notifications about profile status changes.
	ProfileStatuschangeNotifications []string `pulumi:"profileStatuschangeNotifications"`
	// Boolean value that determines if your connections will require
	// redundancy. if yes, then users need to create a secondary redundant connection.
	RedundancyRequired *bool `pulumi:"redundancyRequired"`
	// Indicates whether the VLAN ID of. the secondary
	// connection is the same as the primary connection.
	SecondaryVlanFromPrimary *bool `pulumi:"secondaryVlanFromPrimary"`
	// Boolean value that indicates whether multiple connections
	// can be created with the same authorization key to connect to this service profile after the first
	// connection has been approved by the seller.
	ServicekeyAutogenerated *bool `pulumi:"servicekeyAutogenerated"`
	// One or more definitions of supported speed/bandwidth. Argument is
	// required when `speedFromApi` is set to `false`. See Speed Band below for more
	// details.
	SpeedBands []ECXL2ServiceprofileSpeedBand `pulumi:"speedBands"`
	// Boolean value that determines if customer is allowed
	// to enter a custom connection speed.
	SpeedCustomizationAllowed *bool `pulumi:"speedCustomizationAllowed"`
	// Boolean valuta that determines if connection speed will be derived
	// from an API call. Argument has to be specified when `apiIntegration` is enabled.
	SpeedFromApi *bool `pulumi:"speedFromApi"`
	// Specifies additional tagging information required by the seller profile
	// for Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)
	// for additional information. Valid values are:
	TagType *string `pulumi:"tagType"`
	// A list of email addresses that will receive
	// notifications about connections approvals and rejections.
	VcStatuschangeNotifications []string `pulumi:"vcStatuschangeNotifications"`
}

// The set of arguments for constructing a ECXL2Serviceprofile resource.
type ECXL2ServiceprofileArgs struct {
	// Boolean value that determines if API integration is enabled. It
	// allows you to complete connection provisioning in less than five minutes. Without API Integration,
	// additional manual steps will be required and the provisioning will likely take longer.
	ApiIntegration pulumi.BoolPtrInput
	// Name of the authentication key label to be used by the
	// Authentication Key service. It allows Service Providers with QinQ ports to accept groups of
	// connections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.
	AuthkeyLabel pulumi.StringPtrInput
	// Specifies the port bandwidth threshold percentage. If
	// the bandwidth limit is met or exceeded, an alert is sent to the seller.
	BandwidthAlertThreshold pulumi.Float64PtrInput
	// A list of email addresses that will receive
	// notifications about bandwidth thresholds.
	BandwidthThresholdNotifications pulumi.StringArrayInput
	// Custom name used for calling a connections
	// e.g. `circuit`. Defaults to `Connection`.
	ConnectionNameLabel pulumi.StringPtrInput
	// C-Tag/Inner-Tag label name for the connections.
	CtagLabel pulumi.StringPtrInput
	// Description of the service profile.
	Description pulumi.StringPtrInput
	// Applicable when `apiIntegration` is set to `true`. It
	// indicates whether the port and VLAN details are managed by Equinix.
	EquinixManagedPortVlan pulumi.BoolPtrInput
	// Block of profile features configuration. See Features below
	// for more details.
	Features ECXL2ServiceprofileFeaturesInput
	// Specifies the API integration ID that was provided to the customer
	// during onboarding. You can validate your API integration ID using the validateIntegrationId API.
	IntegrationId pulumi.StringPtrInput
	// Name of the service profile. An alpha-numeric 50 characters string which can
	// include only hyphens and underscores.
	Name pulumi.StringPtrInput
	// You can set an alert for when a percentage of your profile has
	// been sold. Service providers like to use this functionality to alert them when they need to add
	// more ports or when they need to create a new service profile. Required with
	// `oversubscriptionAllowed`, defaults to `1x`.
	Oversubscription pulumi.StringPtrInput
	// Boolean value that determines if, regardless of the
	// utilization, Equinix Fabric will continue to add connections to your links until we reach the
	// oversubscription limit. By selecting this service, you acknowledge that you will manage decisions
	// on when to increase capacity on these link.
	OversubscriptionAllowed pulumi.BoolPtrInput
	// One or more definitions of ports residing in locations, from which your
	// customers will be able to access services using this service profile. See Port below for
	// more details.
	Ports ECXL2ServiceprofilePortArrayInput
	// Boolean value that indicates whether or not this is a private profile,
	// i.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for
	// creating connections if correct permissions are granted.
	Private pulumi.BoolPtrInput
	// An array of users email ids who have permission to access this
	// service profile. Argument is required when profile is set as private.
	PrivateUserEmails pulumi.StringArrayInput
	// A list of email addresses that will receive
	// notifications about profile status changes.
	ProfileStatuschangeNotifications pulumi.StringArrayInput
	// Boolean value that determines if your connections will require
	// redundancy. if yes, then users need to create a secondary redundant connection.
	RedundancyRequired pulumi.BoolPtrInput
	// Indicates whether the VLAN ID of. the secondary
	// connection is the same as the primary connection.
	SecondaryVlanFromPrimary pulumi.BoolPtrInput
	// Boolean value that indicates whether multiple connections
	// can be created with the same authorization key to connect to this service profile after the first
	// connection has been approved by the seller.
	ServicekeyAutogenerated pulumi.BoolPtrInput
	// One or more definitions of supported speed/bandwidth. Argument is
	// required when `speedFromApi` is set to `false`. See Speed Band below for more
	// details.
	SpeedBands ECXL2ServiceprofileSpeedBandArrayInput
	// Boolean value that determines if customer is allowed
	// to enter a custom connection speed.
	SpeedCustomizationAllowed pulumi.BoolPtrInput
	// Boolean valuta that determines if connection speed will be derived
	// from an API call. Argument has to be specified when `apiIntegration` is enabled.
	SpeedFromApi pulumi.BoolPtrInput
	// Specifies additional tagging information required by the seller profile
	// for Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)
	// for additional information. Valid values are:
	TagType pulumi.StringPtrInput
	// A list of email addresses that will receive
	// notifications about connections approvals and rejections.
	VcStatuschangeNotifications pulumi.StringArrayInput
}

func (ECXL2ServiceprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecxl2serviceprofileArgs)(nil)).Elem()
}

type ECXL2ServiceprofileInput interface {
	pulumi.Input

	ToECXL2ServiceprofileOutput() ECXL2ServiceprofileOutput
	ToECXL2ServiceprofileOutputWithContext(ctx context.Context) ECXL2ServiceprofileOutput
}

func (*ECXL2Serviceprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2Serviceprofile)(nil)).Elem()
}

func (i *ECXL2Serviceprofile) ToECXL2ServiceprofileOutput() ECXL2ServiceprofileOutput {
	return i.ToECXL2ServiceprofileOutputWithContext(context.Background())
}

func (i *ECXL2Serviceprofile) ToECXL2ServiceprofileOutputWithContext(ctx context.Context) ECXL2ServiceprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileOutput)
}

// ECXL2ServiceprofileArrayInput is an input type that accepts ECXL2ServiceprofileArray and ECXL2ServiceprofileArrayOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofileArrayInput` via:
//
//          ECXL2ServiceprofileArray{ ECXL2ServiceprofileArgs{...} }
type ECXL2ServiceprofileArrayInput interface {
	pulumi.Input

	ToECXL2ServiceprofileArrayOutput() ECXL2ServiceprofileArrayOutput
	ToECXL2ServiceprofileArrayOutputWithContext(context.Context) ECXL2ServiceprofileArrayOutput
}

type ECXL2ServiceprofileArray []ECXL2ServiceprofileInput

func (ECXL2ServiceprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECXL2Serviceprofile)(nil)).Elem()
}

func (i ECXL2ServiceprofileArray) ToECXL2ServiceprofileArrayOutput() ECXL2ServiceprofileArrayOutput {
	return i.ToECXL2ServiceprofileArrayOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofileArray) ToECXL2ServiceprofileArrayOutputWithContext(ctx context.Context) ECXL2ServiceprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileArrayOutput)
}

// ECXL2ServiceprofileMapInput is an input type that accepts ECXL2ServiceprofileMap and ECXL2ServiceprofileMapOutput values.
// You can construct a concrete instance of `ECXL2ServiceprofileMapInput` via:
//
//          ECXL2ServiceprofileMap{ "key": ECXL2ServiceprofileArgs{...} }
type ECXL2ServiceprofileMapInput interface {
	pulumi.Input

	ToECXL2ServiceprofileMapOutput() ECXL2ServiceprofileMapOutput
	ToECXL2ServiceprofileMapOutputWithContext(context.Context) ECXL2ServiceprofileMapOutput
}

type ECXL2ServiceprofileMap map[string]ECXL2ServiceprofileInput

func (ECXL2ServiceprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECXL2Serviceprofile)(nil)).Elem()
}

func (i ECXL2ServiceprofileMap) ToECXL2ServiceprofileMapOutput() ECXL2ServiceprofileMapOutput {
	return i.ToECXL2ServiceprofileMapOutputWithContext(context.Background())
}

func (i ECXL2ServiceprofileMap) ToECXL2ServiceprofileMapOutputWithContext(ctx context.Context) ECXL2ServiceprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECXL2ServiceprofileMapOutput)
}

type ECXL2ServiceprofileOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECXL2Serviceprofile)(nil)).Elem()
}

func (o ECXL2ServiceprofileOutput) ToECXL2ServiceprofileOutput() ECXL2ServiceprofileOutput {
	return o
}

func (o ECXL2ServiceprofileOutput) ToECXL2ServiceprofileOutputWithContext(ctx context.Context) ECXL2ServiceprofileOutput {
	return o
}

// Boolean value that determines if API integration is enabled. It
// allows you to complete connection provisioning in less than five minutes. Without API Integration,
// additional manual steps will be required and the provisioning will likely take longer.
func (o ECXL2ServiceprofileOutput) ApiIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.ApiIntegration }).(pulumi.BoolPtrOutput)
}

// Name of the authentication key label to be used by the
// Authentication Key service. It allows Service Providers with QinQ ports to accept groups of
// connections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.
func (o ECXL2ServiceprofileOutput) AuthkeyLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.AuthkeyLabel }).(pulumi.StringPtrOutput)
}

// Specifies the port bandwidth threshold percentage. If
// the bandwidth limit is met or exceeded, an alert is sent to the seller.
func (o ECXL2ServiceprofileOutput) BandwidthAlertThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.Float64PtrOutput { return v.BandwidthAlertThreshold }).(pulumi.Float64PtrOutput)
}

// A list of email addresses that will receive
// notifications about bandwidth thresholds.
func (o ECXL2ServiceprofileOutput) BandwidthThresholdNotifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringArrayOutput { return v.BandwidthThresholdNotifications }).(pulumi.StringArrayOutput)
}

// Custom name used for calling a connections
// e.g. `circuit`. Defaults to `Connection`.
func (o ECXL2ServiceprofileOutput) ConnectionNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.ConnectionNameLabel }).(pulumi.StringPtrOutput)
}

// C-Tag/Inner-Tag label name for the connections.
func (o ECXL2ServiceprofileOutput) CtagLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.CtagLabel }).(pulumi.StringPtrOutput)
}

// Description of the service profile.
func (o ECXL2ServiceprofileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Applicable when `apiIntegration` is set to `true`. It
// indicates whether the port and VLAN details are managed by Equinix.
func (o ECXL2ServiceprofileOutput) EquinixManagedPortVlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.EquinixManagedPortVlan }).(pulumi.BoolPtrOutput)
}

// Block of profile features configuration. See Features below
// for more details.
func (o ECXL2ServiceprofileOutput) Features() ECXL2ServiceprofileFeaturesOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) ECXL2ServiceprofileFeaturesOutput { return v.Features }).(ECXL2ServiceprofileFeaturesOutput)
}

// Specifies the API integration ID that was provided to the customer
// during onboarding. You can validate your API integration ID using the validateIntegrationId API.
func (o ECXL2ServiceprofileOutput) IntegrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.IntegrationId }).(pulumi.StringPtrOutput)
}

// Name of the service profile. An alpha-numeric 50 characters string which can
// include only hyphens and underscores.
func (o ECXL2ServiceprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// You can set an alert for when a percentage of your profile has
// been sold. Service providers like to use this functionality to alert them when they need to add
// more ports or when they need to create a new service profile. Required with
// `oversubscriptionAllowed`, defaults to `1x`.
func (o ECXL2ServiceprofileOutput) Oversubscription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.Oversubscription }).(pulumi.StringPtrOutput)
}

// Boolean value that determines if, regardless of the
// utilization, Equinix Fabric will continue to add connections to your links until we reach the
// oversubscription limit. By selecting this service, you acknowledge that you will manage decisions
// on when to increase capacity on these link.
func (o ECXL2ServiceprofileOutput) OversubscriptionAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.OversubscriptionAllowed }).(pulumi.BoolPtrOutput)
}

// One or more definitions of ports residing in locations, from which your
// customers will be able to access services using this service profile. See Port below for
// more details.
func (o ECXL2ServiceprofileOutput) Ports() ECXL2ServiceprofilePortArrayOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) ECXL2ServiceprofilePortArrayOutput { return v.Ports }).(ECXL2ServiceprofilePortArrayOutput)
}

// Boolean value that indicates whether or not this is a private profile,
// i.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for
// creating connections if correct permissions are granted.
func (o ECXL2ServiceprofileOutput) Private() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.Private }).(pulumi.BoolPtrOutput)
}

// An array of users email ids who have permission to access this
// service profile. Argument is required when profile is set as private.
func (o ECXL2ServiceprofileOutput) PrivateUserEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringArrayOutput { return v.PrivateUserEmails }).(pulumi.StringArrayOutput)
}

// A list of email addresses that will receive
// notifications about profile status changes.
func (o ECXL2ServiceprofileOutput) ProfileStatuschangeNotifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringArrayOutput { return v.ProfileStatuschangeNotifications }).(pulumi.StringArrayOutput)
}

// Boolean value that determines if your connections will require
// redundancy. if yes, then users need to create a secondary redundant connection.
func (o ECXL2ServiceprofileOutput) RedundancyRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.RedundancyRequired }).(pulumi.BoolPtrOutput)
}

// Indicates whether the VLAN ID of. the secondary
// connection is the same as the primary connection.
func (o ECXL2ServiceprofileOutput) SecondaryVlanFromPrimary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.SecondaryVlanFromPrimary }).(pulumi.BoolPtrOutput)
}

// Boolean value that indicates whether multiple connections
// can be created with the same authorization key to connect to this service profile after the first
// connection has been approved by the seller.
func (o ECXL2ServiceprofileOutput) ServicekeyAutogenerated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.ServicekeyAutogenerated }).(pulumi.BoolPtrOutput)
}

// One or more definitions of supported speed/bandwidth. Argument is
// required when `speedFromApi` is set to `false`. See Speed Band below for more
// details.
func (o ECXL2ServiceprofileOutput) SpeedBands() ECXL2ServiceprofileSpeedBandArrayOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) ECXL2ServiceprofileSpeedBandArrayOutput { return v.SpeedBands }).(ECXL2ServiceprofileSpeedBandArrayOutput)
}

// Boolean value that determines if customer is allowed
// to enter a custom connection speed.
func (o ECXL2ServiceprofileOutput) SpeedCustomizationAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.SpeedCustomizationAllowed }).(pulumi.BoolPtrOutput)
}

// Boolean valuta that determines if connection speed will be derived
// from an API call. Argument has to be specified when `apiIntegration` is enabled.
func (o ECXL2ServiceprofileOutput) SpeedFromApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.BoolPtrOutput { return v.SpeedFromApi }).(pulumi.BoolPtrOutput)
}

// Service profile provisioning status.
func (o ECXL2ServiceprofileOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Specifies additional tagging information required by the seller profile
// for Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)
// for additional information. Valid values are:
func (o ECXL2ServiceprofileOutput) TagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringPtrOutput { return v.TagType }).(pulumi.StringPtrOutput)
}

// Unique identifier of the port.
func (o ECXL2ServiceprofileOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// A list of email addresses that will receive
// notifications about connections approvals and rejections.
func (o ECXL2ServiceprofileOutput) VcStatuschangeNotifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECXL2Serviceprofile) pulumi.StringArrayOutput { return v.VcStatuschangeNotifications }).(pulumi.StringArrayOutput)
}

type ECXL2ServiceprofileArrayOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ECXL2Serviceprofile)(nil)).Elem()
}

func (o ECXL2ServiceprofileArrayOutput) ToECXL2ServiceprofileArrayOutput() ECXL2ServiceprofileArrayOutput {
	return o
}

func (o ECXL2ServiceprofileArrayOutput) ToECXL2ServiceprofileArrayOutputWithContext(ctx context.Context) ECXL2ServiceprofileArrayOutput {
	return o
}

func (o ECXL2ServiceprofileArrayOutput) Index(i pulumi.IntInput) ECXL2ServiceprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ECXL2Serviceprofile {
		return vs[0].([]*ECXL2Serviceprofile)[vs[1].(int)]
	}).(ECXL2ServiceprofileOutput)
}

type ECXL2ServiceprofileMapOutput struct{ *pulumi.OutputState }

func (ECXL2ServiceprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ECXL2Serviceprofile)(nil)).Elem()
}

func (o ECXL2ServiceprofileMapOutput) ToECXL2ServiceprofileMapOutput() ECXL2ServiceprofileMapOutput {
	return o
}

func (o ECXL2ServiceprofileMapOutput) ToECXL2ServiceprofileMapOutputWithContext(ctx context.Context) ECXL2ServiceprofileMapOutput {
	return o
}

func (o ECXL2ServiceprofileMapOutput) MapIndex(k pulumi.StringInput) ECXL2ServiceprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ECXL2Serviceprofile {
		return vs[0].(map[string]*ECXL2Serviceprofile)[vs[1].(string)]
	}).(ECXL2ServiceprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileInput)(nil)).Elem(), &ECXL2Serviceprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileArrayInput)(nil)).Elem(), ECXL2ServiceprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECXL2ServiceprofileMapInput)(nil)).Elem(), ECXL2ServiceprofileMap{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileArrayOutput{})
	pulumi.RegisterOutputType(ECXL2ServiceprofileMapOutput{})
}
