// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix
{
    /// <summary>
    /// Resource `equinix.NetworkSSHUser` allows creation and management of Equinix Network
    /// Edge SSH users.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create SSH user with password auth method and associate it with
    ///         // two virtual network devices
    ///         var john = new Equinix.NetworkSSHUser("john", new Equinix.NetworkSSHUserArgs
    ///         {
    ///             Username = "john",
    ///             Password = "secret",
    ///             DeviceIds = 
    ///             {
    ///                 equinix_ne_device.Csr1000v_ha.Uuid,
    ///                 equinix_ne_device.Csr1000v_ha.Redundant_uuid,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using an existing ID
    /// 
    /// ```sh
    ///  $ pulumi import equinix:index/networkSSHUser:NetworkSSHUser example {existing_id}
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:index/networkSSHUser:NetworkSSHUser")]
    public partial class NetworkSSHUser : Pulumi.CustomResource
    {
        /// <summary>
        /// list of device identifiers to which user will have access.
        /// </summary>
        [Output("deviceIds")]
        public Output<ImmutableArray<string>> DeviceIds { get; private set; } = null!;

        /// <summary>
        /// SSH user password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// SSH user login name.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// SSH user unique identifier.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkSSHUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkSSHUser(string name, NetworkSSHUserArgs args, CustomResourceOptions? options = null)
            : base("equinix:index/networkSSHUser:NetworkSSHUser", name, args ?? new NetworkSSHUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkSSHUser(string name, Input<string> id, NetworkSSHUserState? state = null, CustomResourceOptions? options = null)
            : base("equinix:index/networkSSHUser:NetworkSSHUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkSSHUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkSSHUser Get(string name, Input<string> id, NetworkSSHUserState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkSSHUser(name, id, state, options);
        }
    }

    public sealed class NetworkSSHUserArgs : Pulumi.ResourceArgs
    {
        [Input("deviceIds", required: true)]
        private InputList<string>? _deviceIds;

        /// <summary>
        /// list of device identifiers to which user will have access.
        /// </summary>
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        /// <summary>
        /// SSH user password.
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// SSH user login name.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public NetworkSSHUserArgs()
        {
        }
    }

    public sealed class NetworkSSHUserState : Pulumi.ResourceArgs
    {
        [Input("deviceIds")]
        private InputList<string>? _deviceIds;

        /// <summary>
        /// list of device identifiers to which user will have access.
        /// </summary>
        public InputList<string> DeviceIds
        {
            get => _deviceIds ?? (_deviceIds = new InputList<string>());
            set => _deviceIds = value;
        }

        /// <summary>
        /// SSH user password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// SSH user login name.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// SSH user unique identifier.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public NetworkSSHUserState()
        {
        }
    }
}
