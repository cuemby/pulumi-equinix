// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix
{
    public static class GetECXL2Sellerprofiles
    {
        /// <summary>
        /// Use this data source to get details of available Equinix Fabric layer 2 seller profiles. It is
        /// possible to apply filtering criteria for returned list of profiles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var aws = Output.Create(Equinix.GetECXL2Sellerprofiles.InvokeAsync(new Equinix.GetECXL2SellerprofilesArgs
        ///         {
        ///             MetroCodes = 
        ///             {
        ///                 "SV",
        ///                 "DC",
        ///             },
        ///             OrganizationGlobalName = "AWS",
        ///             SpeedBands = 
        ///             {
        ///                 "1GB",
        ///                 "500MB",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetECXL2SellerprofilesResult> InvokeAsync(GetECXL2SellerprofilesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetECXL2SellerprofilesResult>("equinix:index/getECXL2Sellerprofiles:GetECXL2Sellerprofiles", args ?? new GetECXL2SellerprofilesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get details of available Equinix Fabric layer 2 seller profiles. It is
        /// possible to apply filtering criteria for returned list of profiles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var aws = Output.Create(Equinix.GetECXL2Sellerprofiles.InvokeAsync(new Equinix.GetECXL2SellerprofilesArgs
        ///         {
        ///             MetroCodes = 
        ///             {
        ///                 "SV",
        ///                 "DC",
        ///             },
        ///             OrganizationGlobalName = "AWS",
        ///             SpeedBands = 
        ///             {
        ///                 "1GB",
        ///                 "500MB",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetECXL2SellerprofilesResult> Invoke(GetECXL2SellerprofilesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetECXL2SellerprofilesResult>("equinix:index/getECXL2Sellerprofiles:GetECXL2Sellerprofiles", args ?? new GetECXL2SellerprofilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetECXL2SellerprofilesArgs : Pulumi.InvokeArgs
    {
        [Input("metroCodes")]
        private List<string>? _metroCodes;

        /// <summary>
        /// List of metro codes of locations that should be served by resulting
        /// profiles.
        /// </summary>
        public List<string> MetroCodes
        {
            get => _metroCodes ?? (_metroCodes = new List<string>());
            set => _metroCodes = value;
        }

        /// <summary>
        /// A regex string to apply on returned seller profile names and filter
        /// search results.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Name of seller's global organization.
        /// </summary>
        [Input("organizationGlobalName")]
        public string? OrganizationGlobalName { get; set; }

        /// <summary>
        /// Name of seller's organization.
        /// </summary>
        [Input("organizationName")]
        public string? OrganizationName { get; set; }

        [Input("speedBands")]
        private List<string>? _speedBands;

        /// <summary>
        /// List of speed bands that should be supported by resulting profiles.
        /// </summary>
        public List<string> SpeedBands
        {
            get => _speedBands ?? (_speedBands = new List<string>());
            set => _speedBands = value;
        }

        public GetECXL2SellerprofilesArgs()
        {
        }
    }

    public sealed class GetECXL2SellerprofilesInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("metroCodes")]
        private InputList<string>? _metroCodes;

        /// <summary>
        /// List of metro codes of locations that should be served by resulting
        /// profiles.
        /// </summary>
        public InputList<string> MetroCodes
        {
            get => _metroCodes ?? (_metroCodes = new InputList<string>());
            set => _metroCodes = value;
        }

        /// <summary>
        /// A regex string to apply on returned seller profile names and filter
        /// search results.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// Name of seller's global organization.
        /// </summary>
        [Input("organizationGlobalName")]
        public Input<string>? OrganizationGlobalName { get; set; }

        /// <summary>
        /// Name of seller's organization.
        /// </summary>
        [Input("organizationName")]
        public Input<string>? OrganizationName { get; set; }

        [Input("speedBands")]
        private InputList<string>? _speedBands;

        /// <summary>
        /// List of speed bands that should be supported by resulting profiles.
        /// </summary>
        public InputList<string> SpeedBands
        {
            get => _speedBands ?? (_speedBands = new InputList<string>());
            set => _speedBands = value;
        }

        public GetECXL2SellerprofilesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetECXL2SellerprofilesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> MetroCodes;
        public readonly string? NameRegex;
        public readonly string? OrganizationGlobalName;
        public readonly string? OrganizationName;
        /// <summary>
        /// List of resulting profiles. Each element in the `profiles` list exports all
        /// Service Profile Attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetECXL2SellerprofilesProfileResult> Profiles;
        public readonly ImmutableArray<string> SpeedBands;

        [OutputConstructor]
        private GetECXL2SellerprofilesResult(
            string id,

            ImmutableArray<string> metroCodes,

            string? nameRegex,

            string? organizationGlobalName,

            string? organizationName,

            ImmutableArray<Outputs.GetECXL2SellerprofilesProfileResult> profiles,

            ImmutableArray<string> speedBands)
        {
            Id = id;
            MetroCodes = metroCodes;
            NameRegex = nameRegex;
            OrganizationGlobalName = organizationGlobalName;
            OrganizationName = organizationName;
            Profiles = profiles;
            SpeedBands = speedBands;
        }
    }
}
