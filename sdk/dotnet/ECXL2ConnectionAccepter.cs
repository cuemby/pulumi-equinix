// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Cuemby.Equinix
{
    /// <summary>
    /// ## Import
    /// 
    /// This resource can be imported using an existing ID
    /// 
    /// ```sh
    ///  $ pulumi import equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter example {existing_id}
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter")]
    public partial class ECXL2ConnectionAccepter : Pulumi.CustomResource
    {
        /// <summary>
        /// Access Key used to accept connection on provider side.
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// Identifier of a hosted Direct Connect connection on AWS side,
        /// applicable for accepter resource with connections to AWS only.
        /// </summary>
        [Output("awsConnectionId")]
        public Output<string> AwsConnectionId { get; private set; } = null!;

        /// <summary>
        /// AWS Profile Name for retrieving credentials from.
        /// shared credentials file
        /// </summary>
        [Output("awsProfile")]
        public Output<string?> AwsProfile { get; private set; } = null!;

        /// <summary>
        /// Identifier of Layer 2 connection that will be accepted.
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// Secret Key used to accept connection on provider side.
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;


        /// <summary>
        /// Create a ECXL2ConnectionAccepter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ECXL2ConnectionAccepter(string name, ECXL2ConnectionAccepterArgs args, CustomResourceOptions? options = null)
            : base("equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter", name, args ?? new ECXL2ConnectionAccepterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ECXL2ConnectionAccepter(string name, Input<string> id, ECXL2ConnectionAccepterState? state = null, CustomResourceOptions? options = null)
            : base("equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/cuemby/pulumi-equinix/releases/downloads/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ECXL2ConnectionAccepter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ECXL2ConnectionAccepter Get(string name, Input<string> id, ECXL2ConnectionAccepterState? state = null, CustomResourceOptions? options = null)
        {
            return new ECXL2ConnectionAccepter(name, id, state, options);
        }
    }

    public sealed class ECXL2ConnectionAccepterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access Key used to accept connection on provider side.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// AWS Profile Name for retrieving credentials from.
        /// shared credentials file
        /// </summary>
        [Input("awsProfile")]
        public Input<string>? AwsProfile { get; set; }

        /// <summary>
        /// Identifier of Layer 2 connection that will be accepted.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// Secret Key used to accept connection on provider side.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public ECXL2ConnectionAccepterArgs()
        {
        }
    }

    public sealed class ECXL2ConnectionAccepterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access Key used to accept connection on provider side.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// Identifier of a hosted Direct Connect connection on AWS side,
        /// applicable for accepter resource with connections to AWS only.
        /// </summary>
        [Input("awsConnectionId")]
        public Input<string>? AwsConnectionId { get; set; }

        /// <summary>
        /// AWS Profile Name for retrieving credentials from.
        /// shared credentials file
        /// </summary>
        [Input("awsProfile")]
        public Input<string>? AwsProfile { get; set; }

        /// <summary>
        /// Identifier of Layer 2 connection that will be accepted.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// Secret Key used to accept connection on provider side.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public ECXL2ConnectionAccepterState()
        {
        }
    }
}
