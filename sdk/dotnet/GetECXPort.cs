// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Cuemby.Equinix
{
    public static class GetECXPort
    {
        /// <summary>
        /// Use this data source to get details of Equinix Fabric port with a given name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var tf_pri_dot1q = Output.Create(Equinix.GetECXPort.InvokeAsync(new Equinix.GetECXPortArgs
        ///         {
        ///             Name = "sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157",
        ///         }));
        ///         this.Id = tf_pri_dot1q.Apply(tf_pri_dot1q =&gt; tf_pri_dot1q.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetECXPortResult> InvokeAsync(GetECXPortArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetECXPortResult>("equinix:index/getECXPort:GetECXPort", args ?? new GetECXPortArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get details of Equinix Fabric port with a given name.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var tf_pri_dot1q = Output.Create(Equinix.GetECXPort.InvokeAsync(new Equinix.GetECXPortArgs
        ///         {
        ///             Name = "sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157",
        ///         }));
        ///         this.Id = tf_pri_dot1q.Apply(tf_pri_dot1q =&gt; tf_pri_dot1q.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetECXPortResult> Invoke(GetECXPortInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetECXPortResult>("equinix:index/getECXPort:GetECXPort", args ?? new GetECXPortInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetECXPortArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the port.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetECXPortArgs()
        {
        }
    }

    public sealed class GetECXPortInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the port.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetECXPortInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetECXPortResult
    {
        /// <summary>
        /// Port Bandwidth in bytes.
        /// </summary>
        public readonly string Bandwidth;
        /// <summary>
        /// Boolean value that indicates whether the port supports unlimited connections. If
        /// `false`, the port is a standard port with limited connections. If `true`, the port is an
        /// `unlimited connections` port that allows multiple connections at no additional charge.
        /// </summary>
        public readonly bool Buyout;
        /// <summary>
        /// The VLAN encapsulation of the port (Dot1q or QinQ).
        /// </summary>
        public readonly string Encapsulation;
        /// <summary>
        /// Port location Equinix Business Exchange (IBX).
        /// </summary>
        public readonly string Ibx;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Port location metro code.
        /// </summary>
        public readonly string MetroCode;
        public readonly string Name;
        /// <summary>
        /// The priority of the device (primary / secondary) where the port
        /// resides.
        /// </summary>
        public readonly string Priority;
        /// <summary>
        /// Port location region.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Port status that indicates whether a port has been assigned or is ready for
        /// connection.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Unique identifier of the port.
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetECXPortResult(
            string bandwidth,

            bool buyout,

            string encapsulation,

            string ibx,

            string id,

            string metroCode,

            string name,

            string priority,

            string region,

            string status,

            string uuid)
        {
            Bandwidth = bandwidth;
            Buyout = buyout;
            Encapsulation = encapsulation;
            Ibx = ibx;
            Id = id;
            MetroCode = metroCode;
            Name = name;
            Priority = priority;
            Region = region;
            Status = status;
            Uuid = uuid;
        }
    }
}
