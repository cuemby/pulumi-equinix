// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Cuemby.Equinix
{
    public static class GetNetworkDeviceType
    {
        /// <summary>
        /// Use this data source to get Equinix Network Edge device type details. For further details, check supported
        /// [Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ciscoRouter = Output.Create(Equinix.GetNetworkDeviceType.InvokeAsync(new Equinix.GetNetworkDeviceTypeArgs
        ///         {
        ///             Category = "Router",
        ///             MetroCodes = 
        ///             {
        ///                 "DC",
        ///                 "SV",
        ///             },
        ///             Vendor = "Cisco",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkDeviceTypeResult> InvokeAsync(GetNetworkDeviceTypeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkDeviceTypeResult>("equinix:index/getNetworkDeviceType:GetNetworkDeviceType", args ?? new GetNetworkDeviceTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get Equinix Network Edge device type details. For further details, check supported
        /// [Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ciscoRouter = Output.Create(Equinix.GetNetworkDeviceType.InvokeAsync(new Equinix.GetNetworkDeviceTypeArgs
        ///         {
        ///             Category = "Router",
        ///             MetroCodes = 
        ///             {
        ///                 "DC",
        ///                 "SV",
        ///             },
        ///             Vendor = "Cisco",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkDeviceTypeResult> Invoke(GetNetworkDeviceTypeInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkDeviceTypeResult>("equinix:index/getNetworkDeviceType:GetNetworkDeviceType", args ?? new GetNetworkDeviceTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkDeviceTypeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Device type category. One of: `Router`, `Firewall`, `SDWAN`.
        /// </summary>
        [Input("category")]
        public string? Category { get; set; }

        [Input("metroCodes")]
        private List<string>? _metroCodes;

        /// <summary>
        /// List of metro codes where device type has to be available
        /// </summary>
        public List<string> MetroCodes
        {
            get => _metroCodes ?? (_metroCodes = new List<string>());
            set => _metroCodes = value;
        }

        /// <summary>
        /// Device type name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.
        /// </summary>
        [Input("vendor")]
        public string? Vendor { get; set; }

        public GetNetworkDeviceTypeArgs()
        {
        }
    }

    public sealed class GetNetworkDeviceTypeInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Device type category. One of: `Router`, `Firewall`, `SDWAN`.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("metroCodes")]
        private InputList<string>? _metroCodes;

        /// <summary>
        /// List of metro codes where device type has to be available
        /// </summary>
        public InputList<string> MetroCodes
        {
            get => _metroCodes ?? (_metroCodes = new InputList<string>());
            set => _metroCodes = value;
        }

        /// <summary>
        /// Device type name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public GetNetworkDeviceTypeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkDeviceTypeResult
    {
        public readonly string Category;
        /// <summary>
        /// Device type short code, unique identifier of a network device type
        /// </summary>
        public readonly string Code;
        /// <summary>
        /// Device type textual description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> MetroCodes;
        public readonly string Name;
        public readonly string Vendor;

        [OutputConstructor]
        private GetNetworkDeviceTypeResult(
            string category,

            string code,

            string description,

            string id,

            ImmutableArray<string> metroCodes,

            string name,

            string vendor)
        {
            Category = category;
            Code = code;
            Description = description;
            Id = id;
            MetroCodes = metroCodes;
            Name = name;
            Vendor = vendor;
        }
    }
}
