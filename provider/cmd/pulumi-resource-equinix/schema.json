{
    "name": "equinix",
    "displayName": "Equinix",
    "description": "A Pulumi package for creating and managing equinix cloud resources.",
    "keywords": [
        "pulumi",
        "equinix",
        "category/cloud"
    ],
    "homepage": "https://www.cuemby.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`equinix` Terraform Provider](https://github.com/equinix/terraform-provider-equinix).",
    "repository": "https://github.com/cuemby/pulumi-equinix",
    "logoUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Equinix_logo.svg/1200px-Equinix_logo.svg.png",
    "publisher": "Cuemby",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer"
            },
            "maxRetryWaitSeconds": {
                "type": "integer"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        }
    },
    "types": {
        "equinix:index/ECXL2ConnectionAction:ECXL2ConnectionAction": {
            "properties": {
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionActionRequiredData:ECXL2ConnectionActionRequiredData"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "message",
                        "operationId",
                        "requiredDatas",
                        "type"
                    ]
                }
            }
        },
        "equinix:index/ECXL2ConnectionActionRequiredData:ECXL2ConnectionActionRequiredData": {
            "properties": {
                "editable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationPattern": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "additional information value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "editable",
                        "key",
                        "label",
                        "validationPattern",
                        "value"
                    ]
                }
            }
        },
        "equinix:index/ECXL2ConnectionAdditionalInfo:ECXL2ConnectionAdditionalInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "additional information key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "additional information value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "equinix:index/ECXL2ConnectionSecondaryConnection:ECXL2ConnectionSecondaryConnection": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionSecondaryConnectionAction:ECXL2ConnectionSecondaryConnectionAction"
                    },
                    "description": "One or more pending actions to complete connection provisioning.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorizationKey": {
                    "type": "string",
                    "description": "Unique identifier authorizing Equinix to provision a connection\ntowards a cloud service provider. If not specified primary `authorization_key` will be used. However,\nsome service providers may require different keys for each connection. More information on\n[Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Applicable with `device_uuid`, identifier of network interface\non a given device. If not specified then first available interface will be selected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "deviceUuid": {
                    "type": "string",
                    "description": "Applicable with primary `device_uuid`. Identifier of the Network Edge\nvirtual device from which the secondary connection would originate. If not specified primary\n`device_uuid` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "secondary connection name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portUuid": {
                    "type": "string",
                    "description": "Applicable with primary `port_uuid`. Identifier of the Equinix Fabric Port from\nwhich the secondary connection would originate. If not specified primary `port_uuid` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "profileUuid": {
                    "type": "string",
                    "description": "Unique identifier of the service provider's profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "providerStatus": {
                    "type": "string",
                    "description": "Connection provisioning status on service provider's side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyGroup": {
                    "type": "string",
                    "description": "Unique identifier of group containing a primary and secondary connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Connection redundancy type, applicable for HA connections. Valid values are\n`PRIMARY`, `SECONDARY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundantUuid": {
                    "type": "string",
                    "description": "Unique identifier of the redundant connection, applicable for HA connections.\n",
                    "deprecationMessage": "SecondaryConnection.0.RedundantUUID will not be returned. Use UUID instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerMetroCode": {
                    "type": "string",
                    "description": "The metro code that denotes the secondary connection’s\ndestination (Z side). .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "The region in which the seller port resides. If not specified\nprimary `seller_region` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "serviceToken": {
                    "type": "string",
                    "description": "Required with primary `service_token`. Unique Equinix Fabric key\ngiven by a provider that grants you authorization to enable connectivity from an Equinix Fabric Port or\nvirtual device. Each connection (primary and secondary) requires a separate token.\nMore details in [Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "speed": {
                    "type": "integer",
                    "description": "Speed/Bandwidth to be allocated to the secondary connection. If not\nspecified primary `speed` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "speedUnit": {
                    "type": "string",
                    "description": "Unit of the speed/bandwidth to be allocated to the secondary\nconnection. If not specified primary `speed_unit` will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "Connection provisioning status on Equinix Fabric side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier of the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorToken": {
                    "type": "string",
                    "description": "The Equinix Fabric Token the connection was created with. Applicable if the\nconnection was created with a `service_token` (a-side) or `zside_service_token` (z-side).\n* `secondary_connection`:\n* `zside_port_uuid`\n* `zside_vlan_stag`\n* `zside_vlan_ctag`\n* `redundancy_type`\n* `redundancy_group`\n* `vendor_token`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanCtag": {
                    "type": "integer",
                    "description": "Applicable with `port_uuid`. C-Tag/Inner-Tag of the secondary\nconnection, a numeric character ranging from 2 - 4094.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vlanStag": {
                    "type": "integer",
                    "description": "S-Tag/Outer-Tag of the secondary connection, a\nnumeric character ranging from 2 - 4094.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "zsidePortUuid": {
                    "type": "string",
                    "description": "Unique identifier of the port on the remote/destination side\n(z-side). Allows you to connect between your own ports or virtual devices across your company's\nEquinix Fabric deployment, with no need for a private service profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zsideVlanCtag": {
                    "type": "integer",
                    "description": "C-Tag/Inner-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n`secondary_connection` is defined it will internally use same `zside_vlan_ctag` for the secondary\nconnection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zsideVlanStag": {
                    "type": "integer",
                    "description": "S-Tag/Outer-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actions",
                        "authorizationKey",
                        "deviceInterfaceId",
                        "name",
                        "portUuid",
                        "profileUuid",
                        "providerStatus",
                        "redundancyGroup",
                        "redundancyType",
                        "redundantUuid",
                        "sellerMetroCode",
                        "sellerRegion",
                        "speed",
                        "speedUnit",
                        "status",
                        "uuid",
                        "vendorToken",
                        "vlanStag",
                        "zsidePortUuid",
                        "zsideVlanCtag",
                        "zsideVlanStag"
                    ]
                }
            }
        },
        "equinix:index/ECXL2ConnectionSecondaryConnectionAction:ECXL2ConnectionSecondaryConnectionAction": {
            "properties": {
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionSecondaryConnectionActionRequiredData:ECXL2ConnectionSecondaryConnectionActionRequiredData"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "message",
                        "operationId",
                        "requiredDatas",
                        "type"
                    ]
                }
            }
        },
        "equinix:index/ECXL2ConnectionSecondaryConnectionActionRequiredData:ECXL2ConnectionSecondaryConnectionActionRequiredData": {
            "properties": {
                "editable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationPattern": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "additional information value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "editable",
                        "key",
                        "label",
                        "validationPattern",
                        "value"
                    ]
                }
            }
        },
        "equinix:index/ECXL2ServiceprofileFeatures:ECXL2ServiceprofileFeatures": {
            "properties": {
                "allowRemoteConnections": {
                    "type": "boolean",
                    "description": "Indicates whether or not connections to this profile\ncan be created from remote metro locations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testProfile": {
                    "type": "boolean",
                    "description": "Indicates whether or not this profile can be used for test\nconnections.\n",
                    "deprecationMessage": "TestProfile is no longer required and will be removed in a future release",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowRemoteConnections"
            ]
        },
        "equinix:index/ECXL2ServiceprofilePort:ECXL2ServiceprofilePort": {
            "properties": {
                "metroCode": {
                    "type": "string",
                    "description": "The metro code of location where the port resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier of the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metroCode",
                "uuid"
            ]
        },
        "equinix:index/ECXL2ServiceprofileSpeedBand:ECXL2ServiceprofileSpeedBand": {
            "properties": {
                "speed": {
                    "type": "integer",
                    "description": "Speed/bandwidth supported by this service profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedUnit": {
                    "type": "string",
                    "description": "Unit of the speed/bandwidth supported by this service profile. One of\n`MB`, `GB`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "speed",
                "speedUnit"
            ]
        },
        "equinix:index/GetECXL2SellerprofileAdditionalInfo:GetECXL2SellerprofileAdditionalInfo": {
            "properties": {
                "capturedInEmail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataType": {
                    "type": "string",
                    "description": "Data type of additional information attribute. One of `BOOLEAN`, `INTEGER` or\n`STRING`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Textual description of additional information attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "description": "Specifies if additional information is mandatory to create\nconnection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the seller profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capturedInEmail",
                "dataType",
                "description",
                "mandatory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetECXL2SellerprofileMetro:GetECXL2SellerprofileMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Location metro code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibxes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IBXes supported within given metro.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the seller profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of regions supported within given.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "ibxes",
                "name",
                "regions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetECXL2SellerprofileSpeedBand:GetECXL2SellerprofileSpeedBand": {
            "properties": {
                "speed": {
                    "type": "integer",
                    "description": "Speed/bandwidth supported by given service profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedUnit": {
                    "type": "string",
                    "description": "Unit of the speed/bandwidth supported by given service profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "speed",
                "speedUnit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetECXL2SellerprofilesProfile:GetECXL2SellerprofilesProfile": {
            "properties": {
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetECXL2SellerprofilesProfileAdditionalInfo:GetECXL2SellerprofilesProfileAdditionalInfo"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetECXL2SellerprofilesProfileMetro:GetECXL2SellerprofilesProfileMetro"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationGlobalName": {
                    "type": "string",
                    "description": "Name of seller's global organization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "description": "Name of seller's organization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedBands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetECXL2SellerprofilesProfileSpeedBand:GetECXL2SellerprofilesProfileSpeedBand"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedCustomizationAllowed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedFromApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalInfos",
                "description",
                "encapsulation",
                "metros",
                "name",
                "organizationGlobalName",
                "organizationName",
                "redundancyRequired",
                "speedBands",
                "speedCustomizationAllowed",
                "speedFromApi",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetECXL2SellerprofilesProfileAdditionalInfo:GetECXL2SellerprofilesProfileAdditionalInfo": {
            "properties": {
                "capturedInEmail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mandatory": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capturedInEmail",
                "dataType",
                "description",
                "mandatory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetECXL2SellerprofilesProfileMetro:GetECXL2SellerprofilesProfileMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibxes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "ibxes",
                "name",
                "regions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetECXL2SellerprofilesProfileSpeedBand:GetECXL2SellerprofilesProfileSpeedBand": {
            "properties": {
                "speed": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speedUnit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "speed",
                "speedUnit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalConnectionPort:GetMetalConnectionPort": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Port UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkStatus": {
                    "type": "string",
                    "description": "Port link status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Port name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Port role - primary or secondary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speed": {
                    "type": "integer",
                    "description": "Port speed in bits per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Port status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCircuitIds": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of IDs of virtual cicruits attached to this port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "linkStatus",
                "name",
                "role",
                "speed",
                "status",
                "virtualCircuitIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalConnectionServiceToken:GetMetalConnectionServiceToken": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date of the service token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Port UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAllowedSpeed": {
                    "type": "string",
                    "description": "Maximum allowed speed for the service token, string like in the `speed` attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Port role - primary or secondary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Token type, `a_side` or `z_side`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expiresAt",
                "id",
                "maxAllowedSpeed",
                "role",
                "state",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalDeviceBGPNeighborsBgpNeighbor:GetMetalDeviceBGPNeighborsBgpNeighbor": {
            "properties": {
                "addressFamily": {
                    "type": "integer",
                    "description": "IP address version, 4 or 6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerAs": {
                    "type": "integer",
                    "description": "Local autonomous system number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerIp": {
                    "type": "string",
                    "description": "Local used peer IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5Enabled": {
                    "type": "boolean",
                    "description": "Whether BGP session is password enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5Password": {
                    "type": "string",
                    "description": "BGP session password in plaintext (not a checksum).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multihop": {
                    "type": "boolean",
                    "description": "Whether the neighbor is in EBGP multihop session.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerAs": {
                    "type": "integer",
                    "description": "Peer AS number (different than customer_as for EBGP).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses of this neighbor's peers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routesIns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn:GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn"
                    },
                    "description": "Array of incoming routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routesOuts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut:GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut"
                    },
                    "description": "Array of outgoing routes in the same format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressFamily",
                "customerAs",
                "customerIp",
                "md5Enabled",
                "md5Password",
                "multihop",
                "peerAs",
                "routesIns",
                "routesOuts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn:GetMetalDeviceBGPNeighborsBgpNeighborRoutesIn": {
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "(bool) Whether the route is exact.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "type": "string",
                    "description": "CIDR expression of route (IP/mask).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut:GetMetalDeviceBGPNeighborsBgpNeighborRoutesOut": {
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "(bool) Whether the route is exact.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "type": "string",
                    "description": "CIDR expression of route (IP/mask).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalDeviceNetwork:GetMetalDeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "integer",
                    "description": "Bit length of the network mask of the address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "family": {
                    "type": "integer",
                    "description": "IP version. One of `4`, `6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "cidr",
                "family",
                "gateway",
                "public"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalDevicePort:GetMetalDevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. `eth0`, or `bond0`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the port (e.g. `NetworkPort` or `NetworkBondPort`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bonded",
                "id",
                "mac",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalFacilityCapacity:GetMetalFacilityCapacity": {
            "properties": {
                "plan": {
                    "type": "string",
                    "description": "Device plan that must be available in selected location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quantity": {
                    "type": "integer",
                    "description": "Minimun number of devices that must be available in selected location.\nDefault is `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "plan"
            ]
        },
        "equinix:index/GetMetalMetroCapacity:GetMetalMetroCapacity": {
            "properties": {
                "plan": {
                    "type": "string",
                    "description": "Device plan that must be available in selected location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quantity": {
                    "type": "integer",
                    "description": "Minimun number of devices that must be available in selected location.\nDefault is `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "plan"
            ]
        },
        "equinix:index/GetMetalOrganizationAddress:GetMetalOrganizationAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Postal address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "type": "string",
                    "description": "City name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": "Two letter country code (ISO 3166-1 alpha-2), e.g. US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zipCode": {
                    "type": "string",
                    "description": "Zip Code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "state",
                "zipCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalPlansFilter:GetMetalPlansFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "description": "The type of comparison to apply. One of: `in` , `re`, `substring`, `less_than`, `less_than_or_equal`, `greater_than`, `greater_than_or_equal`. Default is `in`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "values"
            ]
        },
        "equinix:index/GetMetalPlansPlan:GetMetalPlansPlan": {
            "properties": {
                "availableInMetros": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availableIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "class": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "id of the plan\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "legacy": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "line": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the plan\n- `slug`- plan slug\n- `description`- description of the plan\n- `line`- plan line, e.g. baremetal\n- `legacy`- flag showing if it's a legacy plan\n- `class`- plan class\n- `pricing_hour`- plan hourly price\n- `pricing_month`- plan monthly price\n- `deployment_types`- list of deployment types, e.g. on_demand, spot_market\n- `available_in`- list of facilities where the plan is available\n- `available_in_metros`- list of facilities where the plan is available\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pricingHour": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pricingMonth": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableIns",
                "availableInMetros",
                "class",
                "deploymentTypes",
                "description",
                "id",
                "legacy",
                "line",
                "name",
                "pricingHour",
                "pricingMonth",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetMetalPlansSort:GetMetalPlansSort": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "equinix:index/GetMetalProjectBgpConfig:GetMetalProjectBgpConfig": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Autonomous System Number for local BGP deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentType": {
                    "type": "string",
                    "description": "One of `private`, `public`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPrefix": {
                    "type": "integer",
                    "description": "The maximum number of route filters allowed per server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5": {
                    "type": "string",
                    "description": "Password for BGP session in plaintext (not a checksum).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Status of BGP configuration in the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "asn",
                "deploymentType",
                "maxPrefix",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceClusterDetail:GetNetworkDeviceClusterDetail": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node0s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetNetworkDeviceClusterDetailNode0:GetNetworkDeviceClusterDetailNode0"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node1s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetNetworkDeviceClusterDetailNode1:GetNetworkDeviceClusterDetailNode1"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numOfNodes": {
                    "type": "integer",
                    "description": "The number of nodes in the cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "clusterName",
                "node0s",
                "node1s",
                "numOfNodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceClusterDetailNode0:GetNetworkDeviceClusterDetailNode0": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetNetworkDeviceClusterDetailNode0VendorConfiguration:GetNetworkDeviceClusterDetailNode0VendorConfiguration"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "licenseFileId",
                "licenseToken",
                "name",
                "uuid",
                "vendorConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceClusterDetailNode0VendorConfiguration:GetNetworkDeviceClusterDetailNode0VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controller1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controllerFqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rootPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activationKey",
                "adminPassword",
                "controller1",
                "controllerFqdn",
                "hostname",
                "rootPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceClusterDetailNode1:GetNetworkDeviceClusterDetailNode1": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetNetworkDeviceClusterDetailNode1VendorConfiguration:GetNetworkDeviceClusterDetailNode1VendorConfiguration"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "licenseFileId",
                "licenseToken",
                "name",
                "uuid",
                "vendorConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceClusterDetailNode1VendorConfiguration:GetNetworkDeviceClusterDetailNode1VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controller1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controllerFqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rootPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activationKey",
                "adminPassword",
                "controller1",
                "controllerFqdn",
                "hostname",
                "rootPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceInterface:GetNetworkDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignedType",
                "id",
                "ipAddress",
                "macAddress",
                "name",
                "operationalStatus",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceSecondaryDevice:GetNetworkDeviceSecondaryDevice": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Unique identifier of applied ACL template\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "asn": {
                    "type": "integer",
                    "description": "Autonomous system number\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetNetworkDeviceSecondaryDeviceInterface:GetNetworkDeviceSecondaryDeviceInterface"
                    },
                    "description": "List of device interfaces\n* `interface.#.id` - interface identifier\n* `interface.#.name` - interface name\n* `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)\n* `interface.#.operational_status` - interface operational status (up or down)\n* `interface.#.mac_address` - interface MAC address\n* `interface.#.ip_address` - interface IP address\n* `interface.#.assigned_type` - interface management type (Equinix Managed or empty)\n* `interface.#.type` - interface type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status\n* APPLYING_LICENSE\n* REGISTERED\n* APPLIED\n* WAITING_FOR_CLUSTER_SETUP\n* REGISTRATION_FAILED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Device location region\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/GetNetworkDeviceSecondaryDeviceSshKey:GetNetworkDeviceSecondaryDeviceSshKey"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wanInterfaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "aclTemplateId",
                "additionalBandwidth",
                "asn",
                "hostname",
                "ibx",
                "interfaces",
                "licenseFile",
                "licenseFileId",
                "licenseStatus",
                "licenseToken",
                "metroCode",
                "mgmtAclTemplateUuid",
                "name",
                "notifications",
                "redundancyType",
                "redundantId",
                "region",
                "sshIpAddress",
                "sshIpFqdn",
                "sshKeys",
                "status",
                "uuid",
                "vendorConfiguration",
                "wanInterfaceId",
                "zoneCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceSecondaryDeviceInterface:GetNetworkDeviceSecondaryDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignedType",
                "id",
                "ipAddress",
                "macAddress",
                "name",
                "operationalStatus",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceSecondaryDeviceSshKey:GetNetworkDeviceSecondaryDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/GetNetworkDeviceSshKey:GetNetworkDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:index/MetalConnectionPort:MetalConnectionPort": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speed": {
                    "type": "integer",
                    "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Status of the connection resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCircuitIds": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "linkStatus",
                        "name",
                        "role",
                        "speed",
                        "status",
                        "virtualCircuitIds"
                    ]
                }
            }
        },
        "equinix:index/MetalConnectionServiceToken:MetalConnectionServiceToken": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAllowedSpeed": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiresAt",
                        "id",
                        "maxAllowedSpeed",
                        "role",
                        "state",
                        "type"
                    ]
                }
            }
        },
        "equinix:index/MetalDeviceIpAddress:MetalDeviceIpAddress": {
            "properties": {
                "cidr": {
                    "type": "integer",
                    "description": "CIDR suffix for IP address block to be assigned, i.e. amount of addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reservationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of UUIDs of IP block reservations\nfrom which the public IPv4 address should be taken.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of `private_ipv4`, `public_ipv4`, `public_ipv6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "equinix:index/MetalDeviceNetwork:MetalDeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "integer",
                    "description": "CIDR suffix for IP address block to be assigned, i.e. amount of addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "family": {
                    "type": "integer",
                    "description": "IP version. One of `4`, `6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "cidr",
                        "family",
                        "gateway",
                        "public"
                    ]
                }
            }
        },
        "equinix:index/MetalDevicePort:MetalDevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. `eth0`, or `bond0`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of `private_ipv4`, `public_ipv4`, `public_ipv6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bonded",
                        "id",
                        "mac",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "equinix:index/MetalDeviceReinstall:MetalDeviceReinstall": {
            "properties": {
                "deprovisionFast": {
                    "type": "boolean",
                    "description": "Whether the OS disk should be filled with `00h` bytes before reinstall.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provider should favour reinstall over destroy and create. Defaults to\n`false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preserveData": {
                    "type": "boolean",
                    "description": "Whether the non-OS disks should be kept or wiped during reinstall.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:index/MetalOrganizationAddress:MetalOrganizationAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Postal address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "type": "string",
                    "description": "City name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": "Two letter country code (ISO 3166-1 alpha-2), e.g. US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zipCode": {
                    "type": "string",
                    "description": "Zip Code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "zipCode"
            ]
        },
        "equinix:index/MetalProjectBgpConfig:MetalProjectBgpConfig": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Autonomous System Number for local BGP deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentType": {
                    "type": "string",
                    "description": "`private` or `public`, the `private` is likely to be usable immediately, the\n`public` will need to be reviewed by Equinix Metal engineers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPrefix": {
                    "type": "integer",
                    "description": "The maximum number of route filters allowed per server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5": {
                    "type": "string",
                    "description": "Password for BGP session in plaintext (not a checksum).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "status of BGP configuration in the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "asn",
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asn",
                        "deploymentType",
                        "maxPrefix",
                        "status"
                    ]
                }
            }
        },
        "equinix:index/MetalSpotMarketRequestInstanceParameters:MetalSpotMarketRequestInstanceParameters": {
            "properties": {
                "alwaysPxe": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingCycle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customdata": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locked": {
                    "type": "boolean",
                    "description": "Blocks deletion of the SpotMarketRequest device until the lock is disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operatingSystem": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "termintationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userdata": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingCycle",
                "hostname",
                "operatingSystem",
                "plan"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "billingCycle",
                        "hostname",
                        "operatingSystem",
                        "plan",
                        "termintationTime"
                    ]
                }
            }
        },
        "equinix:index/NetworkACLTemplateDeviceDetail:NetworkACLTemplateDeviceDetail": {
            "properties": {
                "aclStatus": {
                    "type": "string",
                    "description": "Device ACL provisioning status where template was applied. One of `PROVISIONING`,\n`PROVISIONED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device uuid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aclStatus",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:index/NetworkACLTemplateInboundRule:NetworkACLTemplateInboundRule": {
            "properties": {
                "dstPort": {
                    "type": "string",
                    "description": "Inbound traffic destination ports. Allowed values are a comma separated\nlist of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sequenceNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "deprecationMessage": "Source Type will not be returned",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "description": "Inbound traffic source ports. Allowed values are a comma separated list\nof ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "description": "Inbound traffic source IP subnet in CIDR format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inbound traffic source IP subnets in CIDR format.\n",
                    "deprecationMessage": "Use Subnet instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dstPort",
                "protocol",
                "srcPort"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dstPort",
                        "protocol",
                        "sequenceNumber",
                        "sourceType",
                        "srcPort"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceClusterDetails:NetworkDeviceClusterDetails": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node0": {
                    "$ref": "#/types/equinix:index/NetworkDeviceClusterDetailsNode0:NetworkDeviceClusterDetailsNode0",
                    "description": "An object that has `node0` configuration.\nSee Cluster Details - Nodes below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node1": {
                    "$ref": "#/types/equinix:index/NetworkDeviceClusterDetailsNode1:NetworkDeviceClusterDetailsNode1",
                    "description": "An object that has `node1` configuration.\nSee Cluster Details - Nodes below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numOfNodes": {
                    "type": "integer",
                    "description": "The number of nodes in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "node0",
                "node1"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "clusterName",
                        "node0",
                        "node1",
                        "numOfNodes"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceClusterDetailsNode0:NetworkDeviceClusterDetailsNode0": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "License file id. This is necessary for Fortinet and Juniper clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License token. This is necessary for Palo Alto clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "$ref": "#/types/equinix:index/NetworkDeviceClusterDetailsNode0VendorConfiguration:NetworkDeviceClusterDetailsNode0VendorConfiguration",
                    "description": "An object that has fields relevant to the vendor of the\ncluster device. See Cluster Details - Nodes - Vendor Configuration\nbelow for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceClusterDetailsNode0VendorConfiguration:NetworkDeviceClusterDetailsNode0VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in\nto the console. This field is not available for all device types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the\nVelocloud SDWAN cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceClusterDetailsNode1:NetworkDeviceClusterDetailsNode1": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "License file id. This is necessary for Fortinet and Juniper clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License token. This is necessary for Palo Alto clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "$ref": "#/types/equinix:index/NetworkDeviceClusterDetailsNode1VendorConfiguration:NetworkDeviceClusterDetailsNode1VendorConfiguration",
                    "description": "An object that has fields relevant to the vendor of the\ncluster device. See Cluster Details - Nodes - Vendor Configuration\nbelow for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceClusterDetailsNode1VendorConfiguration:NetworkDeviceClusterDetailsNode1VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in\nto the console. This field is not available for all device types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the\nVelocloud SDWAN cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceInterface:NetworkDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "interface management type (Equinix Managed or empty).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "interface identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "interface MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "interface operational status. One of `up`, `down`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "interface type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedType",
                        "id",
                        "ipAddress",
                        "macAddress",
                        "name",
                        "operationalStatus",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceLinkDevice:NetworkDeviceLinkDevice": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Device ASN number. Not required for self configured devices.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Device identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Device network interface identifier to use for device link\nconnection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address from device link subnet that was assigned to the device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ipAddress",
                        "status"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceLinkLink:NetworkDeviceLinkLink": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "billing account number to be used for\nconnection charges\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstMetroCode": {
                    "type": "string",
                    "description": "connection destination metro code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstZoneCode": {
                    "type": "string",
                    "description": "connection destination zone code is not required.\n",
                    "deprecationMessage": "DestinationZoneCode is not required",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcMetroCode": {
                    "type": "string",
                    "description": "connection source metro code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcZoneCode": {
                    "type": "string",
                    "description": "connection source zone code is not required.\n",
                    "deprecationMessage": "SourceZoneCode is not required",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "throughput": {
                    "type": "string",
                    "description": "connection throughput.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "connection throughput unit (Mbps or Gbps).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "dstMetroCode",
                "srcMetroCode",
                "throughput",
                "throughputUnit"
            ]
        },
        "equinix:index/NetworkDeviceSecondaryDevice:NetworkDeviceSecondaryDevice": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied\non a secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, for a secondary\ndevice.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "asn": {
                    "type": "integer",
                    "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Secondary device hostname.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkDeviceSecondaryDeviceInterface:NetworkDeviceSecondaryDeviceInterface"
                    },
                    "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\nsecondary device. Applicable for some devices types in BYOL licensing mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "License file id. This is necessary for Fortinet and Juniper clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token can be provided for some device types o the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "description": "Metro location of a secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n* `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary\ndevice.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Secondary device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive notifications about\nsecondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Device location region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "$ref": "#/types/equinix:index/NetworkDeviceSecondaryDeviceSshKey:NetworkDeviceSecondaryDeviceSshKey",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/Value pairs of vendor specific configuration parameters\nfor a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,\n`systemIpAddress`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "wanInterfaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "metroCode",
                "name",
                "notifications"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountNumber",
                        "additionalBandwidth",
                        "asn",
                        "ibx",
                        "interfaces",
                        "licenseFileId",
                        "licenseStatus",
                        "metroCode",
                        "name",
                        "notifications",
                        "redundancyType",
                        "redundantId",
                        "region",
                        "sshIpAddress",
                        "sshIpFqdn",
                        "status",
                        "uuid",
                        "vendorConfiguration",
                        "zoneCode"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceSecondaryDeviceInterface:NetworkDeviceSecondaryDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "interface management type (Equinix Managed or empty).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "interface identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "interface MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "interface operational status. One of `up`, `down`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "interface type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedType",
                        "id",
                        "ipAddress",
                        "macAddress",
                        "name",
                        "operationalStatus",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "equinix:index/NetworkDeviceSecondaryDeviceSshKey:NetworkDeviceSecondaryDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "username associated with given key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ]
        },
        "equinix:index/NetworkDeviceSshKey:NetworkDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "username associated with given key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the equinix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer"
            },
            "maxRetryWaitSeconds": {
                "type": "integer"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        },
        "inputProperties": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer"
            },
            "maxRetryWaitSeconds": {
                "type": "integer"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        }
    },
    "resources": {
        "equinix:index/eCXL2Connection:ECXL2Connection": {
            "description": "Resource `equinix.ECXL2Connection` allows creation and management of Equinix Fabric\nlayer 2 connections.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Non-redundant Connection from own Equinix Fabric Port\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst aws = equinix.GetECXL2Sellerprofile({\n    name: \"AWS Direct Connect\",\n});\nconst sv-qinq-pri = equinix.GetECXPort({\n    name: \"CX-SV5-NL-Dot1q-BO-10G-PRI\",\n});\nconst port_2_aws = new equinix.ECXL2Connection(\"port-2-aws\", {\n    profileUuid: aws.then(aws =\u003e aws.id),\n    speed: 200,\n    speedUnit: \"MB\",\n    notifications: [\n        \"marry@equinix.com\",\n        \"john@equinix.com\",\n    ],\n    portUuid: sv_qinq_pri.then(sv_qinq_pri =\u003e sv_qinq_pri.id),\n    vlanStag: 777,\n    vlanCtag: 1000,\n    sellerRegion: \"us-west-1\",\n    sellerMetroCode: \"SV\",\n    authorizationKey: \"345742915919\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\naws = equinix.get_ecxl2_sellerprofile(name=\"AWS Direct Connect\")\nsv_qinq_pri = equinix.get_ecx_port(name=\"CX-SV5-NL-Dot1q-BO-10G-PRI\")\nport_2_aws = equinix.ECXL2Connection(\"port-2-aws\",\n    profile_uuid=aws.id,\n    speed=200,\n    speed_unit=\"MB\",\n    notifications=[\n        \"marry@equinix.com\",\n        \"john@equinix.com\",\n    ],\n    port_uuid=sv_qinq_pri.id,\n    vlan_stag=777,\n    vlan_ctag=1000,\n    seller_region=\"us-west-1\",\n    seller_metro_code=\"SV\",\n    authorization_key=\"345742915919\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var aws = Output.Create(Equinix.GetECXL2Sellerprofile.InvokeAsync(new Equinix.GetECXL2SellerprofileArgs\n        {\n            Name = \"AWS Direct Connect\",\n        }));\n        var sv_qinq_pri = Output.Create(Equinix.GetECXPort.InvokeAsync(new Equinix.GetECXPortArgs\n        {\n            Name = \"CX-SV5-NL-Dot1q-BO-10G-PRI\",\n        }));\n        var port_2_aws = new Equinix.ECXL2Connection(\"port-2-aws\", new Equinix.ECXL2ConnectionArgs\n        {\n            ProfileUuid = aws.Apply(aws =\u003e aws.Id),\n            Speed = 200,\n            SpeedUnit = \"MB\",\n            Notifications = \n            {\n                \"marry@equinix.com\",\n                \"john@equinix.com\",\n            },\n            PortUuid = sv_qinq_pri.Apply(sv_qinq_pri =\u003e sv_qinq_pri.Id),\n            VlanStag = 777,\n            VlanCtag = 1000,\n            SellerRegion = \"us-west-1\",\n            SellerMetroCode = \"SV\",\n            AuthorizationKey = \"345742915919\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taws, err := equinix.GetECXL2Sellerprofile(ctx, \u0026GetECXL2SellerprofileArgs{\n\t\t\tName: pulumi.StringRef(\"AWS Direct Connect\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsv_qinq_pri, err := equinix.GetECXPort(ctx, \u0026GetECXPortArgs{\n\t\t\tName: \"CX-SV5-NL-Dot1q-BO-10G-PRI\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewECXL2Connection(ctx, \"port-2-aws\", \u0026equinix.ECXL2ConnectionArgs{\n\t\t\tProfileUuid: pulumi.String(aws.Id),\n\t\t\tSpeed:       pulumi.Int(200),\n\t\t\tSpeedUnit:   pulumi.String(\"MB\"),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"marry@equinix.com\"),\n\t\t\t\tpulumi.String(\"john@equinix.com\"),\n\t\t\t},\n\t\t\tPortUuid:         pulumi.String(sv_qinq_pri.Id),\n\t\t\tVlanStag:         pulumi.Int(777),\n\t\t\tVlanCtag:         pulumi.Int(1000),\n\t\t\tSellerRegion:     pulumi.String(\"us-west-1\"),\n\t\t\tSellerMetroCode:  pulumi.String(\"SV\"),\n\t\t\tAuthorizationKey: pulumi.String(\"345742915919\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var aws = EquinixFunctions.GetECXL2Sellerprofile();\n\n        final var sv-qinq-pri = EquinixFunctions.GetECXPort();\n\n        var port_2_aws = new ECXL2Connection(\"port-2-aws\", ECXL2ConnectionArgs.builder()        \n            .profileUuid(aws.id())\n            .speed(200)\n            .speedUnit(\"MB\")\n            .notifications(            \n                \"marry@equinix.com\",\n                \"john@equinix.com\")\n            .portUuid(sv_qinq_pri.id())\n            .vlanStag(777)\n            .vlanCtag(1000)\n            .sellerRegion(\"us-west-1\")\n            .sellerMetroCode(\"SV\")\n            .authorizationKey(\"345742915919\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  port-2-aws:\n    type: equinix:ECXL2Connection\n    properties:\n      profileUuid: ${aws.id}\n      speed: 200\n      speedUnit: MB\n      notifications:\n        - marry@equinix.com\n        - john@equinix.com\n      portUuid: ${[\"sv-qinq-pri\"].id}\n      vlanStag: 777\n      vlanCtag: 1000\n      sellerRegion: us-west-1\n      sellerMetroCode: SV\n      authorizationKey: 345742915919\nvariables:\n  aws:\n    Fn::Invoke:\n      Function: equinix:GetECXL2Sellerprofile\n      Arguments:\n        name: AWS Direct Connect\n  sv-qinq-pri:\n    Fn::Invoke:\n      Function: equinix:GetECXPort\n      Arguments:\n        name: CX-SV5-NL-Dot1q-BO-10G-PRI\n```\n{{% /example %}}\n{{% example %}}\n### Non-redundant Connection from Network Edge device\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst gcp-1 = equinix.GetECXL2Sellerprofile({\n    name: \"Google Cloud Partner Interconnect Zone 1\",\n});\nconst router_to_gcp = new equinix.ECXL2Connection(\"router-to-gcp\", {\n    profileUuid: gcp_1.then(gcp_1 =\u003e gcp_1.id),\n    deviceUuid: equinix_network_device.myrouter.id,\n    deviceInterfaceId: 5,\n    speed: 100,\n    speedUnit: \"MB\",\n    notifications: [\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n    ],\n    sellerMetroCode: \"SV\",\n    sellerRegion: \"us-west1\",\n    authorizationKey: \"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ngcp_1 = equinix.get_ecxl2_sellerprofile(name=\"Google Cloud Partner Interconnect Zone 1\")\nrouter_to_gcp = equinix.ECXL2Connection(\"router-to-gcp\",\n    profile_uuid=gcp_1.id,\n    device_uuid=equinix_network_device[\"myrouter\"][\"id\"],\n    device_interface_id=5,\n    speed=100,\n    speed_unit=\"MB\",\n    notifications=[\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n    ],\n    seller_metro_code=\"SV\",\n    seller_region=\"us-west1\",\n    authorization_key=\"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gcp_1 = Output.Create(Equinix.GetECXL2Sellerprofile.InvokeAsync(new Equinix.GetECXL2SellerprofileArgs\n        {\n            Name = \"Google Cloud Partner Interconnect Zone 1\",\n        }));\n        var router_to_gcp = new Equinix.ECXL2Connection(\"router-to-gcp\", new Equinix.ECXL2ConnectionArgs\n        {\n            ProfileUuid = gcp_1.Apply(gcp_1 =\u003e gcp_1.Id),\n            DeviceUuid = equinix_network_device.Myrouter.Id,\n            DeviceInterfaceId = 5,\n            Speed = 100,\n            SpeedUnit = \"MB\",\n            Notifications = \n            {\n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n            },\n            SellerMetroCode = \"SV\",\n            SellerRegion = \"us-west1\",\n            AuthorizationKey = \"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgcp_1, err := equinix.GetECXL2Sellerprofile(ctx, \u0026GetECXL2SellerprofileArgs{\n\t\t\tName: pulumi.StringRef(\"Google Cloud Partner Interconnect Zone 1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewECXL2Connection(ctx, \"router-to-gcp\", \u0026equinix.ECXL2ConnectionArgs{\n\t\t\tProfileUuid:       pulumi.String(gcp_1.Id),\n\t\t\tDeviceUuid:        pulumi.Any(equinix_network_device.Myrouter.Id),\n\t\t\tDeviceInterfaceId: pulumi.Int(5),\n\t\t\tSpeed:             pulumi.Int(100),\n\t\t\tSpeedUnit:         pulumi.String(\"MB\"),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"john@equinix.com\"),\n\t\t\t\tpulumi.String(\"marry@equinix.com\"),\n\t\t\t},\n\t\t\tSellerMetroCode:  pulumi.String(\"SV\"),\n\t\t\tSellerRegion:     pulumi.String(\"us-west1\"),\n\t\t\tAuthorizationKey: pulumi.String(\"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gcp-1 = EquinixFunctions.GetECXL2Sellerprofile();\n\n        var router_to_gcp = new ECXL2Connection(\"router-to-gcp\", ECXL2ConnectionArgs.builder()        \n            .profileUuid(gcp_1.id())\n            .deviceUuid(equinix_network_device.myrouter().id())\n            .deviceInterfaceId(5)\n            .speed(100)\n            .speedUnit(\"MB\")\n            .notifications(            \n                \"john@equinix.com\",\n                \"marry@equinix.com\")\n            .sellerMetroCode(\"SV\")\n            .sellerRegion(\"us-west1\")\n            .authorizationKey(\"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  router-to-gcp:\n    type: equinix:ECXL2Connection\n    properties:\n      profileUuid: ${[\"gcp-1\"].id}\n      deviceUuid: ${equinix_network_device.myrouter.id}\n      deviceInterfaceId: 5\n      speed: 100\n      speedUnit: MB\n      notifications:\n        - john@equinix.com\n        - marry@equinix.com\n      sellerMetroCode: SV\n      sellerRegion: us-west1\n      authorizationKey: 4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\nvariables:\n  gcp-1:\n    Fn::Invoke:\n      Function: equinix:GetECXL2Sellerprofile\n      Arguments:\n        name: Google Cloud Partner Interconnect Zone 1\n```\n{{% /example %}}\n{{% example %}}\n### Non-redundant Connection from an Equinix customer port using A-Side Service token\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst gcp = equinix.GetECXL2Sellerprofile({\n    name: \"Google Cloud Partner Interconnect Zone 1\",\n});\nconst token_to_gcp = new equinix.ECXL2Connection(\"token-to-gcp\", {\n    profileUuid: data.equinix_ecx_l2_sellerprofile[\"gcp-1\"].id,\n    serviceToken: \"e9c22453-d3a7-4d5d-9112-d50173531392\",\n    speed: 100,\n    speedUnit: \"MB\",\n    notifications: [\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n    ],\n    sellerMetroCode: \"SV\",\n    sellerRegion: \"us-west1\",\n    authorizationKey: \"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ngcp = equinix.get_ecxl2_sellerprofile(name=\"Google Cloud Partner Interconnect Zone 1\")\ntoken_to_gcp = equinix.ECXL2Connection(\"token-to-gcp\",\n    profile_uuid=data[\"equinix_ecx_l2_sellerprofile\"][\"gcp-1\"][\"id\"],\n    service_token=\"e9c22453-d3a7-4d5d-9112-d50173531392\",\n    speed=100,\n    speed_unit=\"MB\",\n    notifications=[\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n    ],\n    seller_metro_code=\"SV\",\n    seller_region=\"us-west1\",\n    authorization_key=\"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gcp = Output.Create(Equinix.GetECXL2Sellerprofile.InvokeAsync(new Equinix.GetECXL2SellerprofileArgs\n        {\n            Name = \"Google Cloud Partner Interconnect Zone 1\",\n        }));\n        var token_to_gcp = new Equinix.ECXL2Connection(\"token-to-gcp\", new Equinix.ECXL2ConnectionArgs\n        {\n            ProfileUuid = data.Equinix_ecx_l2_sellerprofile.Gcp_1.Id,\n            ServiceToken = \"e9c22453-d3a7-4d5d-9112-d50173531392\",\n            Speed = 100,\n            SpeedUnit = \"MB\",\n            Notifications = \n            {\n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n            },\n            SellerMetroCode = \"SV\",\n            SellerRegion = \"us-west1\",\n            AuthorizationKey = \"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\",\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gcp = EquinixFunctions.GetECXL2Sellerprofile();\n\n        var token_to_gcp = new ECXL2Connection(\"token-to-gcp\", ECXL2ConnectionArgs.builder()        \n            .profileUuid(data.equinix_ecx_l2_sellerprofile().gcp-1().id())\n            .serviceToken(\"e9c22453-d3a7-4d5d-9112-d50173531392\")\n            .speed(100)\n            .speedUnit(\"MB\")\n            .notifications(            \n                \"john@equinix.com\",\n                \"marry@equinix.com\")\n            .sellerMetroCode(\"SV\")\n            .sellerRegion(\"us-west1\")\n            .authorizationKey(\"4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  token-to-gcp:\n    type: equinix:ECXL2Connection\n    properties:\n      profileUuid: ${data.equinix_ecx_l2_sellerprofile\"gcp-1\"[%!s(MISSING)].id}\n      serviceToken: e9c22453-d3a7-4d5d-9112-d50173531392\n      speed: 100\n      speedUnit: MB\n      notifications:\n        - john@equinix.com\n        - marry@equinix.com\n      sellerMetroCode: SV\n      sellerRegion: us-west1\n      authorizationKey: 4d335adc-00fd-4a41-c9f3-782ca31ab3f7/us-west1/1\nvariables:\n  gcp:\n    Fn::Invoke:\n      Function: equinix:GetECXL2Sellerprofile\n      Arguments:\n        name: Google Cloud Partner Interconnect Zone 1\n```\n{{% /example %}}\n{{% example %}}\n### Non-redundant Connection from own Equinix Fabric Port to an Equinix customer port using Z-Side Service token\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst sv-qinq-pri = equinix.GetECXPort({\n    name: \"CX-SV5-NL-Dot1q-BO-10G-PRI\",\n});\nconst port_to_token = new equinix.ECXL2Connection(\"port-to-token\", {\n    zsideServiceToken: \"e9c22453-d3a7-4d5d-9112-d50173531392\",\n    speed: 200,\n    speedUnit: \"MB\",\n    notifications: [\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n    ],\n    sellerMetroCode: \"FR\",\n    portUuid: sv_qinq_pri.then(sv_qinq_pri =\u003e sv_qinq_pri.id),\n    vlanStag: 1000,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nsv_qinq_pri = equinix.get_ecx_port(name=\"CX-SV5-NL-Dot1q-BO-10G-PRI\")\nport_to_token = equinix.ECXL2Connection(\"port-to-token\",\n    zside_service_token=\"e9c22453-d3a7-4d5d-9112-d50173531392\",\n    speed=200,\n    speed_unit=\"MB\",\n    notifications=[\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n    ],\n    seller_metro_code=\"FR\",\n    port_uuid=sv_qinq_pri.id,\n    vlan_stag=1000)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sv_qinq_pri = Output.Create(Equinix.GetECXPort.InvokeAsync(new Equinix.GetECXPortArgs\n        {\n            Name = \"CX-SV5-NL-Dot1q-BO-10G-PRI\",\n        }));\n        var port_to_token = new Equinix.ECXL2Connection(\"port-to-token\", new Equinix.ECXL2ConnectionArgs\n        {\n            ZsideServiceToken = \"e9c22453-d3a7-4d5d-9112-d50173531392\",\n            Speed = 200,\n            SpeedUnit = \"MB\",\n            Notifications = \n            {\n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n            },\n            SellerMetroCode = \"FR\",\n            PortUuid = sv_qinq_pri.Apply(sv_qinq_pri =\u003e sv_qinq_pri.Id),\n            VlanStag = 1000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsv_qinq_pri, err := equinix.GetECXPort(ctx, \u0026GetECXPortArgs{\n\t\t\tName: \"CX-SV5-NL-Dot1q-BO-10G-PRI\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewECXL2Connection(ctx, \"port-to-token\", \u0026equinix.ECXL2ConnectionArgs{\n\t\t\tZsideServiceToken: pulumi.String(\"e9c22453-d3a7-4d5d-9112-d50173531392\"),\n\t\t\tSpeed:             pulumi.Int(200),\n\t\t\tSpeedUnit:         pulumi.String(\"MB\"),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"john@equinix.com\"),\n\t\t\t\tpulumi.String(\"marry@equinix.com\"),\n\t\t\t},\n\t\t\tSellerMetroCode: pulumi.String(\"FR\"),\n\t\t\tPortUuid:        pulumi.String(sv_qinq_pri.Id),\n\t\t\tVlanStag:        pulumi.Int(1000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sv-qinq-pri = EquinixFunctions.GetECXPort();\n\n        var port_to_token = new ECXL2Connection(\"port-to-token\", ECXL2ConnectionArgs.builder()        \n            .zsideServiceToken(\"e9c22453-d3a7-4d5d-9112-d50173531392\")\n            .speed(200)\n            .speedUnit(\"MB\")\n            .notifications(            \n                \"john@equinix.com\",\n                \"marry@equinix.com\")\n            .sellerMetroCode(\"FR\")\n            .portUuid(sv_qinq_pri.id())\n            .vlanStag(1000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  port-to-token:\n    type: equinix:ECXL2Connection\n    properties:\n      zsideServiceToken: e9c22453-d3a7-4d5d-9112-d50173531392\n      speed: 200\n      speedUnit: MB\n      notifications:\n        - john@equinix.com\n        - marry@equinix.com\n      sellerMetroCode: FR\n      portUuid: ${[\"sv-qinq-pri\"].id}\n      vlanStag: 1000\nvariables:\n  sv-qinq-pri:\n    Fn::Invoke:\n      Function: equinix:GetECXPort\n      Arguments:\n        name: CX-SV5-NL-Dot1q-BO-10G-PRI\n```\n\n\u003e **NOTE:** See Equinix Fabric connecting to the cloud\nguide for more details on how to connect to a CSP.\n{{% /example %}}\n{{% /examples %}}\n## Update operation behavior\n\nUpdate of most arguments will force replacement of a connection (including related redundant\nconnection in HA setup).\n\nFollowing arguments can be updated. **NOTE** that Equinix Fabric may still forbid updates depending\non current connection state, used service provider or number of updates requested during the day.\n\n* `name`\n* `speed` and `speed_unit`\n\n\n## Import\n\ninto `vendor_token` but `service_token` and `zside_service_token` will remain empty. Equinix L2 connections can be imported using an existing `id`existing_connection_id='example-uuid-1'\n\n```sh\n $ pulumi import equinix:index/eCXL2Connection:ECXL2Connection example ${existing_connection_id}\n```\n\n (primary and secondary) into a single string separated by `:`. To import a redundant Equinix L2 connectionexisting_primary_connection_id='example-uuid-1' existing_secondary_connection_id='example-uuid-2'\n\n```sh\n $ pulumi import equinix:index/eCXL2Connection:ECXL2Connection example ${existing_primary_connection_id}:${existing_secondary_connection_id}\n```\n\n ",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionAction:ECXL2ConnectionAction"
                    },
                    "description": "One or more pending actions to complete connection provisioning.\n"
                },
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionAdditionalInfo:ECXL2ConnectionAdditionalInfo"
                    },
                    "description": "one or more additional information key-value objects\n"
                },
                "authorizationKey": {
                    "type": "string",
                    "description": "Unique identifier authorizing Equinix to provision a connection\ntowards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT\nencrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this\nkey such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,\nmore information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).\n"
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Applicable with `device_uuid`, identifier of network interface\non a given device, used for a connection. If not specified then first available interface will be\nselected.\n"
                },
                "deviceUuid": {
                    "type": "string",
                    "description": "Unique identifier of\nthe Network Edge virtual device from which the connection would originate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "additional information key\n"
                },
                "namedTag": {
                    "type": "string",
                    "description": "The type of peering to set up when connecting to Azure Express Route.\nValid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\\*, `PUBLIC`\\*.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses used for sending connection update\nnotifications.\n"
                },
                "portUuid": {
                    "type": "string",
                    "description": "Unique identifier of\nthe Equinix Fabric Port from which the connection would originate.\n"
                },
                "profileUuid": {
                    "type": "string",
                    "description": "Unique identifier of the service provider's profile.\n"
                },
                "providerStatus": {
                    "type": "string",
                    "description": "Connection provisioning status on service provider's side.\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Connection's purchase order number to reflect on the invoice\n"
                },
                "redundancyGroup": {
                    "type": "string",
                    "description": "Unique identifier of group containing a primary and secondary connection.\n"
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Connection redundancy type, applicable for HA connections. Valid values are\n`PRIMARY`, `SECONDARY`.\n"
                },
                "redundantUuid": {
                    "type": "string",
                    "description": "Unique identifier of the redundant connection, applicable for HA connections.\n"
                },
                "secondaryConnection": {
                    "$ref": "#/types/equinix:index/ECXL2ConnectionSecondaryConnection:ECXL2ConnectionSecondaryConnection",
                    "description": "Definition of secondary connection for redundant, HA\nconnectivity. See Secondary Connection below for more details.\n"
                },
                "sellerMetroCode": {
                    "type": "string",
                    "description": "The metro code that denotes the connection’s remote/destination\nside (z-side).\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "The region in which the seller port resides.\n"
                },
                "serviceToken": {
                    "type": "string",
                    "description": "- A-side\nservice tokens authorize you to create a connection from a customer port, which created the token\nfor you, to a service profile or your own port.\nMore details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).\n"
                },
                "speed": {
                    "type": "integer",
                    "description": "Speed/Bandwidth to be allocated to the connection.\n"
                },
                "speedUnit": {
                    "type": "string",
                    "description": "Unit of the speed/bandwidth to be allocated to the connection.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Connection provisioning status on Equinix Fabric side.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier of the connection.\n"
                },
                "vendorToken": {
                    "type": "string",
                    "description": "The Equinix Fabric Token the connection was created with. Applicable if the\nconnection was created with a `service_token` (a-side) or `zside_service_token` (z-side).\n* `secondary_connection`:\n* `zside_port_uuid`\n* `zside_vlan_stag`\n* `zside_vlan_ctag`\n* `redundancy_type`\n* `redundancy_group`\n* `vendor_token`\n"
                },
                "vlanCtag": {
                    "type": "integer",
                    "description": "C-Tag/Inner-Tag of the connection - a numeric character ranging from 2\n\\- 4094.\n"
                },
                "vlanStag": {
                    "type": "integer",
                    "description": "S-Tag/Outer-Tag of the connection - a numeric\ncharacter ranging from 2 - 4094.\n"
                },
                "zsidePortUuid": {
                    "type": "string",
                    "description": "Unique identifier of the port on the remote/destination side\n(z-side). Allows you to connect between your own ports or virtual devices across your company's\nEquinix Fabric deployment, with no need for a private service profile.\n"
                },
                "zsideServiceToken": {
                    "type": "string",
                    "description": "- Z-side\nservice tokens authorize you to create a connection from your port or virtual device to a customer\nport which created the token for you. `zside_service_token` cannot be used with `secondary_connection`.\nMore details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).\n"
                },
                "zsideVlanCtag": {
                    "type": "integer",
                    "description": "C-Tag/Inner-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n`secondary_connection` is defined it will internally use same `zside_vlan_ctag` for the secondary\nconnection.\n"
                },
                "zsideVlanStag": {
                    "type": "integer",
                    "description": "S-Tag/Outer-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n"
                }
            },
            "required": [
                "actions",
                "authorizationKey",
                "name",
                "notifications",
                "portUuid",
                "profileUuid",
                "providerStatus",
                "redundancyGroup",
                "redundancyType",
                "redundantUuid",
                "sellerMetroCode",
                "speed",
                "speedUnit",
                "status",
                "uuid",
                "vendorToken",
                "vlanStag",
                "zsidePortUuid",
                "zsideVlanCtag",
                "zsideVlanStag"
            ],
            "inputProperties": {
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionAdditionalInfo:ECXL2ConnectionAdditionalInfo"
                    },
                    "description": "one or more additional information key-value objects\n",
                    "willReplaceOnChanges": true
                },
                "authorizationKey": {
                    "type": "string",
                    "description": "Unique identifier authorizing Equinix to provision a connection\ntowards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT\nencrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this\nkey such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,\nmore information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).\n",
                    "willReplaceOnChanges": true
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Applicable with `device_uuid`, identifier of network interface\non a given device, used for a connection. If not specified then first available interface will be\nselected.\n",
                    "willReplaceOnChanges": true
                },
                "deviceUuid": {
                    "type": "string",
                    "description": "Unique identifier of\nthe Network Edge virtual device from which the connection would originate.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "additional information key\n"
                },
                "namedTag": {
                    "type": "string",
                    "description": "The type of peering to set up when connecting to Azure Express Route.\nValid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\\*, `PUBLIC`\\*.\n",
                    "willReplaceOnChanges": true
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses used for sending connection update\nnotifications.\n",
                    "willReplaceOnChanges": true
                },
                "portUuid": {
                    "type": "string",
                    "description": "Unique identifier of\nthe Equinix Fabric Port from which the connection would originate.\n",
                    "willReplaceOnChanges": true
                },
                "profileUuid": {
                    "type": "string",
                    "description": "Unique identifier of the service provider's profile.\n",
                    "willReplaceOnChanges": true
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Connection's purchase order number to reflect on the invoice\n",
                    "willReplaceOnChanges": true
                },
                "secondaryConnection": {
                    "$ref": "#/types/equinix:index/ECXL2ConnectionSecondaryConnection:ECXL2ConnectionSecondaryConnection",
                    "description": "Definition of secondary connection for redundant, HA\nconnectivity. See Secondary Connection below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "sellerMetroCode": {
                    "type": "string",
                    "description": "The metro code that denotes the connection’s remote/destination\nside (z-side).\n",
                    "willReplaceOnChanges": true
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "The region in which the seller port resides.\n",
                    "willReplaceOnChanges": true
                },
                "serviceToken": {
                    "type": "string",
                    "description": "- A-side\nservice tokens authorize you to create a connection from a customer port, which created the token\nfor you, to a service profile or your own port.\nMore details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).\n",
                    "willReplaceOnChanges": true
                },
                "speed": {
                    "type": "integer",
                    "description": "Speed/Bandwidth to be allocated to the connection.\n"
                },
                "speedUnit": {
                    "type": "string",
                    "description": "Unit of the speed/bandwidth to be allocated to the connection.\n"
                },
                "vlanCtag": {
                    "type": "integer",
                    "description": "C-Tag/Inner-Tag of the connection - a numeric character ranging from 2\n\\- 4094.\n",
                    "willReplaceOnChanges": true
                },
                "vlanStag": {
                    "type": "integer",
                    "description": "S-Tag/Outer-Tag of the connection - a numeric\ncharacter ranging from 2 - 4094.\n",
                    "willReplaceOnChanges": true
                },
                "zsidePortUuid": {
                    "type": "string",
                    "description": "Unique identifier of the port on the remote/destination side\n(z-side). Allows you to connect between your own ports or virtual devices across your company's\nEquinix Fabric deployment, with no need for a private service profile.\n",
                    "willReplaceOnChanges": true
                },
                "zsideServiceToken": {
                    "type": "string",
                    "description": "- Z-side\nservice tokens authorize you to create a connection from your port or virtual device to a customer\nport which created the token for you. `zside_service_token` cannot be used with `secondary_connection`.\nMore details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).\n",
                    "willReplaceOnChanges": true
                },
                "zsideVlanCtag": {
                    "type": "integer",
                    "description": "C-Tag/Inner-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n`secondary_connection` is defined it will internally use same `zside_vlan_ctag` for the secondary\nconnection.\n",
                    "willReplaceOnChanges": true
                },
                "zsideVlanStag": {
                    "type": "integer",
                    "description": "S-Tag/Outer-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "notifications",
                "speed",
                "speedUnit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ECXL2Connection resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/ECXL2ConnectionAction:ECXL2ConnectionAction"
                        },
                        "description": "One or more pending actions to complete connection provisioning.\n"
                    },
                    "additionalInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/ECXL2ConnectionAdditionalInfo:ECXL2ConnectionAdditionalInfo"
                        },
                        "description": "one or more additional information key-value objects\n",
                        "willReplaceOnChanges": true
                    },
                    "authorizationKey": {
                        "type": "string",
                        "description": "Unique identifier authorizing Equinix to provision a connection\ntowards a cloud service provider. At Equinix, an `Authorization Key` is a generic term and is NOT\nencrypted on Equinix Fabric. Cloud Service Providers might use a different name to refer to this\nkey such as `Service Key` or `Authentication Key`. Value depends on a provider service profile,\nmore information on [Equinix Fabric how to guide](https://developer.equinix.com/docs/ecx-how-to-guide).\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceInterfaceId": {
                        "type": "integer",
                        "description": "Applicable with `device_uuid`, identifier of network interface\non a given device, used for a connection. If not specified then first available interface will be\nselected.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceUuid": {
                        "type": "string",
                        "description": "Unique identifier of\nthe Network Edge virtual device from which the connection would originate.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "additional information key\n"
                    },
                    "namedTag": {
                        "type": "string",
                        "description": "The type of peering to set up when connecting to Azure Express Route.\nValid values: `PRIVATE`, `MICROSOFT`, `MANUAL`\\*, `PUBLIC`\\*.\n",
                        "willReplaceOnChanges": true
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses used for sending connection update\nnotifications.\n",
                        "willReplaceOnChanges": true
                    },
                    "portUuid": {
                        "type": "string",
                        "description": "Unique identifier of\nthe Equinix Fabric Port from which the connection would originate.\n",
                        "willReplaceOnChanges": true
                    },
                    "profileUuid": {
                        "type": "string",
                        "description": "Unique identifier of the service provider's profile.\n",
                        "willReplaceOnChanges": true
                    },
                    "providerStatus": {
                        "type": "string",
                        "description": "Connection provisioning status on service provider's side.\n"
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "Connection's purchase order number to reflect on the invoice\n",
                        "willReplaceOnChanges": true
                    },
                    "redundancyGroup": {
                        "type": "string",
                        "description": "Unique identifier of group containing a primary and secondary connection.\n"
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Connection redundancy type, applicable for HA connections. Valid values are\n`PRIMARY`, `SECONDARY`.\n"
                    },
                    "redundantUuid": {
                        "type": "string",
                        "description": "Unique identifier of the redundant connection, applicable for HA connections.\n"
                    },
                    "secondaryConnection": {
                        "$ref": "#/types/equinix:index/ECXL2ConnectionSecondaryConnection:ECXL2ConnectionSecondaryConnection",
                        "description": "Definition of secondary connection for redundant, HA\nconnectivity. See Secondary Connection below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "sellerMetroCode": {
                        "type": "string",
                        "description": "The metro code that denotes the connection’s remote/destination\nside (z-side).\n",
                        "willReplaceOnChanges": true
                    },
                    "sellerRegion": {
                        "type": "string",
                        "description": "The region in which the seller port resides.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceToken": {
                        "type": "string",
                        "description": "- A-side\nservice tokens authorize you to create a connection from a customer port, which created the token\nfor you, to a service profile or your own port.\nMore details in [A-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=the%20service%20token.-,A%2DSide%20Service%20Tokens,-If%20you%20want).\n",
                        "willReplaceOnChanges": true
                    },
                    "speed": {
                        "type": "integer",
                        "description": "Speed/Bandwidth to be allocated to the connection.\n"
                    },
                    "speedUnit": {
                        "type": "string",
                        "description": "Unit of the speed/bandwidth to be allocated to the connection.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Connection provisioning status on Equinix Fabric side.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the connection.\n"
                    },
                    "vendorToken": {
                        "type": "string",
                        "description": "The Equinix Fabric Token the connection was created with. Applicable if the\nconnection was created with a `service_token` (a-side) or `zside_service_token` (z-side).\n* `secondary_connection`:\n* `zside_port_uuid`\n* `zside_vlan_stag`\n* `zside_vlan_ctag`\n* `redundancy_type`\n* `redundancy_group`\n* `vendor_token`\n"
                    },
                    "vlanCtag": {
                        "type": "integer",
                        "description": "C-Tag/Inner-Tag of the connection - a numeric character ranging from 2\n\\- 4094.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanStag": {
                        "type": "integer",
                        "description": "S-Tag/Outer-Tag of the connection - a numeric\ncharacter ranging from 2 - 4094.\n",
                        "willReplaceOnChanges": true
                    },
                    "zsidePortUuid": {
                        "type": "string",
                        "description": "Unique identifier of the port on the remote/destination side\n(z-side). Allows you to connect between your own ports or virtual devices across your company's\nEquinix Fabric deployment, with no need for a private service profile.\n",
                        "willReplaceOnChanges": true
                    },
                    "zsideServiceToken": {
                        "type": "string",
                        "description": "- Z-side\nservice tokens authorize you to create a connection from your port or virtual device to a customer\nport which created the token for you. `zside_service_token` cannot be used with `secondary_connection`.\nMore details in [Z-Side Fabric Service Tokens](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm#:~:text=requirements%20per%20provider.-,Z%2DSide%20Service%20Tokens,-If%20you%20want).\n",
                        "willReplaceOnChanges": true
                    },
                    "zsideVlanCtag": {
                        "type": "integer",
                        "description": "C-Tag/Inner-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n`secondary_connection` is defined it will internally use same `zside_vlan_ctag` for the secondary\nconnection.\n",
                        "willReplaceOnChanges": true
                    },
                    "zsideVlanStag": {
                        "type": "integer",
                        "description": "S-Tag/Outer-Tag of the connection on the remote/destination\nside (z-side) - a numeric character ranging from 2 - 4094.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter": {
            "description": "\n\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/eCXL2ConnectionAccepter:ECXL2ConnectionAccepter example {existing_id}\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access Key used to accept connection on provider side.\n"
                },
                "awsConnectionId": {
                    "type": "string",
                    "description": "Identifier of a hosted Direct Connect connection on AWS side,\napplicable for accepter resource with connections to AWS only.\n"
                },
                "awsProfile": {
                    "type": "string",
                    "description": "AWS Profile Name for retrieving credentials from.\nshared credentials file\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "Identifier of Layer 2 connection that will be accepted.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret Key used to accept connection on provider side.\n"
                }
            },
            "required": [
                "accessKey",
                "awsConnectionId",
                "connectionId",
                "secretKey"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access Key used to accept connection on provider side.\n",
                    "willReplaceOnChanges": true
                },
                "awsProfile": {
                    "type": "string",
                    "description": "AWS Profile Name for retrieving credentials from.\nshared credentials file\n",
                    "willReplaceOnChanges": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "Identifier of Layer 2 connection that will be accepted.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret Key used to accept connection on provider side.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ECXL2ConnectionAccepter resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "Access Key used to accept connection on provider side.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsConnectionId": {
                        "type": "string",
                        "description": "Identifier of a hosted Direct Connect connection on AWS side,\napplicable for accepter resource with connections to AWS only.\n"
                    },
                    "awsProfile": {
                        "type": "string",
                        "description": "AWS Profile Name for retrieving credentials from.\nshared credentials file\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "Identifier of Layer 2 connection that will be accepted.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Secret Key used to accept connection on provider side.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/eCXL2Serviceprofile:ECXL2Serviceprofile": {
            "description": "Resource `equinix.ECXL2Serviceprofile` is used to manage layer 2 service profiles\nin Equinix Fabric.\n\nThis resource relies on the Equinix Fabric API. The parameters\nand attributes available map to the fields described at\n\u003chttps://developer.equinix.com/catalog/sellerv3#operation/getProfileByIdOrNameUsingGET\u003e.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst private_profile = new equinix.ECXL2Serviceprofile(\"private-profile\", {\n    bandwidthThresholdNotifications: [\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n    connectionNameLabel: \"Connection\",\n    description: \"my private profile\",\n    features: {\n        allowRemoteConnections: true,\n        testProfile: false,\n    },\n    ports: [\n        {\n            metroCode: \"NY\",\n            uuid: \"a867f685-422f-22f7-6de0-320a5c00abdd\",\n        },\n        {\n            metroCode: \"NY\",\n            uuid: \"a867f685-4231-2317-6de0-320a5c00abdd\",\n        },\n    ],\n    private: true,\n    privateUserEmails: [\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n    profileStatuschangeNotifications: [\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n    speedBands: [\n        {\n            speed: 1000,\n            speedUnit: \"MB\",\n        },\n        {\n            speed: 500,\n            speedUnit: \"MB\",\n        },\n        {\n            speed: 100,\n            speedUnit: \"MB\",\n        },\n    ],\n    vcStatuschangeNotifications: [\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nprivate_profile = equinix.ECXL2Serviceprofile(\"private-profile\",\n    bandwidth_threshold_notifications=[\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n    connection_name_label=\"Connection\",\n    description=\"my private profile\",\n    features=equinix.ECXL2ServiceprofileFeaturesArgs(\n        allow_remote_connections=True,\n        test_profile=False,\n    ),\n    ports=[\n        equinix.ECXL2ServiceprofilePortArgs(\n            metro_code=\"NY\",\n            uuid=\"a867f685-422f-22f7-6de0-320a5c00abdd\",\n        ),\n        equinix.ECXL2ServiceprofilePortArgs(\n            metro_code=\"NY\",\n            uuid=\"a867f685-4231-2317-6de0-320a5c00abdd\",\n        ),\n    ],\n    private=True,\n    private_user_emails=[\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n    profile_statuschange_notifications=[\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ],\n    speed_bands=[\n        equinix.ECXL2ServiceprofileSpeedBandArgs(\n            speed=1000,\n            speed_unit=\"MB\",\n        ),\n        equinix.ECXL2ServiceprofileSpeedBandArgs(\n            speed=500,\n            speed_unit=\"MB\",\n        ),\n        equinix.ECXL2ServiceprofileSpeedBandArgs(\n            speed=100,\n            speed_unit=\"MB\",\n        ),\n    ],\n    vc_statuschange_notifications=[\n        \"John.Doe@example.com\",\n        \"Marry.Doe@example.com\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var private_profile = new Equinix.ECXL2Serviceprofile(\"private-profile\", new Equinix.ECXL2ServiceprofileArgs\n        {\n            BandwidthThresholdNotifications = \n            {\n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\",\n            },\n            ConnectionNameLabel = \"Connection\",\n            Description = \"my private profile\",\n            Features = new Equinix.Inputs.ECXL2ServiceprofileFeaturesArgs\n            {\n                AllowRemoteConnections = true,\n                TestProfile = false,\n            },\n            Ports = \n            {\n                new Equinix.Inputs.ECXL2ServiceprofilePortArgs\n                {\n                    MetroCode = \"NY\",\n                    Uuid = \"a867f685-422f-22f7-6de0-320a5c00abdd\",\n                },\n                new Equinix.Inputs.ECXL2ServiceprofilePortArgs\n                {\n                    MetroCode = \"NY\",\n                    Uuid = \"a867f685-4231-2317-6de0-320a5c00abdd\",\n                },\n            },\n            Private = true,\n            PrivateUserEmails = \n            {\n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\",\n            },\n            ProfileStatuschangeNotifications = \n            {\n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\",\n            },\n            SpeedBands = \n            {\n                new Equinix.Inputs.ECXL2ServiceprofileSpeedBandArgs\n                {\n                    Speed = 1000,\n                    SpeedUnit = \"MB\",\n                },\n                new Equinix.Inputs.ECXL2ServiceprofileSpeedBandArgs\n                {\n                    Speed = 500,\n                    SpeedUnit = \"MB\",\n                },\n                new Equinix.Inputs.ECXL2ServiceprofileSpeedBandArgs\n                {\n                    Speed = 100,\n                    SpeedUnit = \"MB\",\n                },\n            },\n            VcStatuschangeNotifications = \n            {\n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewECXL2Serviceprofile(ctx, \"private-profile\", \u0026equinix.ECXL2ServiceprofileArgs{\n\t\t\tBandwidthThresholdNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"John.Doe@example.com\"),\n\t\t\t\tpulumi.String(\"Marry.Doe@example.com\"),\n\t\t\t},\n\t\t\tConnectionNameLabel: pulumi.String(\"Connection\"),\n\t\t\tDescription:         pulumi.String(\"my private profile\"),\n\t\t\tFeatures: \u0026ECXL2ServiceprofileFeaturesArgs{\n\t\t\t\tAllowRemoteConnections: pulumi.Bool(true),\n\t\t\t\tTestProfile:            pulumi.Bool(false),\n\t\t\t},\n\t\t\tPorts: ECXL2ServiceprofilePortArray{\n\t\t\t\t\u0026ECXL2ServiceprofilePortArgs{\n\t\t\t\t\tMetroCode: pulumi.String(\"NY\"),\n\t\t\t\t\tUuid:      pulumi.String(\"a867f685-422f-22f7-6de0-320a5c00abdd\"),\n\t\t\t\t},\n\t\t\t\t\u0026ECXL2ServiceprofilePortArgs{\n\t\t\t\t\tMetroCode: pulumi.String(\"NY\"),\n\t\t\t\t\tUuid:      pulumi.String(\"a867f685-4231-2317-6de0-320a5c00abdd\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPrivate: pulumi.Bool(true),\n\t\t\tPrivateUserEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"John.Doe@example.com\"),\n\t\t\t\tpulumi.String(\"Marry.Doe@example.com\"),\n\t\t\t},\n\t\t\tProfileStatuschangeNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"John.Doe@example.com\"),\n\t\t\t\tpulumi.String(\"Marry.Doe@example.com\"),\n\t\t\t},\n\t\t\tSpeedBands: ECXL2ServiceprofileSpeedBandArray{\n\t\t\t\t\u0026ECXL2ServiceprofileSpeedBandArgs{\n\t\t\t\t\tSpeed:     pulumi.Int(1000),\n\t\t\t\t\tSpeedUnit: pulumi.String(\"MB\"),\n\t\t\t\t},\n\t\t\t\t\u0026ECXL2ServiceprofileSpeedBandArgs{\n\t\t\t\t\tSpeed:     pulumi.Int(500),\n\t\t\t\t\tSpeedUnit: pulumi.String(\"MB\"),\n\t\t\t\t},\n\t\t\t\t\u0026ECXL2ServiceprofileSpeedBandArgs{\n\t\t\t\t\tSpeed:     pulumi.Int(100),\n\t\t\t\t\tSpeedUnit: pulumi.String(\"MB\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVcStatuschangeNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"John.Doe@example.com\"),\n\t\t\t\tpulumi.String(\"Marry.Doe@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var private_profile = new ECXL2Serviceprofile(\"private-profile\", ECXL2ServiceprofileArgs.builder()        \n            .bandwidthThresholdNotifications(            \n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\")\n            .connectionNameLabel(\"Connection\")\n            .description(\"my private profile\")\n            .features(ECXL2ServiceprofileFeaturesArgs.builder()\n                .allowRemoteConnections(true)\n                .testProfile(false)\n                .build())\n            .ports(            \n                ECXL2ServiceprofilePortArgs.builder()\n                    .metroCode(\"NY\")\n                    .uuid(\"a867f685-422f-22f7-6de0-320a5c00abdd\")\n                    .build(),\n                ECXL2ServiceprofilePortArgs.builder()\n                    .metroCode(\"NY\")\n                    .uuid(\"a867f685-4231-2317-6de0-320a5c00abdd\")\n                    .build())\n            .private_(true)\n            .privateUserEmails(            \n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\")\n            .profileStatuschangeNotifications(            \n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\")\n            .speedBands(            \n                ECXL2ServiceprofileSpeedBandArgs.builder()\n                    .speed(1000)\n                    .speedUnit(\"MB\")\n                    .build(),\n                ECXL2ServiceprofileSpeedBandArgs.builder()\n                    .speed(500)\n                    .speedUnit(\"MB\")\n                    .build(),\n                ECXL2ServiceprofileSpeedBandArgs.builder()\n                    .speed(100)\n                    .speedUnit(\"MB\")\n                    .build())\n            .vcStatuschangeNotifications(            \n                \"John.Doe@example.com\",\n                \"Marry.Doe@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  private-profile:\n    type: equinix:ECXL2Serviceprofile\n    properties:\n      bandwidthThresholdNotifications:\n        - John.Doe@example.com\n        - Marry.Doe@example.com\n      connectionNameLabel: Connection\n      description: my private profile\n      features:\n        allowRemoteConnections: true\n        testProfile: false\n      ports:\n        - metroCode: NY\n          uuid: a867f685-422f-22f7-6de0-320a5c00abdd\n        - metroCode: NY\n          uuid: a867f685-4231-2317-6de0-320a5c00abdd\n      private: true\n      privateUserEmails:\n        - John.Doe@example.com\n        - Marry.Doe@example.com\n      profileStatuschangeNotifications:\n        - John.Doe@example.com\n        - Marry.Doe@example.com\n      speedBands:\n        - speed: 1000\n          speedUnit: MB\n        - speed: 500\n          speedUnit: MB\n        - speed: 100\n          speedUnit: MB\n      vcStatuschangeNotifications:\n        - John.Doe@example.com\n        - Marry.Doe@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/eCXL2Serviceprofile:ECXL2Serviceprofile example {existing_id}\n```\n\n ",
            "properties": {
                "apiIntegration": {
                    "type": "boolean",
                    "description": "Boolean value that determines if API integration is enabled. It\nallows you to complete connection provisioning in less than five minutes. Without API Integration,\nadditional manual steps will be required and the provisioning will likely take longer.\n"
                },
                "authkeyLabel": {
                    "type": "string",
                    "description": "Name of the authentication key label to be used by the\nAuthentication Key service. It allows Service Providers with QinQ ports to accept groups of\nconnections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.\n"
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "description": "Specifies the port bandwidth threshold percentage. If\nthe bandwidth limit is met or exceeded, an alert is sent to the seller.\n"
                },
                "bandwidthThresholdNotifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses that will receive\nnotifications about bandwidth thresholds.\n"
                },
                "connectionNameLabel": {
                    "type": "string",
                    "description": "Custom name used for calling a connections\ne.g. `circuit`. Defaults to `Connection`.\n"
                },
                "ctagLabel": {
                    "type": "string",
                    "description": "C-Tag/Inner-Tag label name for the connections.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service profile.\n"
                },
                "equinixManagedPortVlan": {
                    "type": "boolean",
                    "description": "Applicable when `api_integration` is set to `true`. It\nindicates whether the port and VLAN details are managed by Equinix.\n"
                },
                "features": {
                    "$ref": "#/types/equinix:index/ECXL2ServiceprofileFeatures:ECXL2ServiceprofileFeatures",
                    "description": "Block of profile features configuration. See Features below\nfor more details.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "Specifies the API integration ID that was provided to the customer\nduring onboarding. You can validate your API integration ID using the validateIntegrationId API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service profile. An alpha-numeric 50 characters string which can\ninclude only hyphens and underscores.\n"
                },
                "oversubscription": {
                    "type": "string",
                    "description": "You can set an alert for when a percentage of your profile has\nbeen sold. Service providers like to use this functionality to alert them when they need to add\nmore ports or when they need to create a new service profile. Required with\n`oversubscription_allowed`, defaults to `1x`.\n"
                },
                "oversubscriptionAllowed": {
                    "type": "boolean",
                    "description": "Boolean value that determines if, regardless of the\nutilization, Equinix Fabric will continue to add connections to your links until we reach the\noversubscription limit. By selecting this service, you acknowledge that you will manage decisions\non when to increase capacity on these link.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ServiceprofilePort:ECXL2ServiceprofilePort"
                    },
                    "description": "One or more definitions of ports residing in locations, from which your\ncustomers will be able to access services using this service profile. See Port below for\nmore details.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Boolean value that indicates whether or not this is a private profile,\ni.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for\ncreating connections if correct permissions are granted.\n"
                },
                "privateUserEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of users email ids who have permission to access this\nservice profile. Argument is required when profile is set as private.\n"
                },
                "profileStatuschangeNotifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses that will receive\nnotifications about profile status changes.\n"
                },
                "redundancyRequired": {
                    "type": "boolean",
                    "description": "Boolean value that determines if your connections will require\nredundancy. if yes, then users need to create a secondary redundant connection.\n"
                },
                "secondaryVlanFromPrimary": {
                    "type": "boolean",
                    "description": "Indicates whether the VLAN ID of. the secondary\nconnection is the same as the primary connection.\n"
                },
                "servicekeyAutogenerated": {
                    "type": "boolean",
                    "description": "Boolean value that indicates whether multiple connections\ncan be created with the same authorization key to connect to this service profile after the first\nconnection has been approved by the seller.\n"
                },
                "speedBands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ServiceprofileSpeedBand:ECXL2ServiceprofileSpeedBand"
                    },
                    "description": "One or more definitions of supported speed/bandwidth. Argument is\nrequired when `speed_from_api` is set to `false`. See Speed Band below for more\ndetails.\n"
                },
                "speedCustomizationAllowed": {
                    "type": "boolean",
                    "description": "Boolean value that determines if customer is allowed\nto enter a custom connection speed.\n"
                },
                "speedFromApi": {
                    "type": "boolean",
                    "description": "Boolean valuta that determines if connection speed will be derived\nfrom an API call. Argument has to be specified when `api_integration` is enabled.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Service profile provisioning status.\n"
                },
                "tagType": {
                    "type": "string",
                    "description": "Specifies additional tagging information required by the seller profile\nfor Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)\nfor additional information. Valid values are:\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier of the port.\n"
                },
                "vcStatuschangeNotifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses that will receive\nnotifications about connections approvals and rejections.\n"
                }
            },
            "required": [
                "bandwidthThresholdNotifications",
                "features",
                "name",
                "ports",
                "profileStatuschangeNotifications",
                "state",
                "uuid",
                "vcStatuschangeNotifications"
            ],
            "inputProperties": {
                "apiIntegration": {
                    "type": "boolean",
                    "description": "Boolean value that determines if API integration is enabled. It\nallows you to complete connection provisioning in less than five minutes. Without API Integration,\nadditional manual steps will be required and the provisioning will likely take longer.\n"
                },
                "authkeyLabel": {
                    "type": "string",
                    "description": "Name of the authentication key label to be used by the\nAuthentication Key service. It allows Service Providers with QinQ ports to accept groups of\nconnections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.\n"
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "description": "Specifies the port bandwidth threshold percentage. If\nthe bandwidth limit is met or exceeded, an alert is sent to the seller.\n"
                },
                "bandwidthThresholdNotifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses that will receive\nnotifications about bandwidth thresholds.\n"
                },
                "connectionNameLabel": {
                    "type": "string",
                    "description": "Custom name used for calling a connections\ne.g. `circuit`. Defaults to `Connection`.\n"
                },
                "ctagLabel": {
                    "type": "string",
                    "description": "C-Tag/Inner-Tag label name for the connections.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service profile.\n"
                },
                "equinixManagedPortVlan": {
                    "type": "boolean",
                    "description": "Applicable when `api_integration` is set to `true`. It\nindicates whether the port and VLAN details are managed by Equinix.\n"
                },
                "features": {
                    "$ref": "#/types/equinix:index/ECXL2ServiceprofileFeatures:ECXL2ServiceprofileFeatures",
                    "description": "Block of profile features configuration. See Features below\nfor more details.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "Specifies the API integration ID that was provided to the customer\nduring onboarding. You can validate your API integration ID using the validateIntegrationId API.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service profile. An alpha-numeric 50 characters string which can\ninclude only hyphens and underscores.\n"
                },
                "oversubscription": {
                    "type": "string",
                    "description": "You can set an alert for when a percentage of your profile has\nbeen sold. Service providers like to use this functionality to alert them when they need to add\nmore ports or when they need to create a new service profile. Required with\n`oversubscription_allowed`, defaults to `1x`.\n"
                },
                "oversubscriptionAllowed": {
                    "type": "boolean",
                    "description": "Boolean value that determines if, regardless of the\nutilization, Equinix Fabric will continue to add connections to your links until we reach the\noversubscription limit. By selecting this service, you acknowledge that you will manage decisions\non when to increase capacity on these link.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ServiceprofilePort:ECXL2ServiceprofilePort"
                    },
                    "description": "One or more definitions of ports residing in locations, from which your\ncustomers will be able to access services using this service profile. See Port below for\nmore details.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Boolean value that indicates whether or not this is a private profile,\ni.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for\ncreating connections if correct permissions are granted.\n"
                },
                "privateUserEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of users email ids who have permission to access this\nservice profile. Argument is required when profile is set as private.\n"
                },
                "profileStatuschangeNotifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses that will receive\nnotifications about profile status changes.\n"
                },
                "redundancyRequired": {
                    "type": "boolean",
                    "description": "Boolean value that determines if your connections will require\nredundancy. if yes, then users need to create a secondary redundant connection.\n"
                },
                "secondaryVlanFromPrimary": {
                    "type": "boolean",
                    "description": "Indicates whether the VLAN ID of. the secondary\nconnection is the same as the primary connection.\n"
                },
                "servicekeyAutogenerated": {
                    "type": "boolean",
                    "description": "Boolean value that indicates whether multiple connections\ncan be created with the same authorization key to connect to this service profile after the first\nconnection has been approved by the seller.\n"
                },
                "speedBands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/ECXL2ServiceprofileSpeedBand:ECXL2ServiceprofileSpeedBand"
                    },
                    "description": "One or more definitions of supported speed/bandwidth. Argument is\nrequired when `speed_from_api` is set to `false`. See Speed Band below for more\ndetails.\n"
                },
                "speedCustomizationAllowed": {
                    "type": "boolean",
                    "description": "Boolean value that determines if customer is allowed\nto enter a custom connection speed.\n"
                },
                "speedFromApi": {
                    "type": "boolean",
                    "description": "Boolean valuta that determines if connection speed will be derived\nfrom an API call. Argument has to be specified when `api_integration` is enabled.\n"
                },
                "tagType": {
                    "type": "string",
                    "description": "Specifies additional tagging information required by the seller profile\nfor Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)\nfor additional information. Valid values are:\n"
                },
                "vcStatuschangeNotifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses that will receive\nnotifications about connections approvals and rejections.\n"
                }
            },
            "requiredInputs": [
                "bandwidthThresholdNotifications",
                "features",
                "ports",
                "profileStatuschangeNotifications",
                "vcStatuschangeNotifications"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ECXL2Serviceprofile resources.\n",
                "properties": {
                    "apiIntegration": {
                        "type": "boolean",
                        "description": "Boolean value that determines if API integration is enabled. It\nallows you to complete connection provisioning in less than five minutes. Without API Integration,\nadditional manual steps will be required and the provisioning will likely take longer.\n"
                    },
                    "authkeyLabel": {
                        "type": "string",
                        "description": "Name of the authentication key label to be used by the\nAuthentication Key service. It allows Service Providers with QinQ ports to accept groups of\nconnections or VLANs from Dot1q customers. This is similar to S-Tag/C-Tag capabilities.\n"
                    },
                    "bandwidthAlertThreshold": {
                        "type": "number",
                        "description": "Specifies the port bandwidth threshold percentage. If\nthe bandwidth limit is met or exceeded, an alert is sent to the seller.\n"
                    },
                    "bandwidthThresholdNotifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses that will receive\nnotifications about bandwidth thresholds.\n"
                    },
                    "connectionNameLabel": {
                        "type": "string",
                        "description": "Custom name used for calling a connections\ne.g. `circuit`. Defaults to `Connection`.\n"
                    },
                    "ctagLabel": {
                        "type": "string",
                        "description": "C-Tag/Inner-Tag label name for the connections.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the service profile.\n"
                    },
                    "equinixManagedPortVlan": {
                        "type": "boolean",
                        "description": "Applicable when `api_integration` is set to `true`. It\nindicates whether the port and VLAN details are managed by Equinix.\n"
                    },
                    "features": {
                        "$ref": "#/types/equinix:index/ECXL2ServiceprofileFeatures:ECXL2ServiceprofileFeatures",
                        "description": "Block of profile features configuration. See Features below\nfor more details.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "Specifies the API integration ID that was provided to the customer\nduring onboarding. You can validate your API integration ID using the validateIntegrationId API.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service profile. An alpha-numeric 50 characters string which can\ninclude only hyphens and underscores.\n"
                    },
                    "oversubscription": {
                        "type": "string",
                        "description": "You can set an alert for when a percentage of your profile has\nbeen sold. Service providers like to use this functionality to alert them when they need to add\nmore ports or when they need to create a new service profile. Required with\n`oversubscription_allowed`, defaults to `1x`.\n"
                    },
                    "oversubscriptionAllowed": {
                        "type": "boolean",
                        "description": "Boolean value that determines if, regardless of the\nutilization, Equinix Fabric will continue to add connections to your links until we reach the\noversubscription limit. By selecting this service, you acknowledge that you will manage decisions\non when to increase capacity on these link.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/ECXL2ServiceprofilePort:ECXL2ServiceprofilePort"
                        },
                        "description": "One or more definitions of ports residing in locations, from which your\ncustomers will be able to access services using this service profile. See Port below for\nmore details.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Boolean value that indicates whether or not this is a private profile,\ni.e. not public like AWS/Azure/Oracle/Google, etc. If private, it can only be available for\ncreating connections if correct permissions are granted.\n"
                    },
                    "privateUserEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of users email ids who have permission to access this\nservice profile. Argument is required when profile is set as private.\n"
                    },
                    "profileStatuschangeNotifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses that will receive\nnotifications about profile status changes.\n"
                    },
                    "redundancyRequired": {
                        "type": "boolean",
                        "description": "Boolean value that determines if your connections will require\nredundancy. if yes, then users need to create a secondary redundant connection.\n"
                    },
                    "secondaryVlanFromPrimary": {
                        "type": "boolean",
                        "description": "Indicates whether the VLAN ID of. the secondary\nconnection is the same as the primary connection.\n"
                    },
                    "servicekeyAutogenerated": {
                        "type": "boolean",
                        "description": "Boolean value that indicates whether multiple connections\ncan be created with the same authorization key to connect to this service profile after the first\nconnection has been approved by the seller.\n"
                    },
                    "speedBands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/ECXL2ServiceprofileSpeedBand:ECXL2ServiceprofileSpeedBand"
                        },
                        "description": "One or more definitions of supported speed/bandwidth. Argument is\nrequired when `speed_from_api` is set to `false`. See Speed Band below for more\ndetails.\n"
                    },
                    "speedCustomizationAllowed": {
                        "type": "boolean",
                        "description": "Boolean value that determines if customer is allowed\nto enter a custom connection speed.\n"
                    },
                    "speedFromApi": {
                        "type": "boolean",
                        "description": "Boolean valuta that determines if connection speed will be derived\nfrom an API call. Argument has to be specified when `api_integration` is enabled.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Service profile provisioning status.\n"
                    },
                    "tagType": {
                        "type": "string",
                        "description": "Specifies additional tagging information required by the seller profile\nfor Dot1Q to QinQ translation. See [Enhance Dot1q to QinQ translation support](https://docs.equinix.com/es/Content/Interconnection/Fabric/layer-2/Fabric-Create-Layer2-Service-Profile.htm#:~:text=Enhance%20Dot1q%20to%20QinQ%20translation%20support)\nfor additional information. Valid values are:\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the port.\n"
                    },
                    "vcStatuschangeNotifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses that will receive\nnotifications about connections approvals and rejections.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalBGPSession:MetalBGPSession": {
            "description": "Provides a resource to manage BGP sessions in Equinix Metal Host. Refer to [Equinix Metal BGP documentation](https://metal.equinix.com/developers/docs/networking/local-global-bgp/) for more details.\n\nYou need to have BGP config enabled in your project.\n\nBGP session must be linked to a device running [BIRD](https://bird.network.cz) or other BGP routing daemon which will control route advertisements via the session to Equinix Metal's upstream routers.\n",
            "properties": {
                "addressFamily": {
                    "type": "string",
                    "description": "`ipv4` or `ipv6`.\n"
                },
                "defaultRoute": {
                    "type": "boolean",
                    "description": "Boolean flag to set the default route policy. False by default.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the session - up or down\n"
                }
            },
            "required": [
                "addressFamily",
                "deviceId",
                "status"
            ],
            "inputProperties": {
                "addressFamily": {
                    "type": "string",
                    "description": "`ipv4` or `ipv6`.\n",
                    "willReplaceOnChanges": true
                },
                "defaultRoute": {
                    "type": "boolean",
                    "description": "Boolean flag to set the default route policy. False by default.\n",
                    "willReplaceOnChanges": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "addressFamily",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalBGPSession resources.\n",
                "properties": {
                    "addressFamily": {
                        "type": "string",
                        "description": "`ipv4` or `ipv6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultRoute": {
                        "type": "boolean",
                        "description": "Boolean flag to set the default route policy. False by default.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the session - up or down\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalConnection:MetalConnection": {
            "description": "Use this resource to request the creation an Interconnection asset to connect with other parties using [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/).\n\n\u003e Equinix Metal connection with service_token_type `a_side` is not generally available and may not be enabled yet for your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Shared Connection with z_side token - Non-redundant Connection from your own Equinix Fabric Port to Equinix Metal\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleMetalConnection = new equinix.MetalConnection(\"exampleMetalConnection\", {\n    projectId: local.project_id,\n    type: \"shared\",\n    redundancy: \"primary\",\n    metro: \"FR\",\n    speed: \"200Mbps\",\n    serviceTokenType: \"z_side\",\n});\nconst exampleGetECXPort = equinix.GetECXPort({\n    name: \"CX-FR5-NL-Dot1q-BO-1G-PRI\",\n});\nconst exampleECXL2Connection = new equinix.ECXL2Connection(\"exampleECXL2Connection\", {\n    zsideServiceToken: exampleMetalConnection.serviceTokens.apply(serviceTokens =\u003e serviceTokens[0].id),\n    speed: 200,\n    speedUnit: \"MB\",\n    notifications: [\"example@equinix.com\"],\n    sellerMetroCode: \"FR\",\n    portUuid: exampleGetECXPort.then(exampleGetECXPort =\u003e exampleGetECXPort.id),\n    vlanStag: 1020,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_metal_connection = equinix.MetalConnection(\"exampleMetalConnection\",\n    project_id=local[\"project_id\"],\n    type=\"shared\",\n    redundancy=\"primary\",\n    metro=\"FR\",\n    speed=\"200Mbps\",\n    service_token_type=\"z_side\")\nexample_get_ecx_port = equinix.get_ecx_port(name=\"CX-FR5-NL-Dot1q-BO-1G-PRI\")\nexample_ecxl2_connection = equinix.ECXL2Connection(\"exampleECXL2Connection\",\n    zside_service_token=example_metal_connection.service_tokens[0].id,\n    speed=200,\n    speed_unit=\"MB\",\n    notifications=[\"example@equinix.com\"],\n    seller_metro_code=\"FR\",\n    port_uuid=example_get_ecx_port.id,\n    vlan_stag=1020)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleMetalConnection = new Equinix.MetalConnection(\"exampleMetalConnection\", new Equinix.MetalConnectionArgs\n        {\n            ProjectId = local.Project_id,\n            Type = \"shared\",\n            Redundancy = \"primary\",\n            Metro = \"FR\",\n            Speed = \"200Mbps\",\n            ServiceTokenType = \"z_side\",\n        });\n        var exampleGetECXPort = Output.Create(Equinix.GetECXPort.InvokeAsync(new Equinix.GetECXPortArgs\n        {\n            Name = \"CX-FR5-NL-Dot1q-BO-1G-PRI\",\n        }));\n        var exampleECXL2Connection = new Equinix.ECXL2Connection(\"exampleECXL2Connection\", new Equinix.ECXL2ConnectionArgs\n        {\n            ZsideServiceToken = exampleMetalConnection.ServiceTokens.Apply(serviceTokens =\u003e serviceTokens[0].Id),\n            Speed = 200,\n            SpeedUnit = \"MB\",\n            Notifications = \n            {\n                \"example@equinix.com\",\n            },\n            SellerMetroCode = \"FR\",\n            PortUuid = exampleGetECXPort.Apply(exampleGetECXPort =\u003e exampleGetECXPort.Id),\n            VlanStag = 1020,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleMetalConnection, err := equinix.NewMetalConnection(ctx, \"exampleMetalConnection\", \u0026equinix.MetalConnectionArgs{\n\t\t\tProjectId:        pulumi.Any(local.Project_id),\n\t\t\tType:             pulumi.String(\"shared\"),\n\t\t\tRedundancy:       pulumi.String(\"primary\"),\n\t\t\tMetro:            pulumi.String(\"FR\"),\n\t\t\tSpeed:            pulumi.String(\"200Mbps\"),\n\t\t\tServiceTokenType: pulumi.String(\"z_side\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGetECXPort, err := equinix.GetECXPort(ctx, \u0026GetECXPortArgs{\n\t\t\tName: \"CX-FR5-NL-Dot1q-BO-1G-PRI\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewECXL2Connection(ctx, \"exampleECXL2Connection\", \u0026equinix.ECXL2ConnectionArgs{\n\t\t\tZsideServiceToken: exampleMetalConnection.ServiceTokens.ApplyT(func(serviceTokens []MetalConnectionServiceToken) (string, error) {\n\t\t\t\treturn serviceTokens[0].Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tSpeed:     pulumi.Int(200),\n\t\t\tSpeedUnit: pulumi.String(\"MB\"),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"example@equinix.com\"),\n\t\t\t},\n\t\t\tSellerMetroCode: pulumi.String(\"FR\"),\n\t\t\tPortUuid:        pulumi.String(exampleGetECXPort.Id),\n\t\t\tVlanStag:        pulumi.Int(1020),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleMetalConnection = new MetalConnection(\"exampleMetalConnection\", MetalConnectionArgs.builder()        \n            .projectId(local.project_id())\n            .type(\"shared\")\n            .redundancy(\"primary\")\n            .metro(\"FR\")\n            .speed(\"200Mbps\")\n            .serviceTokenType(\"z_side\")\n            .build());\n\n        final var exampleGetECXPort = EquinixFunctions.GetECXPort();\n\n        var exampleECXL2Connection = new ECXL2Connection(\"exampleECXL2Connection\", ECXL2ConnectionArgs.builder()        \n            .zsideServiceToken(exampleMetalConnection.serviceTokens().apply(serviceTokens -\u003e serviceTokens[0].id()))\n            .speed(\"200\")\n            .speedUnit(\"MB\")\n            .notifications(\"example@equinix.com\")\n            .sellerMetroCode(\"FR\")\n            .portUuid(exampleGetECXPort.id())\n            .vlanStag(1020)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleMetalConnection:\n    type: equinix:MetalConnection\n    properties:\n      projectId: ${local.project_id}\n      type: shared\n      redundancy: primary\n      metro: FR\n      speed: 200Mbps\n      serviceTokenType: z_side\n  exampleECXL2Connection:\n    type: equinix:ECXL2Connection\n    properties:\n      zsideServiceToken: ${exampleMetalConnection.serviceTokens[0].id}\n      speed: 200\n      speedUnit: MB\n      notifications:\n        - example@equinix.com\n      sellerMetroCode: FR\n      portUuid: ${exampleGetECXPort.id}\n      vlanStag: 1020\nvariables:\n  exampleGetECXPort:\n    Fn::Invoke:\n      Function: equinix:GetECXPort\n      Arguments:\n        name: CX-FR5-NL-Dot1q-BO-1G-PRI\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description for the connection resource.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where the connection will be created.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where the connection will be created.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization where the connection is scoped to.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/MetalConnectionPort:MetalConnectionPort"
                    },
                    "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of\nport is described in documentation of the\nequinix.MetalConnection datasource.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project where the connection is scoped to, must be set for.\n"
                },
                "redundancy": {
                    "type": "string",
                    "description": "Connection redundancy - redundant or primary.\n"
                },
                "serviceTokenType": {
                    "type": "string",
                    "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side.\n"
                },
                "serviceTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/MetalConnectionServiceToken:MetalConnectionServiceToken"
                    },
                    "description": "List of connection service tokens with attributes. Scehma of service_token is described in documentation of the equinix.MetalConnection datasource.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the connection resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)\n",
                    "deprecationMessage": "token is deprecated. Use service_tokens instead"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n"
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                }
            },
            "required": [
                "facility",
                "metro",
                "name",
                "organizationId",
                "ports",
                "redundancy",
                "serviceTokens",
                "speed",
                "status",
                "token",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description for the connection resource.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where the connection will be created.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where the connection will be created.\n",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n",
                    "willReplaceOnChanges": true
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization where the connection is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project where the connection is scoped to, must be set for.\n",
                    "willReplaceOnChanges": true
                },
                "redundancy": {
                    "type": "string",
                    "description": "Connection redundancy - redundant or primary.\n"
                },
                "serviceTokenType": {
                    "type": "string",
                    "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n",
                    "willReplaceOnChanges": true
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                }
            },
            "requiredInputs": [
                "redundancy",
                "speed",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalConnection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description for the connection resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility where the connection will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where the connection will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the connection resource\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization where the connection is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/MetalConnectionPort:MetalConnectionPort"
                        },
                        "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of\nport is described in documentation of the\nequinix.MetalConnection datasource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project where the connection is scoped to, must be set for.\n",
                        "willReplaceOnChanges": true
                    },
                    "redundancy": {
                        "type": "string",
                        "description": "Connection redundancy - redundant or primary.\n"
                    },
                    "serviceTokenType": {
                        "type": "string",
                        "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side.\n"
                    },
                    "serviceTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/MetalConnectionServiceToken:MetalConnectionServiceToken"
                        },
                        "description": "List of connection service tokens with attributes. Scehma of service_token is described in documentation of the equinix.MetalConnection datasource.\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the connection resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)\n",
                        "deprecationMessage": "token is deprecated. Use service_tokens instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "Connection type - dedicated or shared.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalDevice:MetalDevice": {
            "description": "Provides an Equinix Metal device resource. This can be used to create,\nmodify, and delete devices.\n\n\u003e **NOTE:** All arguments including the `root_password` and `user_data` will be stored in\n the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a device and add it to cool_project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst web1 = new equinix.MetalDevice(\"web1\", {\n    hostname: \"tf.coreos2\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nweb1 = equinix.MetalDevice(\"web1\",\n    hostname=\"tf.coreos2\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web1 = new Equinix.MetalDevice(\"web1\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"tf.coreos2\",\n            Plan = \"c3.small.x86\",\n            Metro = \"sv\",\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalDevice(ctx, \"web1\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tf.coreos2\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web1 = new MetalDevice(\"web1\", MetalDeviceArgs.builder()        \n            .hostname(\"tf.coreos2\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web1:\n    type: equinix:MetalDevice\n    properties:\n      hostname: tf.coreos2\n      plan: c3.small.x86\n      metro: sv\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n```\n\nSame as above, but boot via iPXE initially, using the Ignition Provider for provisioning\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst pxe1 = new equinix.MetalDevice(\"pxe1\", {\n    hostname: \"tf.coreos2-pxe\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"custom_ipxe\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    ipxeScriptUrl: \"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n    alwaysPxe: false,\n    userData: data.ignition_config.example.rendered,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\npxe1 = equinix.MetalDevice(\"pxe1\",\n    hostname=\"tf.coreos2-pxe\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"custom_ipxe\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    ipxe_script_url=\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n    always_pxe=False,\n    user_data=data[\"ignition_config\"][\"example\"][\"rendered\"])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pxe1 = new Equinix.MetalDevice(\"pxe1\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"tf.coreos2-pxe\",\n            Plan = \"c3.small.x86\",\n            Metro = \"sv\",\n            OperatingSystem = \"custom_ipxe\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n            IpxeScriptUrl = \"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n            AlwaysPxe = false,\n            UserData = data.Ignition_config.Example.Rendered,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalDevice(ctx, \"pxe1\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tf.coreos2-pxe\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"custom_ipxe\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tIpxeScriptUrl:   pulumi.String(\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\"),\n\t\t\tAlwaysPxe:       pulumi.Bool(false),\n\t\t\tUserData:        pulumi.Any(data.Ignition_config.Example.Rendered),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pxe1 = new MetalDevice(\"pxe1\", MetalDeviceArgs.builder()        \n            .hostname(\"tf.coreos2-pxe\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"custom_ipxe\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .ipxeScriptUrl(\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\")\n            .alwaysPxe(\"false\")\n            .userData(data.ignition_config().example().rendered())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pxe1:\n    type: equinix:MetalDevice\n    properties:\n      hostname: tf.coreos2-pxe\n      plan: c3.small.x86\n      metro: sv\n      operatingSystem: custom_ipxe\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      ipxeScriptUrl: https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\n      alwaysPxe: false\n      userData: ${data.ignition_config.example.rendered}\n```\n\nCreate a device without a public IP address in facility ny5, with only a /30 private IPv4 subnet (4 IP addresses)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst web1 = new equinix.MetalDevice(\"web1\", {\n    hostname: \"tf.coreos2\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    ipAddresses: [{\n        type: \"private_ipv4\",\n        cidr: 30,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nweb1 = equinix.MetalDevice(\"web1\",\n    hostname=\"tf.coreos2\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    ip_addresses=[equinix.MetalDeviceIpAddressArgs(\n        type=\"private_ipv4\",\n        cidr=30,\n    )])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web1 = new Equinix.MetalDevice(\"web1\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"tf.coreos2\",\n            Plan = \"c3.small.x86\",\n            Facilities = \n            {\n                \"ny5\",\n            },\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n            IpAddresses = \n            {\n                new Equinix.Inputs.MetalDeviceIpAddressArgs\n                {\n                    Type = \"private_ipv4\",\n                    Cidr = 30,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalDevice(ctx, \"web1\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"tf.coreos2\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tIpAddresses: MetalDeviceIpAddressArray{\n\t\t\t\t\u0026MetalDeviceIpAddressArgs{\n\t\t\t\t\tType: pulumi.String(\"private_ipv4\"),\n\t\t\t\t\tCidr: pulumi.Int(30),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web1 = new MetalDevice(\"web1\", MetalDeviceArgs.builder()        \n            .hostname(\"tf.coreos2\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .ipAddresses(MetalDeviceIpAddressArgs.builder()\n                .type(\"private_ipv4\")\n                .cidr(30)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web1:\n    type: equinix:MetalDevice\n    properties:\n      hostname: tf.coreos2\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      ipAddresses:\n        - type: private_ipv4\n          cidr: 30\n```\n\nDeploy device on next-available reserved hardware and do custom partitioning.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst web1 = new equinix.MetalDevice(\"web1\", {\n    hostname: \"tftest\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    hardwareReservationId: \"next-available\",\n    storage: `{\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda\",\n      \"wipeTable\": true,\n      \"partitions\": [\n        {\n          \"label\": \"BIOS\",\n          \"number\": 1,\n          \"size\": \"4096\"\n        },\n        {\n          \"label\": \"SWAP\",\n          \"number\": 2,\n          \"size\": \"3993600\"\n        },\n        {\n          \"label\": \"ROOT\",\n          \"number\": 3,\n          \"size\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"filesystems\": [\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda3\",\n        \"format\": \"ext4\",\n        \"point\": \"/\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"ROOT\"\n          ]\n        }\n      }\n    },\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda2\",\n        \"format\": \"swap\",\n        \"point\": \"none\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"SWAP\"\n          ]\n        }\n      }\n    }\n  ]\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nweb1 = equinix.MetalDevice(\"web1\",\n    hostname=\"tftest\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    hardware_reservation_id=\"next-available\",\n    storage=\"\"\"{\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda\",\n      \"wipeTable\": true,\n      \"partitions\": [\n        {\n          \"label\": \"BIOS\",\n          \"number\": 1,\n          \"size\": \"4096\"\n        },\n        {\n          \"label\": \"SWAP\",\n          \"number\": 2,\n          \"size\": \"3993600\"\n        },\n        {\n          \"label\": \"ROOT\",\n          \"number\": 3,\n          \"size\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"filesystems\": [\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda3\",\n        \"format\": \"ext4\",\n        \"point\": \"/\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"ROOT\"\n          ]\n        }\n      }\n    },\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda2\",\n        \"format\": \"swap\",\n        \"point\": \"none\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"SWAP\"\n          ]\n        }\n      }\n    }\n  ]\n}\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web1 = new Equinix.MetalDevice(\"web1\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"tftest\",\n            Plan = \"c3.small.x86\",\n            Facilities = \n            {\n                \"ny5\",\n            },\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n            HardwareReservationId = \"next-available\",\n            Storage = @\"{\n  \"\"disks\"\": [\n    {\n      \"\"device\"\": \"\"/dev/sda\"\",\n      \"\"wipeTable\"\": true,\n      \"\"partitions\"\": [\n        {\n          \"\"label\"\": \"\"BIOS\"\",\n          \"\"number\"\": 1,\n          \"\"size\"\": \"\"4096\"\"\n        },\n        {\n          \"\"label\"\": \"\"SWAP\"\",\n          \"\"number\"\": 2,\n          \"\"size\"\": \"\"3993600\"\"\n        },\n        {\n          \"\"label\"\": \"\"ROOT\"\",\n          \"\"number\"\": 3,\n          \"\"size\"\": \"\"0\"\"\n        }\n      ]\n    }\n  ],\n  \"\"filesystems\"\": [\n    {\n      \"\"mount\"\": {\n        \"\"device\"\": \"\"/dev/sda3\"\",\n        \"\"format\"\": \"\"ext4\"\",\n        \"\"point\"\": \"\"/\"\",\n        \"\"create\"\": {\n          \"\"options\"\": [\n            \"\"-L\"\",\n            \"\"ROOT\"\"\n          ]\n        }\n      }\n    },\n    {\n      \"\"mount\"\": {\n        \"\"device\"\": \"\"/dev/sda2\"\",\n        \"\"format\"\": \"\"swap\"\",\n        \"\"point\"\": \"\"none\"\",\n        \"\"create\"\": {\n          \"\"options\"\": [\n            \"\"-L\"\",\n            \"\"SWAP\"\"\n          ]\n        }\n      }\n    }\n  ]\n}\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalDevice(ctx, \"web1\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"tftest\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem:       pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:          pulumi.String(\"hourly\"),\n\t\t\tProjectId:             pulumi.Any(local.Project_id),\n\t\t\tHardwareReservationId: pulumi.String(\"next-available\"),\n\t\t\tStorage:               pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"disks\\\": [\\n\", \"    {\\n\", \"      \\\"device\\\": \\\"/dev/sda\\\",\\n\", \"      \\\"wipeTable\\\": true,\\n\", \"      \\\"partitions\\\": [\\n\", \"        {\\n\", \"          \\\"label\\\": \\\"BIOS\\\",\\n\", \"          \\\"number\\\": 1,\\n\", \"          \\\"size\\\": \\\"4096\\\"\\n\", \"        },\\n\", \"        {\\n\", \"          \\\"label\\\": \\\"SWAP\\\",\\n\", \"          \\\"number\\\": 2,\\n\", \"          \\\"size\\\": \\\"3993600\\\"\\n\", \"        },\\n\", \"        {\\n\", \"          \\\"label\\\": \\\"ROOT\\\",\\n\", \"          \\\"number\\\": 3,\\n\", \"          \\\"size\\\": \\\"0\\\"\\n\", \"        }\\n\", \"      ]\\n\", \"    }\\n\", \"  ],\\n\", \"  \\\"filesystems\\\": [\\n\", \"    {\\n\", \"      \\\"mount\\\": {\\n\", \"        \\\"device\\\": \\\"/dev/sda3\\\",\\n\", \"        \\\"format\\\": \\\"ext4\\\",\\n\", \"        \\\"point\\\": \\\"/\\\",\\n\", \"        \\\"create\\\": {\\n\", \"          \\\"options\\\": [\\n\", \"            \\\"-L\\\",\\n\", \"            \\\"ROOT\\\"\\n\", \"          ]\\n\", \"        }\\n\", \"      }\\n\", \"    },\\n\", \"    {\\n\", \"      \\\"mount\\\": {\\n\", \"        \\\"device\\\": \\\"/dev/sda2\\\",\\n\", \"        \\\"format\\\": \\\"swap\\\",\\n\", \"        \\\"point\\\": \\\"none\\\",\\n\", \"        \\\"create\\\": {\\n\", \"          \\\"options\\\": [\\n\", \"            \\\"-L\\\",\\n\", \"            \\\"SWAP\\\"\\n\", \"          ]\\n\", \"        }\\n\", \"      }\\n\", \"    }\\n\", \"  ]\\n\", \"}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web1 = new MetalDevice(\"web1\", MetalDeviceArgs.builder()        \n            .hostname(\"tftest\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .hardwareReservationId(\"next-available\")\n            .storage(\"\"\"\n{\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda\",\n      \"wipeTable\": true,\n      \"partitions\": [\n        {\n          \"label\": \"BIOS\",\n          \"number\": 1,\n          \"size\": \"4096\"\n        },\n        {\n          \"label\": \"SWAP\",\n          \"number\": 2,\n          \"size\": \"3993600\"\n        },\n        {\n          \"label\": \"ROOT\",\n          \"number\": 3,\n          \"size\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"filesystems\": [\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda3\",\n        \"format\": \"ext4\",\n        \"point\": \"/\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"ROOT\"\n          ]\n        }\n      }\n    },\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda2\",\n        \"format\": \"swap\",\n        \"point\": \"none\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"SWAP\"\n          ]\n        }\n      }\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web1:\n    type: equinix:MetalDevice\n    properties:\n      hostname: tftest\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      hardwareReservationId: next-available\n      storage: |\n        {\n          \"disks\": [\n            {\n              \"device\": \"/dev/sda\",\n              \"wipeTable\": true,\n              \"partitions\": [\n                {\n                  \"label\": \"BIOS\",\n                  \"number\": 1,\n                  \"size\": \"4096\"\n                },\n                {\n                  \"label\": \"SWAP\",\n                  \"number\": 2,\n                  \"size\": \"3993600\"\n                },\n                {\n                  \"label\": \"ROOT\",\n                  \"number\": 3,\n                  \"size\": \"0\"\n                }\n              ]\n            }\n          ],\n          \"filesystems\": [\n            {\n              \"mount\": {\n                \"device\": \"/dev/sda3\",\n                \"format\": \"ext4\",\n                \"point\": \"/\",\n                \"create\": {\n                  \"options\": [\n                    \"-L\",\n                    \"ROOT\"\n                  ]\n                }\n              }\n            },\n            {\n              \"mount\": {\n                \"device\": \"/dev/sda2\",\n                \"format\": \"swap\",\n                \"point\": \"none\",\n                \"create\": {\n                  \"options\": [\n                    \"-L\",\n                    \"SWAP\"\n                  ]\n                }\n              }\n            }\n          ]\n        }\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing device ID\n\n```sh\n $ pulumi import equinix:index/metalDevice:MetalDevice equinix_metal_device {existing_device_id}\n```\n\n ",
            "properties": {
                "accessPrivateIpv4": {
                    "type": "string",
                    "description": "The ipv4 private IP assigned to the device.\n"
                },
                "accessPublicIpv4": {
                    "type": "string",
                    "description": "The ipv4 maintenance IP assigned to the device.\n"
                },
                "accessPublicIpv6": {
                    "type": "string",
                    "description": "The ipv6 maintenance IP assigned to the device.\n"
                },
                "alwaysPxe": {
                    "type": "boolean",
                    "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                },
                "billingCycle": {
                    "type": "string",
                    "description": "monthly or hourly\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the device was created.\n"
                },
                "customData": {
                    "type": "string",
                    "description": "A string of the desired Custom Data for the device.\n"
                },
                "deployedFacility": {
                    "type": "string",
                    "description": "The facility where the device is deployed.\n"
                },
                "deployedHardwareReservationId": {
                    "type": "string",
                    "description": "ID of hardware reservation where this device was deployed.\nIt is useful when using the `next-available` hardware reservation.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The device description.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.\n"
                },
                "forceDetachVolumes": {
                    "type": "boolean",
                    "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your\nnext available reservation automatically\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/MetalDeviceIpAddress:MetalDeviceIpAddress"
                    },
                    "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the device is locked.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro area for the new device. Conflicts with `facilities`.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "(Deprecated) Network type of a device, used in\n[Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this\nattribute is deprecated you should handle Network Type with one of\nequinix_metal_port,\nequinix.MetalDeviceNetworkType resources or\nequinix.MetalPort datasource.\nSee network_types guide for more info.\n",
                    "deprecationMessage": "You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/MetalDeviceNetwork:MetalDeviceNetwork"
                    },
                    "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/MetalDevicePort:MetalDevicePort"
                    },
                    "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the device\n"
                },
                "projectSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the project SSH keys which should be added to the device.\nIf you omit this, SSH keys of all the members of the parent project will be added to the device. If\nyou specify this array, only the listed project SSH keys will be added. Project SSH keys can be\ncreated with the equinix.MetalProjectSSHKey resource.\n"
                },
                "reinstall": {
                    "$ref": "#/types/equinix:index/MetalDeviceReinstall:MetalDeviceReinstall",
                    "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Root password to the server (disabled after 24 hours).\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The status of the device.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device.\n"
                },
                "terminationTime": {
                    "type": "string",
                    "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the device was updated.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string of the desired User Data for the device.\n"
                },
                "userSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.MetalSSHKey resource\n"
                },
                "waitForReservationDeprovision": {
                    "type": "boolean",
                    "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                }
            },
            "required": [
                "accessPrivateIpv4",
                "accessPublicIpv4",
                "accessPublicIpv6",
                "billingCycle",
                "created",
                "deployedFacility",
                "deployedHardwareReservationId",
                "hostname",
                "locked",
                "networks",
                "networkType",
                "operatingSystem",
                "plan",
                "ports",
                "projectId",
                "rootPassword",
                "sshKeyIds",
                "state",
                "updated"
            ],
            "inputProperties": {
                "alwaysPxe": {
                    "type": "boolean",
                    "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                },
                "billingCycle": {
                    "type": "string",
                    "description": "monthly or hourly\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "A string of the desired Custom Data for the device.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The device description.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.\n",
                    "willReplaceOnChanges": true
                },
                "forceDetachVolumes": {
                    "type": "boolean",
                    "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your\nnext available reservation automatically\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/MetalDeviceIpAddress:MetalDeviceIpAddress"
                    },
                    "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro area for the new device. Conflicts with `facilities`.\n",
                    "willReplaceOnChanges": true
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n",
                    "willReplaceOnChanges": true
                },
                "plan": {
                    "type": "string",
                    "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the device\n",
                    "willReplaceOnChanges": true
                },
                "projectSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the project SSH keys which should be added to the device.\nIf you omit this, SSH keys of all the members of the parent project will be added to the device. If\nyou specify this array, only the listed project SSH keys will be added. Project SSH keys can be\ncreated with the equinix.MetalProjectSSHKey resource.\n",
                    "willReplaceOnChanges": true
                },
                "reinstall": {
                    "$ref": "#/types/equinix:index/MetalDeviceReinstall:MetalDeviceReinstall",
                    "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device.\n"
                },
                "terminationTime": {
                    "type": "string",
                    "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string of the desired User Data for the device.\n"
                },
                "userSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.MetalSSHKey resource\n",
                    "willReplaceOnChanges": true
                },
                "waitForReservationDeprovision": {
                    "type": "boolean",
                    "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                }
            },
            "requiredInputs": [
                "operatingSystem",
                "plan",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalDevice resources.\n",
                "properties": {
                    "accessPrivateIpv4": {
                        "type": "string",
                        "description": "The ipv4 private IP assigned to the device.\n"
                    },
                    "accessPublicIpv4": {
                        "type": "string",
                        "description": "The ipv4 maintenance IP assigned to the device.\n"
                    },
                    "accessPublicIpv6": {
                        "type": "string",
                        "description": "The ipv6 maintenance IP assigned to the device.\n"
                    },
                    "alwaysPxe": {
                        "type": "boolean",
                        "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                    },
                    "billingCycle": {
                        "type": "string",
                        "description": "monthly or hourly\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the device was created.\n"
                    },
                    "customData": {
                        "type": "string",
                        "description": "A string of the desired Custom Data for the device.\n"
                    },
                    "deployedFacility": {
                        "type": "string",
                        "description": "The facility where the device is deployed.\n"
                    },
                    "deployedHardwareReservationId": {
                        "type": "string",
                        "description": "ID of hardware reservation where this device was deployed.\nIt is useful when using the `next-available` hardware reservation.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The device description.\n"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceDetachVolumes": {
                        "type": "boolean",
                        "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                    },
                    "hardwareReservationId": {
                        "type": "string",
                        "description": "The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your\nnext available reservation automatically\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/MetalDeviceIpAddress:MetalDeviceIpAddress"
                        },
                        "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                    },
                    "ipxeScriptUrl": {
                        "type": "string",
                        "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether the device is locked.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro area for the new device. Conflicts with `facilities`.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkType": {
                        "type": "string",
                        "description": "(Deprecated) Network type of a device, used in\n[Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this\nattribute is deprecated you should handle Network Type with one of\nequinix_metal_port,\nequinix.MetalDeviceNetworkType resources or\nequinix.MetalPort datasource.\nSee network_types guide for more info.\n",
                        "deprecationMessage": "You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/MetalDeviceNetwork:MetalDeviceNetwork"
                        },
                        "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                    },
                    "operatingSystem": {
                        "type": "string",
                        "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n",
                        "willReplaceOnChanges": true
                    },
                    "plan": {
                        "type": "string",
                        "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n",
                        "willReplaceOnChanges": true
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/MetalDevicePort:MetalDevicePort"
                        },
                        "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the device\n",
                        "willReplaceOnChanges": true
                    },
                    "projectSshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IDs of the project SSH keys which should be added to the device.\nIf you omit this, SSH keys of all the members of the parent project will be added to the device. If\nyou specify this array, only the listed project SSH keys will be added. Project SSH keys can be\ncreated with the equinix.MetalProjectSSHKey resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "reinstall": {
                        "$ref": "#/types/equinix:index/MetalDeviceReinstall:MetalDeviceReinstall",
                        "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Root password to the server (disabled after 24 hours).\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The status of the device.\n"
                    },
                    "storage": {
                        "type": "string",
                        "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the device.\n"
                    },
                    "terminationTime": {
                        "type": "string",
                        "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the device was updated.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A string of the desired User Data for the device.\n"
                    },
                    "userSshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.MetalSSHKey resource\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForReservationDeprovision": {
                        "type": "boolean",
                        "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalDeviceNetworkType:MetalDeviceNetworkType": {
            "description": "{{% examples %}}\n## Example Usage\n\nSee the Network Types Guide for examples of this resource and to\nlearn about the recommended `equinix.MetalPort` alternative.\n{{% /examples %}}\n\n## Import\n\nThis resource can also be imported using existing device ID\n\n```sh\n $ pulumi import equinix:index/metalDeviceNetworkType:MetalDeviceNetworkType equinix_metal_device_network_type {existing device_id}\n```\n\n ",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The ID of the device on which the network type should be set.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual`\nand `layer2-bonded`.\n"
                }
            },
            "required": [
                "deviceId",
                "type"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "The ID of the device on which the network type should be set.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual`\nand `layer2-bonded`.\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalDeviceNetworkType resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The ID of the device on which the network type should be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Network type to set. Must be one of `layer3`, `hybrid`, `layer2-individual`\nand `layer2-bonded`.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalGateway:MetalGateway": {
            "description": "Use this resource to create Metal Gateway resources in Equinix Metal.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\nconst testMetalVlan = new equinix.MetalVlan(\"testMetalVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testMetalGateway = new equinix.MetalGateway(\"testMetalGateway\", {\n    projectId: local.project_id,\n    vlanId: testMetalVlan.id,\n    privateIpv4SubnetSize: 8,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\ntest_metal_vlan = equinix.MetalVlan(\"testMetalVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_metal_gateway = equinix.MetalGateway(\"testMetalGateway\",\n    project_id=local[\"project_id\"],\n    vlan_id=test_metal_vlan.id,\n    private_ipv4_subnet_size=8)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n        var testMetalVlan = new Equinix.MetalVlan(\"testMetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"test VLAN in SV\",\n            Metro = \"sv\",\n            ProjectId = local.Project_id,\n        });\n        var testMetalGateway = new Equinix.MetalGateway(\"testMetalGateway\", new Equinix.MetalGatewayArgs\n        {\n            ProjectId = local.Project_id,\n            VlanId = testMetalVlan.Id,\n            PrivateIpv4SubnetSize = 8,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestMetalVlan, err := equinix.NewMetalVlan(ctx, \"testMetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalGateway(ctx, \"testMetalGateway\", \u0026equinix.MetalGatewayArgs{\n\t\t\tProjectId:             pulumi.Any(local.Project_id),\n\t\t\tVlanId:                testMetalVlan.ID(),\n\t\t\tPrivateIpv4SubnetSize: pulumi.Int(8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testMetalVlan = new MetalVlan(\"testMetalVlan\", MetalVlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        var testMetalGateway = new MetalGateway(\"testMetalGateway\", MetalGatewayArgs.builder()        \n            .projectId(local.project_id())\n            .vlanId(testMetalVlan.id())\n            .privateIpv4SubnetSize(8)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\n  testMetalGateway:\n    type: equinix:MetalGateway\n    properties:\n      projectId: ${local.project_id}\n      vlanId: ${testMetalVlan.id}\n      privateIpv4SubnetSize: 8\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create Metal Gateway for a VLAN and reserved IP address block\nconst testMetalVlan = new equinix.MetalVlan(\"testMetalVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testMetalReservedIPBlock = new equinix.MetalReservedIPBlock(\"testMetalReservedIPBlock\", {\n    projectId: local.project_id,\n    metro: \"sv\",\n    quantity: 2,\n});\nconst testMetalGateway = new equinix.MetalGateway(\"testMetalGateway\", {\n    projectId: local.project_id,\n    vlanId: testMetalVlan.id,\n    ipReservationId: testMetalReservedIPBlock.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN and reserved IP address block\ntest_metal_vlan = equinix.MetalVlan(\"testMetalVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_metal_reserved_ip_block = equinix.MetalReservedIPBlock(\"testMetalReservedIPBlock\",\n    project_id=local[\"project_id\"],\n    metro=\"sv\",\n    quantity=2)\ntest_metal_gateway = equinix.MetalGateway(\"testMetalGateway\",\n    project_id=local[\"project_id\"],\n    vlan_id=test_metal_vlan.id,\n    ip_reservation_id=test_metal_reserved_ip_block.id)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create Metal Gateway for a VLAN and reserved IP address block\n        var testMetalVlan = new Equinix.MetalVlan(\"testMetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"test VLAN in SV\",\n            Metro = \"sv\",\n            ProjectId = local.Project_id,\n        });\n        var testMetalReservedIPBlock = new Equinix.MetalReservedIPBlock(\"testMetalReservedIPBlock\", new Equinix.MetalReservedIPBlockArgs\n        {\n            ProjectId = local.Project_id,\n            Metro = \"sv\",\n            Quantity = 2,\n        });\n        var testMetalGateway = new Equinix.MetalGateway(\"testMetalGateway\", new Equinix.MetalGatewayArgs\n        {\n            ProjectId = local.Project_id,\n            VlanId = testMetalVlan.Id,\n            IpReservationId = testMetalReservedIPBlock.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestMetalVlan, err := equinix.NewMetalVlan(ctx, \"testMetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestMetalReservedIPBlock, err := equinix.NewMetalReservedIPBlock(ctx, \"testMetalReservedIPBlock\", \u0026equinix.MetalReservedIPBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tQuantity:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalGateway(ctx, \"testMetalGateway\", \u0026equinix.MetalGatewayArgs{\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tVlanId:          testMetalVlan.ID(),\n\t\t\tIpReservationId: testMetalReservedIPBlock.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testMetalVlan = new MetalVlan(\"testMetalVlan\", MetalVlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        var testMetalReservedIPBlock = new MetalReservedIPBlock(\"testMetalReservedIPBlock\", MetalReservedIPBlockArgs.builder()        \n            .projectId(local.project_id())\n            .metro(\"sv\")\n            .quantity(2)\n            .build());\n\n        var testMetalGateway = new MetalGateway(\"testMetalGateway\", MetalGatewayArgs.builder()        \n            .projectId(local.project_id())\n            .vlanId(testMetalVlan.id())\n            .ipReservationId(testMetalReservedIPBlock.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\n  testMetalReservedIPBlock:\n    type: equinix:MetalReservedIPBlock\n    properties:\n      projectId: ${local.project_id}\n      metro: sv\n      quantity: 2\n  testMetalGateway:\n    type: equinix:MetalGateway\n    properties:\n      projectId: ${local.project_id}\n      vlanId: ${testMetalVlan.id}\n      ipReservationId: ${testMetalReservedIPBlock.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "ipReservationId": {
                    "type": "string",
                    "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n"
                },
                "privateIpv4SubnetSize": {
                    "type": "integer",
                    "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the gateway is scoped to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Status of the gateway resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN where the gateway is scoped to.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF associated with the IP Reservation\n"
                }
            },
            "required": [
                "privateIpv4SubnetSize",
                "projectId",
                "state",
                "vlanId",
                "vrfId"
            ],
            "inputProperties": {
                "ipReservationId": {
                    "type": "string",
                    "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n",
                    "willReplaceOnChanges": true
                },
                "privateIpv4SubnetSize": {
                    "type": "integer",
                    "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the gateway is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN where the gateway is scoped to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "vlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalGateway resources.\n",
                "properties": {
                    "ipReservationId": {
                        "type": "string",
                        "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateIpv4SubnetSize": {
                        "type": "integer",
                        "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the gateway is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the gateway resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN where the gateway is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF associated with the IP Reservation\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalIPAttachment:MetalIPAttachment": {
            "description": "Provides a resource to attach elastic IP subnets to devices.\n\nTo attach an IP subnet from a reserved block to a provisioned device, you must derive a subnet CIDR\nbelonging to one of your reserved blocks in the same project and facility as the target device.\n\nFor example, you have reserved IPv4 address block `147.229.10.152/30`, you can choose to assign\neither the whole block as one subnet to a device; or 2 subnets with CIDRs `147.229.10.152/31` and\n`147.229.10.154/31`; or 4 subnets with mask prefix length `32`. More about the elastic IP subnets\nis [here](https://metal.equinix.com/developers/docs/networking/elastic-ips/).\n\nDevice and reserved block must be in the same facility.\n",
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressFamily": {
                    "type": "integer",
                    "description": "Address family as integer. One of `4` or `6`.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Length of CIDR prefix of the subnet as integer.\n"
                },
                "cidrNotation": {
                    "type": "string",
                    "description": "CIDR notation of subnet from block reserved in the same project\nand facility as the device.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to which to assign the subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "IP address of gateway for the subnet.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Flag indicating whether IP block is global, i.e. assignable in any location\n"
                },
                "manageable": {
                    "type": "boolean"
                },
                "management": {
                    "type": "boolean"
                },
                "netmask": {
                    "type": "string",
                    "description": "Subnet mask in decimal notation, e.g., `255.255.255.0`.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Subnet network address.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Boolean flag whether subnet is reachable from the Internet.\n"
                },
                "vrfId": {
                    "type": "string"
                }
            },
            "required": [
                "address",
                "addressFamily",
                "cidr",
                "cidrNotation",
                "deviceId",
                "gateway",
                "global",
                "manageable",
                "management",
                "netmask",
                "network",
                "public",
                "vrfId"
            ],
            "inputProperties": {
                "cidrNotation": {
                    "type": "string",
                    "description": "CIDR notation of subnet from block reserved in the same project\nand facility as the device.\n",
                    "willReplaceOnChanges": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to which to assign the subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrNotation",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalIPAttachment resources.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer",
                        "description": "Address family as integer. One of `4` or `6`.\n"
                    },
                    "cidr": {
                        "type": "integer",
                        "description": "Length of CIDR prefix of the subnet as integer.\n"
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "CIDR notation of subnet from block reserved in the same project\nand facility as the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device to which to assign the subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "IP address of gateway for the subnet.\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Flag indicating whether IP block is global, i.e. assignable in any location\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Subnet mask in decimal notation, e.g., `255.255.255.0`.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "Subnet network address.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Boolean flag whether subnet is reachable from the Internet.\n"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalOrganization:MetalOrganization": {
            "description": "Provides a resource to manage organization resource in Equinix Metal.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create a new Organization\nconst tfOrganization1 = new equinix.MetalOrganization(\"tf_organization_1\", {\n    description: \"quux\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new Organization\ntf_organization1 = equinix.MetalOrganization(\"tfOrganization1\", description=\"quux\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Organization\n        var tfOrganization1 = new Equinix.MetalOrganization(\"tfOrganization1\", new Equinix.MetalOrganizationArgs\n        {\n            Description = \"quux\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalOrganization(ctx, \"tfOrganization1\", \u0026equinix.MetalOrganizationArgs{\n\t\t\tDescription: pulumi.String(\"quux\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfOrganization1 = new MetalOrganization(\"tfOrganization1\", MetalOrganizationArgs.builder()        \n            .description(\"quux\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfOrganization1:\n    type: equinix:MetalOrganization\n    properties:\n      description: quux\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing organization ID\n\n```sh\n $ pulumi import equinix:index/metalOrganization:MetalOrganization equinix_metal_organization {existing_organization_id}\n```\n\n ",
            "properties": {
                "address": {
                    "$ref": "#/types/equinix:index/MetalOrganizationAddress:MetalOrganizationAddress",
                    "description": "Postal address.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the organization was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Logo URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter handle.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the organization was updated.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website link.\n"
                }
            },
            "required": [
                "address",
                "created",
                "name",
                "updated"
            ],
            "inputProperties": {
                "address": {
                    "$ref": "#/types/equinix:index/MetalOrganizationAddress:MetalOrganizationAddress",
                    "description": "Postal address.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Logo URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter handle.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website link.\n"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalOrganization resources.\n",
                "properties": {
                    "address": {
                        "$ref": "#/types/equinix:index/MetalOrganizationAddress:MetalOrganizationAddress",
                        "description": "Postal address.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the organization was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Logo URL.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Organization.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter handle.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the organization was updated.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website link.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalPort:MetalPort": {
            "description": "{{% examples %}}\n## Example Usage\n\nSee the Network Types Guide for examples of this resource.\n{{% /examples %}}",
            "properties": {
                "bondId": {
                    "type": "string",
                    "description": "UUID of the bond port.\n"
                },
                "bondName": {
                    "type": "string",
                    "description": "Name of the bond port.\n"
                },
                "bonded": {
                    "type": "boolean",
                    "description": "Whether the port should be bonded.\n"
                },
                "disbondSupported": {
                    "type": "boolean",
                    "description": "Flag indicating whether the port can be removed from a bond.\n"
                },
                "layer2": {
                    "type": "boolean",
                    "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address of the port.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port, e.g. `bond0` or `eth0`.\n"
                },
                "nativeVlanId": {
                    "type": "string",
                    "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter), valid only for physical (non-bond) ports.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This\nattribute is only set on bond ports.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "ID of the port to read.\n"
                },
                "resetOnDelete": {
                    "type": "boolean",
                    "description": "Behavioral setting to reset the port to default settings. For a\nbond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and\nvlans attached.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                },
                "vxlanIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                }
            },
            "required": [
                "bondId",
                "bondName",
                "bonded",
                "disbondSupported",
                "mac",
                "name",
                "networkType",
                "portId",
                "type",
                "vlanIds",
                "vxlanIds"
            ],
            "inputProperties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether the port should be bonded.\n"
                },
                "layer2": {
                    "type": "boolean",
                    "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                },
                "nativeVlanId": {
                    "type": "string",
                    "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter), valid only for physical (non-bond) ports.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "ID of the port to read.\n",
                    "willReplaceOnChanges": true
                },
                "resetOnDelete": {
                    "type": "boolean",
                    "description": "Behavioral setting to reset the port to default settings. For a\nbond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and\nvlans attached.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                },
                "vxlanIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                }
            },
            "requiredInputs": [
                "bonded",
                "portId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalPort resources.\n",
                "properties": {
                    "bondId": {
                        "type": "string",
                        "description": "UUID of the bond port.\n"
                    },
                    "bondName": {
                        "type": "string",
                        "description": "Name of the bond port.\n"
                    },
                    "bonded": {
                        "type": "boolean",
                        "description": "Whether the port should be bonded.\n"
                    },
                    "disbondSupported": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port can be removed from a bond.\n"
                    },
                    "layer2": {
                        "type": "boolean",
                        "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the port.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the port, e.g. `bond0` or `eth0`.\n"
                    },
                    "nativeVlanId": {
                        "type": "string",
                        "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter), valid only for physical (non-bond) ports.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This\nattribute is only set on bond ports.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "ID of the port to read.\n",
                        "willReplaceOnChanges": true
                    },
                    "resetOnDelete": {
                        "type": "boolean",
                        "description": "Behavioral setting to reset the port to default settings. For a\nbond port it means layer3 without vlans attached, eth ports will be bonded without native vlan and\nvlans attached.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports.\n"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                    },
                    "vxlanIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalPortVlanAttachment:MetalPortVlanAttachment": {
            "description": "Provides a resource to attach device ports to VLANs.\n\nDevice and VLAN must be in the same facility.\n\nIf you need this resource to add the port back to bond on removal, set `force_bond = true`.\n\nTo learn more about Layer 2 networking in Equinix Metal, refer to\n\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2/\u003e\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2-configs/\u003e\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Hybrid network type\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst testMetalVlan = new equinix.MetalVlan(\"testMetalVlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"ny5\",\n    projectId: local.project_id,\n});\nconst testMetalDevice = new equinix.MetalDevice(\"testMetalDevice\", {\n    hostname: \"test\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\nconst testMetalDeviceNetworkType = new equinix.MetalDeviceNetworkType(\"testMetalDeviceNetworkType\", {\n    deviceId: testMetalDevice.id,\n    type: \"hybrid\",\n});\nconst testMetalPortVlanAttachment = new equinix.MetalPortVlanAttachment(\"testMetalPortVlanAttachment\", {\n    deviceId: testMetalDeviceNetworkType.id,\n    portName: \"eth1\",\n    vlanVnid: testMetalVlan.vxlan,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest_metal_vlan = equinix.MetalVlan(\"testMetalVlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"ny5\",\n    project_id=local[\"project_id\"])\ntest_metal_device = equinix.MetalDevice(\"testMetalDevice\",\n    hostname=\"test\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\ntest_metal_device_network_type = equinix.MetalDeviceNetworkType(\"testMetalDeviceNetworkType\",\n    device_id=test_metal_device.id,\n    type=\"hybrid\")\ntest_metal_port_vlan_attachment = equinix.MetalPortVlanAttachment(\"testMetalPortVlanAttachment\",\n    device_id=test_metal_device_network_type.id,\n    port_name=\"eth1\",\n    vlan_vnid=test_metal_vlan.vxlan)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testMetalVlan = new Equinix.MetalVlan(\"testMetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"VLAN in New Jersey\",\n            Facility = \"ny5\",\n            ProjectId = local.Project_id,\n        });\n        var testMetalDevice = new Equinix.MetalDevice(\"testMetalDevice\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"test\",\n            Plan = \"c3.small.x86\",\n            Facilities = \n            {\n                \"ny5\",\n            },\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n        });\n        var testMetalDeviceNetworkType = new Equinix.MetalDeviceNetworkType(\"testMetalDeviceNetworkType\", new Equinix.MetalDeviceNetworkTypeArgs\n        {\n            DeviceId = testMetalDevice.Id,\n            Type = \"hybrid\",\n        });\n        var testMetalPortVlanAttachment = new Equinix.MetalPortVlanAttachment(\"testMetalPortVlanAttachment\", new Equinix.MetalPortVlanAttachmentArgs\n        {\n            DeviceId = testMetalDeviceNetworkType.Id,\n            PortName = \"eth1\",\n            VlanVnid = testMetalVlan.Vxlan,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestMetalVlan, err := equinix.NewMetalVlan(ctx, \"testMetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"ny5\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestMetalDevice, err := equinix.NewMetalDevice(ctx, \"testMetalDevice\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"test\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestMetalDeviceNetworkType, err := equinix.NewMetalDeviceNetworkType(ctx, \"testMetalDeviceNetworkType\", \u0026equinix.MetalDeviceNetworkTypeArgs{\n\t\t\tDeviceId: testMetalDevice.ID(),\n\t\t\tType:     pulumi.String(\"hybrid\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalPortVlanAttachment(ctx, \"testMetalPortVlanAttachment\", \u0026equinix.MetalPortVlanAttachmentArgs{\n\t\t\tDeviceId: testMetalDeviceNetworkType.ID(),\n\t\t\tPortName: pulumi.String(\"eth1\"),\n\t\t\tVlanVnid: testMetalVlan.Vxlan,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testMetalVlan = new MetalVlan(\"testMetalVlan\", MetalVlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"ny5\")\n            .projectId(local.project_id())\n            .build());\n\n        var testMetalDevice = new MetalDevice(\"testMetalDevice\", MetalDeviceArgs.builder()        \n            .hostname(\"test\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n        var testMetalDeviceNetworkType = new MetalDeviceNetworkType(\"testMetalDeviceNetworkType\", MetalDeviceNetworkTypeArgs.builder()        \n            .deviceId(testMetalDevice.id())\n            .type(\"hybrid\")\n            .build());\n\n        var testMetalPortVlanAttachment = new MetalPortVlanAttachment(\"testMetalPortVlanAttachment\", MetalPortVlanAttachmentArgs.builder()        \n            .deviceId(testMetalDeviceNetworkType.id())\n            .portName(\"eth1\")\n            .vlanVnid(testMetalVlan.vxlan())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: VLAN in New Jersey\n      facility: ny5\n      projectId: ${local.project_id}\n  testMetalDevice:\n    type: equinix:MetalDevice\n    properties:\n      hostname: test\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n  testMetalDeviceNetworkType:\n    type: equinix:MetalDeviceNetworkType\n    properties:\n      deviceId: ${testMetalDevice.id}\n      type: hybrid\n  testMetalPortVlanAttachment:\n    type: equinix:MetalPortVlanAttachment\n    properties:\n      deviceId: ${testMetalDeviceNetworkType.id}\n      portName: eth1\n      vlanVnid: ${testMetalVlan.vxlan}\n```\n{{% /example %}}\n{{% example %}}\n### Layer 2 network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst testMetalDevice = new equinix.MetalDevice(\"testMetalDevice\", {\n    hostname: \"test\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\nconst testMetalDeviceNetworkType = new equinix.MetalDeviceNetworkType(\"testMetalDeviceNetworkType\", {\n    deviceId: testMetalDevice.id,\n    type: \"layer2-individual\",\n});\nconst test1MetalVlan = new equinix.MetalVlan(\"test1MetalVlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"ny5\",\n    projectId: local.project_id,\n});\nconst test2MetalVlan = new equinix.MetalVlan(\"test2MetalVlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"ny5\",\n    projectId: local.project_id,\n});\nconst test1MetalPortVlanAttachment = new equinix.MetalPortVlanAttachment(\"test1MetalPortVlanAttachment\", {\n    deviceId: testMetalDeviceNetworkType.id,\n    vlanVnid: test1MetalVlan.vxlan,\n    portName: \"eth1\",\n});\nconst test2MetalPortVlanAttachment = new equinix.MetalPortVlanAttachment(\"test2MetalPortVlanAttachment\", {\n    deviceId: testMetalDeviceNetworkType.id,\n    vlanVnid: test2MetalVlan.vxlan,\n    portName: \"eth1\",\n    native: true,\n}, {\n    dependsOn: [\"equinix_metal_port_vlan_attachment.test1\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest_metal_device = equinix.MetalDevice(\"testMetalDevice\",\n    hostname=\"test\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\ntest_metal_device_network_type = equinix.MetalDeviceNetworkType(\"testMetalDeviceNetworkType\",\n    device_id=test_metal_device.id,\n    type=\"layer2-individual\")\ntest1_metal_vlan = equinix.MetalVlan(\"test1MetalVlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"ny5\",\n    project_id=local[\"project_id\"])\ntest2_metal_vlan = equinix.MetalVlan(\"test2MetalVlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"ny5\",\n    project_id=local[\"project_id\"])\ntest1_metal_port_vlan_attachment = equinix.MetalPortVlanAttachment(\"test1MetalPortVlanAttachment\",\n    device_id=test_metal_device_network_type.id,\n    vlan_vnid=test1_metal_vlan.vxlan,\n    port_name=\"eth1\")\ntest2_metal_port_vlan_attachment = equinix.MetalPortVlanAttachment(\"test2MetalPortVlanAttachment\",\n    device_id=test_metal_device_network_type.id,\n    vlan_vnid=test2_metal_vlan.vxlan,\n    port_name=\"eth1\",\n    native=True,\n    opts=pulumi.ResourceOptions(depends_on=[\"equinix_metal_port_vlan_attachment.test1\"]))\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testMetalDevice = new Equinix.MetalDevice(\"testMetalDevice\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"test\",\n            Plan = \"c3.small.x86\",\n            Facilities = \n            {\n                \"ny5\",\n            },\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n        });\n        var testMetalDeviceNetworkType = new Equinix.MetalDeviceNetworkType(\"testMetalDeviceNetworkType\", new Equinix.MetalDeviceNetworkTypeArgs\n        {\n            DeviceId = testMetalDevice.Id,\n            Type = \"layer2-individual\",\n        });\n        var test1MetalVlan = new Equinix.MetalVlan(\"test1MetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"VLAN in New Jersey\",\n            Facility = \"ny5\",\n            ProjectId = local.Project_id,\n        });\n        var test2MetalVlan = new Equinix.MetalVlan(\"test2MetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"VLAN in New Jersey\",\n            Facility = \"ny5\",\n            ProjectId = local.Project_id,\n        });\n        var test1MetalPortVlanAttachment = new Equinix.MetalPortVlanAttachment(\"test1MetalPortVlanAttachment\", new Equinix.MetalPortVlanAttachmentArgs\n        {\n            DeviceId = testMetalDeviceNetworkType.Id,\n            VlanVnid = test1MetalVlan.Vxlan,\n            PortName = \"eth1\",\n        });\n        var test2MetalPortVlanAttachment = new Equinix.MetalPortVlanAttachment(\"test2MetalPortVlanAttachment\", new Equinix.MetalPortVlanAttachmentArgs\n        {\n            DeviceId = testMetalDeviceNetworkType.Id,\n            VlanVnid = test2MetalVlan.Vxlan,\n            PortName = \"eth1\",\n            Native = true,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                \"equinix_metal_port_vlan_attachment.test1\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestMetalDevice, err := equinix.NewMetalDevice(ctx, \"testMetalDevice\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"test\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestMetalDeviceNetworkType, err := equinix.NewMetalDeviceNetworkType(ctx, \"testMetalDeviceNetworkType\", \u0026equinix.MetalDeviceNetworkTypeArgs{\n\t\t\tDeviceId: testMetalDevice.ID(),\n\t\t\tType:     pulumi.String(\"layer2-individual\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest1MetalVlan, err := equinix.NewMetalVlan(ctx, \"test1MetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"ny5\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest2MetalVlan, err := equinix.NewMetalVlan(ctx, \"test2MetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"ny5\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalPortVlanAttachment(ctx, \"test1MetalPortVlanAttachment\", \u0026equinix.MetalPortVlanAttachmentArgs{\n\t\t\tDeviceId: testMetalDeviceNetworkType.ID(),\n\t\t\tVlanVnid: test1MetalVlan.Vxlan,\n\t\t\tPortName: pulumi.String(\"eth1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalPortVlanAttachment(ctx, \"test2MetalPortVlanAttachment\", \u0026equinix.MetalPortVlanAttachmentArgs{\n\t\t\tDeviceId: testMetalDeviceNetworkType.ID(),\n\t\t\tVlanVnid: test2MetalVlan.Vxlan,\n\t\t\tPortName: pulumi.String(\"eth1\"),\n\t\t\tNative:   pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpulumi.Resource(\"equinix_metal_port_vlan_attachment.test1\"),\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.resources.CustomResourceOptions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testMetalDevice = new MetalDevice(\"testMetalDevice\", MetalDeviceArgs.builder()        \n            .hostname(\"test\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n        var testMetalDeviceNetworkType = new MetalDeviceNetworkType(\"testMetalDeviceNetworkType\", MetalDeviceNetworkTypeArgs.builder()        \n            .deviceId(testMetalDevice.id())\n            .type(\"layer2-individual\")\n            .build());\n\n        var test1MetalVlan = new MetalVlan(\"test1MetalVlan\", MetalVlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"ny5\")\n            .projectId(local.project_id())\n            .build());\n\n        var test2MetalVlan = new MetalVlan(\"test2MetalVlan\", MetalVlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"ny5\")\n            .projectId(local.project_id())\n            .build());\n\n        var test1MetalPortVlanAttachment = new MetalPortVlanAttachment(\"test1MetalPortVlanAttachment\", MetalPortVlanAttachmentArgs.builder()        \n            .deviceId(testMetalDeviceNetworkType.id())\n            .vlanVnid(test1MetalVlan.vxlan())\n            .portName(\"eth1\")\n            .build());\n\n        var test2MetalPortVlanAttachment = new MetalPortVlanAttachment(\"test2MetalPortVlanAttachment\", MetalPortVlanAttachmentArgs.builder()        \n            .deviceId(testMetalDeviceNetworkType.id())\n            .vlanVnid(test2MetalVlan.vxlan())\n            .portName(\"eth1\")\n            .native_(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(\"equinix_metal_port_vlan_attachment.test1\")\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalDevice:\n    type: equinix:MetalDevice\n    properties:\n      hostname: test\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n  testMetalDeviceNetworkType:\n    type: equinix:MetalDeviceNetworkType\n    properties:\n      deviceId: ${testMetalDevice.id}\n      type: layer2-individual\n  test1MetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: VLAN in New Jersey\n      facility: ny5\n      projectId: ${local.project_id}\n  test2MetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: VLAN in New Jersey\n      facility: ny5\n      projectId: ${local.project_id}\n  test1MetalPortVlanAttachment:\n    type: equinix:MetalPortVlanAttachment\n    properties:\n      deviceId: ${testMetalDeviceNetworkType.id}\n      vlanVnid: ${test1MetalVlan.vxlan}\n      portName: eth1\n  test2MetalPortVlanAttachment:\n    type: equinix:MetalPortVlanAttachment\n    properties:\n      deviceId: ${testMetalDeviceNetworkType.id}\n      vlanVnid: ${test2MetalVlan.vxlan}\n      portName: eth1\n      native: true\n    options:\n      dependson:\n        - equinix_metal_port_vlan_attachment.test1\n```\n{{% /example %}}\n{{% /examples %}}\n## Attribute Referece\n\nIn addition to all arguments above, the following attributes are exported:\n\n* `id` - UUID of device port used in the assignment.\n* `vlan_id` - UUID of VLAN API resource.\n* `port_id` - UUID of device port.\n",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to be assigned to the VLAN.\n"
                },
                "forceBond": {
                    "type": "boolean",
                    "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n"
                },
                "native": {
                    "type": "boolean",
                    "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.MetalPortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of device port\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Name of network port to be assigned to the VLAN.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of VLAN API resource\n"
                },
                "vlanVnid": {
                    "type": "integer",
                    "description": "VXLAN Network Identifier.\n"
                }
            },
            "required": [
                "deviceId",
                "portId",
                "portName",
                "vlanId",
                "vlanVnid"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to be assigned to the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "forceBond": {
                    "type": "boolean",
                    "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n",
                    "willReplaceOnChanges": true
                },
                "native": {
                    "type": "boolean",
                    "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.MetalPortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Name of network port to be assigned to the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "vlanVnid": {
                    "type": "integer",
                    "description": "VXLAN Network Identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deviceId",
                "portName",
                "vlanVnid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalPortVlanAttachment resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device to be assigned to the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceBond": {
                        "type": "boolean",
                        "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "native": {
                        "type": "boolean",
                        "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.MetalPortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of device port\n"
                    },
                    "portName": {
                        "type": "string",
                        "description": "Name of network port to be assigned to the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of VLAN API resource\n"
                    },
                    "vlanVnid": {
                        "type": "integer",
                        "description": "VXLAN Network Identifier.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalProject:MetalProject": {
            "description": "\n\n\n## Import\n\nThis resource can be imported using an existing project ID\n\n```sh\n $ pulumi import equinix:index/metalProject:MetalProject equinix_metal_project {existing_project_id}\n```\n\n ",
            "properties": {
                "backendTransfer": {
                    "type": "boolean",
                    "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                },
                "bgpConfig": {
                    "$ref": "#/types/equinix:index/MetalProjectBgpConfig:MetalProjectBgpConfig",
                    "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the project was created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be create under your the default organization of your account.\n"
                },
                "paymentMethodId": {
                    "type": "string",
                    "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the project was updated.\n"
                }
            },
            "required": [
                "created",
                "name",
                "organizationId",
                "paymentMethodId",
                "updated"
            ],
            "inputProperties": {
                "backendTransfer": {
                    "type": "boolean",
                    "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                },
                "bgpConfig": {
                    "$ref": "#/types/equinix:index/MetalProjectBgpConfig:MetalProjectBgpConfig",
                    "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be create under your the default organization of your account.\n",
                    "willReplaceOnChanges": true
                },
                "paymentMethodId": {
                    "type": "string",
                    "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalProject resources.\n",
                "properties": {
                    "backendTransfer": {
                        "type": "boolean",
                        "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                    },
                    "bgpConfig": {
                        "$ref": "#/types/equinix:index/MetalProjectBgpConfig:MetalProjectBgpConfig",
                        "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the project was created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be create under your the default organization of your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "paymentMethodId": {
                        "type": "string",
                        "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the project was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalProjectAPIKey:MetalProjectAPIKey": {
            "description": "Use this resource to create Metal Project API Key resources in Equinix Metal. Project API keys can\nbe used to create and read resources in a single project. Each API key contains a token which can\nbe used for authentication in Equinix Metal HTTP API (in HTTP request header `X-Auth-Token`).\n\nRead-only keys only allow to list and view existing resources, read-write keys can also be used to\ncreate resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create a new read-only API key in existing project\nconst test = new equinix.MetalProjectAPIKey(\"test\", {\n    projectId: local.existing_project_id,\n    description: \"Read-only key scoped to a projct\",\n    readOnly: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new read-only API key in existing project\ntest = equinix.MetalProjectAPIKey(\"test\",\n    project_id=local[\"existing_project_id\"],\n    description=\"Read-only key scoped to a projct\",\n    read_only=True)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new read-only API key in existing project\n        var test = new Equinix.MetalProjectAPIKey(\"test\", new Equinix.MetalProjectAPIKeyArgs\n        {\n            ProjectId = local.Existing_project_id,\n            Description = \"Read-only key scoped to a projct\",\n            ReadOnly = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalProjectAPIKey(ctx, \"test\", \u0026equinix.MetalProjectAPIKeyArgs{\n\t\t\tProjectId:   pulumi.Any(local.Existing_project_id),\n\t\t\tDescription: pulumi.String(\"Read-only key scoped to a projct\"),\n\t\t\tReadOnly:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new MetalProjectAPIKey(\"test\", MetalProjectAPIKeyArgs.builder()        \n            .projectId(local.existing_project_id())\n            .description(\"Read-only key scoped to a projct\")\n            .readOnly(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: equinix:MetalProjectAPIKey\n    properties:\n      projectId: ${local.existing_project_id}\n      description: Read-only key scoped to a projct\n      readOnly: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the API key is scoped to.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n"
                },
                "token": {
                    "type": "string",
                    "description": "API token which can be used in Equinix Metal API clients\n"
                }
            },
            "required": [
                "description",
                "projectId",
                "readOnly",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the API key is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "projectId",
                "readOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalProjectAPIKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the API key is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag indicating whether the API key shoud be read-only\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "API token which can be used in Equinix Metal API clients\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalProjectSSHKey:MetalProjectSSHKey": {
            "description": "Provides an Equinix Metal project SSH key resource to manage project-specific SSH keys.\nProject SSH keys will only be populated onto servers that belong to that project, in contrast to\nUser SSH Keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst testMetalProjectSSHKey = new equinix.MetalProjectSSHKey(\"testMetalProjectSSHKey\", {\n    publicKey: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\",\n    projectId: projectId,\n});\nconst testMetalDevice = new equinix.MetalDevice(\"testMetalDevice\", {\n    hostname: \"test\",\n    plan: \"c3.medium.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectSshKeyIds: [testMetalProjectSSHKey.id],\n    projectId: projectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest_metal_project_ssh_key = equinix.MetalProjectSSHKey(\"testMetalProjectSSHKey\",\n    public_key=\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\",\n    project_id=project_id)\ntest_metal_device = equinix.MetalDevice(\"testMetalDevice\",\n    hostname=\"test\",\n    plan=\"c3.medium.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_ssh_key_ids=[test_metal_project_ssh_key.id],\n    project_id=project_id)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var projectId = \"\u003cUUID_of_your_project\u003e\";\n        var testMetalProjectSSHKey = new Equinix.MetalProjectSSHKey(\"testMetalProjectSSHKey\", new Equinix.MetalProjectSSHKeyArgs\n        {\n            PublicKey = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\",\n            ProjectId = projectId,\n        });\n        var testMetalDevice = new Equinix.MetalDevice(\"testMetalDevice\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"test\",\n            Plan = \"c3.medium.x86\",\n            Facilities = \n            {\n                \"ny5\",\n            },\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectSshKeyIds = \n            {\n                testMetalProjectSSHKey.Id,\n            },\n            ProjectId = projectId,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttestMetalProjectSSHKey, err := equinix.NewMetalProjectSSHKey(ctx, \"testMetalProjectSSHKey\", \u0026equinix.MetalProjectSSHKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\"),\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalDevice(ctx, \"testMetalDevice\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"test\"),\n\t\t\tPlan:     pulumi.String(\"c3.medium.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectSshKeyIds: pulumi.StringArray{\n\t\t\t\ttestMetalProjectSSHKey.ID(),\n\t\t\t},\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        var testMetalProjectSSHKey = new MetalProjectSSHKey(\"testMetalProjectSSHKey\", MetalProjectSSHKeyArgs.builder()        \n            .publicKey(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\")\n            .projectId(projectId)\n            .build());\n\n        var testMetalDevice = new MetalDevice(\"testMetalDevice\", MetalDeviceArgs.builder()        \n            .hostname(\"test\")\n            .plan(\"c3.medium.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectSshKeyIds(testMetalProjectSSHKey.id())\n            .projectId(projectId)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalProjectSSHKey:\n    type: equinix:MetalProjectSSHKey\n    properties:\n      publicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\n      projectId: ${projectId}\n  testMetalDevice:\n    type: equinix:MetalDevice\n    properties:\n      hostname: test\n      plan: c3.medium.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectSshKeyIds:\n        - ${testMetalProjectSSHKey.id}\n      projectId: ${projectId}\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the SSH key was created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification.\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of parent project (same as project_id).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of parent project.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the SSH key was updated.\n"
                }
            },
            "required": [
                "created",
                "fingerprint",
                "name",
                "ownerId",
                "projectId",
                "publicKey",
                "updated"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of parent project.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalProjectSSHKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key for identification.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of parent project (same as project_id).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of parent project.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it can be read using the file interpolation function.\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalReservedIPBlock:MetalReservedIPBlock": {
            "description": "Provides a resource to create and manage blocks of reserved IP addresses in a project.\n\nWhen a user provisions first device in a facility, Equinix Metal API automatically allocates IPv6/56 and private IPv4/25 blocks.\nThe new device then gets IPv6 and private IPv4 addresses from those block. It also gets a public IPv4/31 address.\nEvery new device in the project and facility will automatically get IPv6 and private IPv4 addresses from these pre-allocated blocks.\nThe IPv6 and private IPv4 blocks can't be created, only imported. With this resource, it's possible to create either public IPv4 blocks or global IPv4 blocks.\n\nPublic blocks are allocated in a facility. Addresses from public blocks can only be assigned to devices in the facility. Public blocks can have mask from /24 (256 addresses) to /32 (1 address). If you create public block with this resource, you must fill the facility argument.\n\nAddresses from global blocks can be assigned in any facility. Global blocks can have mask from /30 (4 addresses), to /32 (1 address). If you create global block with this resource, you must specify type = \"global_ipv4\" and you must omit the facility argument.\n\nOnce IP block is allocated or imported, an address from it can be assigned to device with the `equinix.MetalIPAttachment` resource.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nAllocate reserved IP blocks:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\nconst twoElasticAddresses = new equinix.MetalReservedIPBlock(\"twoElasticAddresses\", {\n    projectId: local.project_id,\n    facility: \"sv15\",\n    quantity: 2,\n});\n// Allocate 1 floating IP in Sillicon Valley (sv) metro\nconst testMetalReservedIPBlock = new equinix.MetalReservedIPBlock(\"testMetalReservedIPBlock\", {\n    projectId: local.project_id,\n    type: \"public_ipv4\",\n    metro: \"sv\",\n    quantity: 1,\n});\n// Allocate 1 global floating IP, which can be assigned to device in any facility\nconst testIndex_metalReservedIPBlockMetalReservedIPBlock = new equinix.MetalReservedIPBlock(\"testIndex/metalReservedIPBlockMetalReservedIPBlock\", {\n    projectId: local.project_id,\n    type: \"global_ipv4\",\n    quantity: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\ntwo_elastic_addresses = equinix.MetalReservedIPBlock(\"twoElasticAddresses\",\n    project_id=local[\"project_id\"],\n    facility=\"sv15\",\n    quantity=2)\n# Allocate 1 floating IP in Sillicon Valley (sv) metro\ntest_metal_reserved_ip_block = equinix.MetalReservedIPBlock(\"testMetalReservedIPBlock\",\n    project_id=local[\"project_id\"],\n    type=\"public_ipv4\",\n    metro=\"sv\",\n    quantity=1)\n# Allocate 1 global floating IP, which can be assigned to device in any facility\ntest_index_metal_reserved_ip_block_metal_reserved_ip_block = equinix.MetalReservedIPBlock(\"testIndex/metalReservedIPBlockMetalReservedIPBlock\",\n    project_id=local[\"project_id\"],\n    type=\"global_ipv4\",\n    quantity=1)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\n        var twoElasticAddresses = new Equinix.MetalReservedIPBlock(\"twoElasticAddresses\", new Equinix.MetalReservedIPBlockArgs\n        {\n            ProjectId = local.Project_id,\n            Facility = \"sv15\",\n            Quantity = 2,\n        });\n        // Allocate 1 floating IP in Sillicon Valley (sv) metro\n        var testMetalReservedIPBlock = new Equinix.MetalReservedIPBlock(\"testMetalReservedIPBlock\", new Equinix.MetalReservedIPBlockArgs\n        {\n            ProjectId = local.Project_id,\n            Type = \"public_ipv4\",\n            Metro = \"sv\",\n            Quantity = 1,\n        });\n        // Allocate 1 global floating IP, which can be assigned to device in any facility\n        var testIndex_metalReservedIPBlockMetalReservedIPBlock = new Equinix.MetalReservedIPBlock(\"testIndex/metalReservedIPBlockMetalReservedIPBlock\", new Equinix.MetalReservedIPBlockArgs\n        {\n            ProjectId = local.Project_id,\n            Type = \"global_ipv4\",\n            Quantity = 1,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalReservedIPBlock(ctx, \"twoElasticAddresses\", \u0026equinix.MetalReservedIPBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tFacility:  pulumi.String(\"sv15\"),\n\t\t\tQuantity:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalReservedIPBlock(ctx, \"testMetalReservedIPBlock\", \u0026equinix.MetalReservedIPBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tType:      pulumi.String(\"public_ipv4\"),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tQuantity:  pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalReservedIPBlock(ctx, \"testIndex/metalReservedIPBlockMetalReservedIPBlock\", \u0026equinix.MetalReservedIPBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tType:      pulumi.String(\"global_ipv4\"),\n\t\t\tQuantity:  pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var twoElasticAddresses = new MetalReservedIPBlock(\"twoElasticAddresses\", MetalReservedIPBlockArgs.builder()        \n            .projectId(local.project_id())\n            .facility(\"sv15\")\n            .quantity(2)\n            .build());\n\n        var testMetalReservedIPBlock = new MetalReservedIPBlock(\"testMetalReservedIPBlock\", MetalReservedIPBlockArgs.builder()        \n            .projectId(local.project_id())\n            .type(\"public_ipv4\")\n            .metro(\"sv\")\n            .quantity(1)\n            .build());\n\n        var testIndex_metalReservedIPBlockMetalReservedIPBlock = new MetalReservedIPBlock(\"testIndex/metalReservedIPBlockMetalReservedIPBlock\", MetalReservedIPBlockArgs.builder()        \n            .projectId(local.project_id())\n            .type(\"global_ipv4\")\n            .quantity(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  twoElasticAddresses:\n    type: equinix:MetalReservedIPBlock\n    properties:\n      projectId: ${local.project_id}\n      facility: sv15\n      quantity: 2\n  testMetalReservedIPBlock:\n    type: equinix:MetalReservedIPBlock\n    properties:\n      projectId: ${local.project_id}\n      type: public_ipv4\n      metro: sv\n      quantity: 1\n  testIndex/metalReservedIPBlockMetalReservedIPBlock:\n    type: equinix:MetalReservedIPBlock\n    properties:\n      projectId: ${local.project_id}\n      type: global_ipv4\n      quantity: 1\n```\n\nAllocate a block and run a device with public IPv4 from the block\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\nconst example = new equinix.MetalReservedIPBlock(\"example\", {\n    projectId: local.project_id,\n    facility: \"sv15\",\n    quantity: 2,\n});\n// Run a device with both public IPv4 from the block assigned\nconst nodes = new equinix.MetalDevice(\"nodes\", {\n    projectId: local.project_id,\n    facilities: [\"sv15\"],\n    plan: \"c3.small.x86\",\n    operatingSystem: \"ubuntu_20_04\",\n    hostname: \"test\",\n    billingCycle: \"hourly\",\n    ipAddresses: [\n        {\n            type: \"public_ipv4\",\n            cidr: 31,\n            reservationIds: [example.id],\n        },\n        {\n            type: \"private_ipv4\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\nexample = equinix.MetalReservedIPBlock(\"example\",\n    project_id=local[\"project_id\"],\n    facility=\"sv15\",\n    quantity=2)\n# Run a device with both public IPv4 from the block assigned\nnodes = equinix.MetalDevice(\"nodes\",\n    project_id=local[\"project_id\"],\n    facilities=[\"sv15\"],\n    plan=\"c3.small.x86\",\n    operating_system=\"ubuntu_20_04\",\n    hostname=\"test\",\n    billing_cycle=\"hourly\",\n    ip_addresses=[\n        equinix.MetalDeviceIpAddressArgs(\n            type=\"public_ipv4\",\n            cidr=31,\n            reservation_ids=[example.id],\n        ),\n        equinix.MetalDeviceIpAddressArgs(\n            type=\"private_ipv4\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\n        var example = new Equinix.MetalReservedIPBlock(\"example\", new Equinix.MetalReservedIPBlockArgs\n        {\n            ProjectId = local.Project_id,\n            Facility = \"sv15\",\n            Quantity = 2,\n        });\n        // Run a device with both public IPv4 from the block assigned\n        var nodes = new Equinix.MetalDevice(\"nodes\", new Equinix.MetalDeviceArgs\n        {\n            ProjectId = local.Project_id,\n            Facilities = \n            {\n                \"sv15\",\n            },\n            Plan = \"c3.small.x86\",\n            OperatingSystem = \"ubuntu_20_04\",\n            Hostname = \"test\",\n            BillingCycle = \"hourly\",\n            IpAddresses = \n            {\n                new Equinix.Inputs.MetalDeviceIpAddressArgs\n                {\n                    Type = \"public_ipv4\",\n                    Cidr = 31,\n                    ReservationIds = \n                    {\n                        example.Id,\n                    },\n                },\n                new Equinix.Inputs.MetalDeviceIpAddressArgs\n                {\n                    Type = \"private_ipv4\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := equinix.NewMetalReservedIPBlock(ctx, \"example\", \u0026equinix.MetalReservedIPBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tFacility:  pulumi.String(\"sv15\"),\n\t\t\tQuantity:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalDevice(ctx, \"nodes\", \u0026equinix.MetalDeviceArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sv15\"),\n\t\t\t},\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tHostname:        pulumi.String(\"test\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tIpAddresses: MetalDeviceIpAddressArray{\n\t\t\t\t\u0026MetalDeviceIpAddressArgs{\n\t\t\t\t\tType: pulumi.String(\"public_ipv4\"),\n\t\t\t\t\tCidr: pulumi.Int(31),\n\t\t\t\t\tReservationIds: pulumi.StringArray{\n\t\t\t\t\t\texample.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026MetalDeviceIpAddressArgs{\n\t\t\t\t\tType: pulumi.String(\"private_ipv4\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetalReservedIPBlock(\"example\", MetalReservedIPBlockArgs.builder()        \n            .projectId(local.project_id())\n            .facility(\"sv15\")\n            .quantity(2)\n            .build());\n\n        var nodes = new MetalDevice(\"nodes\", MetalDeviceArgs.builder()        \n            .projectId(local.project_id())\n            .facilities(\"sv15\")\n            .plan(\"c3.small.x86\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .hostname(\"test\")\n            .billingCycle(\"hourly\")\n            .ipAddresses(            \n                MetalDeviceIpAddressArgs.builder()\n                    .type(\"public_ipv4\")\n                    .cidr(31)\n                    .reservationIds(example.id())\n                    .build(),\n                MetalDeviceIpAddressArgs.builder()\n                    .type(\"private_ipv4\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: equinix:MetalReservedIPBlock\n    properties:\n      projectId: ${local.project_id}\n      facility: sv15\n      quantity: 2\n  nodes:\n    type: equinix:MetalDevice\n    properties:\n      projectId: ${local.project_id}\n      facilities:\n        - sv15\n      plan: c3.small.x86\n      operatingSystem: ubuntu_20_04\n      hostname: test\n      billingCycle: hourly\n      ipAddresses:\n        - type: public_ipv4\n          cidr: 31\n          reservationIds:\n            - ${example.id}\n        - type: private_ipv4\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing IP reservation ID\n\n```sh\n $ pulumi import equinix:index/metalReservedIPBlock:MetalReservedIPBlock equinix_metal_reserved_ip_block {existing_ip_reservation_id}\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressFamily": {
                    "type": "integer",
                    "description": "Address family as integer. One of `4` or `6`.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n"
                },
                "cidrNotation": {
                    "type": "string",
                    "description": "Address and mask in CIDR notation, e.g. `147.229.15.30/31`.\n"
                },
                "customData": {
                    "type": "string",
                    "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Arbitrary description.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`.\n"
                },
                "gateway": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean flag whether addresses from a block are global (i.e. can be assigned in any\nfacility).\n"
                },
                "manageable": {
                    "type": "boolean"
                },
                "management": {
                    "type": "boolean"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "Mask in decimal notation, e.g. `255.255.255.0`.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The metal project ID where to allocate the address block.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Boolean flag whether addresses from a block are public.\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n"
                },
                "waitForState": {
                    "type": "string",
                    "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                }
            },
            "required": [
                "address",
                "addressFamily",
                "cidr",
                "cidrNotation",
                "gateway",
                "global",
                "manageable",
                "management",
                "netmask",
                "network",
                "projectId",
                "public",
                "quantity"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "integer",
                    "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Arbitrary description.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "type": "string",
                    "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The metal project ID where to allocate the address block.\n",
                    "willReplaceOnChanges": true
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n",
                    "willReplaceOnChanges": true
                },
                "vrfId": {
                    "type": "string",
                    "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n",
                    "willReplaceOnChanges": true
                },
                "waitForState": {
                    "type": "string",
                    "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalReservedIPBlock resources.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer",
                        "description": "Address family as integer. One of `4` or `6`.\n"
                    },
                    "cidr": {
                        "type": "integer",
                        "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n",
                        "willReplaceOnChanges": true
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "Address and mask in CIDR notation, e.g. `147.229.15.30/31`.\n"
                    },
                    "customData": {
                        "type": "string",
                        "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Arbitrary description.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Boolean flag whether addresses from a block are global (i.e. can be assigned in any\nfacility).\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n",
                        "willReplaceOnChanges": true
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Mask in decimal notation, e.g. `255.255.255.0`.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The metal project ID where to allocate the address block.\n",
                        "willReplaceOnChanges": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Boolean flag whether addresses from a block are public.\n"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n",
                        "willReplaceOnChanges": true
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForState": {
                        "type": "string",
                        "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalSSHKey:MetalSSHKey": {
            "description": "Provides a resource to manage User SSH keys on your Equinix Metal user account. If you create a new device in a project, all the keys of the project's collaborators will be injected to the device.\n\nThe link between User SSH key and device is implicit. If you want to make sure that a key will be copied to a device, you must ensure that the device resource `depends_on` the key resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\nimport * from \"fs\";\n\n// Create a new SSH key\nconst key1 = new equinix.MetalSSHKey(\"key1\", {publicKey: fs.readFileSync(\"/home/terraform/.ssh/id_rsa.pub\")});\n// Create new device with \"key1\" included. The device resource \"depends_on\" the\n// key, in order to make sure the key is created before the device.\nconst test = new equinix.MetalDevice(\"test\", {\n    hostname: \"test-device\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n}, {\n    dependsOn: [\"equinix_metal_ssh_key.key1\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new SSH key\nkey1 = equinix.MetalSSHKey(\"key1\", public_key=(lambda path: open(path).read())(\"/home/terraform/.ssh/id_rsa.pub\"))\n# Create new device with \"key1\" included. The device resource \"depends_on\" the\n# key, in order to make sure the key is created before the device.\ntest = equinix.MetalDevice(\"test\",\n    hostname=\"test-device\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    opts=pulumi.ResourceOptions(depends_on=[\"equinix_metal_ssh_key.key1\"]))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new SSH key\n        var key1 = new Equinix.MetalSSHKey(\"key1\", new Equinix.MetalSSHKeyArgs\n        {\n            PublicKey = File.ReadAllText(\"/home/terraform/.ssh/id_rsa.pub\"),\n        });\n        // Create new device with \"key1\" included. The device resource \"depends_on\" the\n        // key, in order to make sure the key is created before the device.\n        var test = new Equinix.MetalDevice(\"test\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"test-device\",\n            Plan = \"c3.small.x86\",\n            Metro = \"sv\",\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                \"equinix_metal_ssh_key.key1\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalSSHKey(ctx, \"key1\", \u0026equinix.MetalSSHKeyArgs{\n\t\t\tPublicKey: readFileOrPanic(\"/home/terraform/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalDevice(ctx, \"test\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname:        pulumi.String(\"test-device\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpulumi.Resource(\"equinix_metal_ssh_key.key1\"),\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.resources.CustomResourceOptions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var key1 = new MetalSSHKey(\"key1\", MetalSSHKeyArgs.builder()        \n            .publicKey(Files.readString(\"/home/terraform/.ssh/id_rsa.pub\"))\n            .build());\n\n        var test = new MetalDevice(\"test\", MetalDeviceArgs.builder()        \n            .hostname(\"test-device\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(\"equinix_metal_ssh_key.key1\")\n                .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing SSH Key ID\n\n```sh\n $ pulumi import equinix:index/metalSSHKey:MetalSSHKey equinix_metal_ssh_key {existing_sshkey_id}\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the SSH key was created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The UUID of the Equinix Metal API User who owns this key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the SSH key was updated.\n"
                }
            },
            "required": [
                "created",
                "fingerprint",
                "name",
                "ownerId",
                "publicKey",
                "updated"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalSSHKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key for identification\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The UUID of the Equinix Metal API User who owns this key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalSpotMarketRequest:MetalSpotMarketRequest": {
            "description": "Provides an Equinix Metal Spot Market Request resource to allow you to\nmanage spot market requests on your account. For more detail on Spot Market,\nsee [this article in Equinix Metal documentation](https://metal.equinix.com/developers/docs/deploy/spot-market/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create a spot market request\nconst req = new equinix.MetalSpotMarketRequest(\"req\", {\n    projectId: local.project_id,\n    maxBidPrice: 0.03,\n    facilities: [\"ny5\"],\n    devicesMin: 1,\n    devicesMax: 1,\n    instanceParameters: {\n        hostname: \"testspot\",\n        billingCycle: \"hourly\",\n        operatingSystem: \"ubuntu_20_04\",\n        plan: \"c3.small.x86\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a spot market request\nreq = equinix.MetalSpotMarketRequest(\"req\",\n    project_id=local[\"project_id\"],\n    max_bid_price=0.03,\n    facilities=[\"ny5\"],\n    devices_min=1,\n    devices_max=1,\n    instance_parameters=equinix.MetalSpotMarketRequestInstanceParametersArgs(\n        hostname=\"testspot\",\n        billing_cycle=\"hourly\",\n        operating_system=\"ubuntu_20_04\",\n        plan=\"c3.small.x86\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a spot market request\n        var req = new Equinix.MetalSpotMarketRequest(\"req\", new Equinix.MetalSpotMarketRequestArgs\n        {\n            ProjectId = local.Project_id,\n            MaxBidPrice = 0.03,\n            Facilities = \n            {\n                \"ny5\",\n            },\n            DevicesMin = 1,\n            DevicesMax = 1,\n            InstanceParameters = new Equinix.Inputs.MetalSpotMarketRequestInstanceParametersArgs\n            {\n                Hostname = \"testspot\",\n                BillingCycle = \"hourly\",\n                OperatingSystem = \"ubuntu_20_04\",\n                Plan = \"c3.small.x86\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalSpotMarketRequest(ctx, \"req\", \u0026equinix.MetalSpotMarketRequestArgs{\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t\tMaxBidPrice: pulumi.Float64(0.03),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tDevicesMin: pulumi.Int(1),\n\t\t\tDevicesMax: pulumi.Int(1),\n\t\t\tInstanceParameters: \u0026MetalSpotMarketRequestInstanceParametersArgs{\n\t\t\t\tHostname:        pulumi.String(\"testspot\"),\n\t\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var req = new MetalSpotMarketRequest(\"req\", MetalSpotMarketRequestArgs.builder()        \n            .projectId(local.project_id())\n            .maxBidPrice(0.03)\n            .facilities(\"ny5\")\n            .devicesMin(1)\n            .devicesMax(1)\n            .instanceParameters(MetalSpotMarketRequestInstanceParametersArgs.builder()\n                .hostname(\"testspot\")\n                .billingCycle(\"hourly\")\n                .operatingSystem(\"ubuntu_20_04\")\n                .plan(\"c3.small.x86\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  req:\n    type: equinix:MetalSpotMarketRequest\n    properties:\n      projectId: ${local.project_id}\n      maxBidPrice: 0.03\n      facilities:\n        - ny5\n      devicesMin: 1\n      devicesMax: 1\n      instanceParameters:\n        hostname: testspot\n        billingCycle: hourly\n        operatingSystem: ubuntu_20_04\n        plan: c3.small.x86\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing spot market request ID\n\n```sh\n $ pulumi import equinix:index/metalSpotMarketRequest:MetalSpotMarketRequest equinix_metal_spot_market_request {existing_spot_market_request_id}\n```\n\n ",
            "properties": {
                "devicesMax": {
                    "type": "integer",
                    "description": "Maximum number devices to be created.\n"
                },
                "devicesMin": {
                    "type": "integer",
                    "description": "Miniumum number devices to be created.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Facility IDs where devices should be created.\n"
                },
                "instanceParameters": {
                    "$ref": "#/types/equinix:index/MetalSpotMarketRequestInstanceParameters:MetalSpotMarketRequestInstanceParameters",
                    "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termintation_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.MetalDevice docs.\n"
                },
                "maxBidPrice": {
                    "type": "number",
                    "description": "Maximum price user is willing to pay per hour per device.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where devices should be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID.\n"
                },
                "waitForDevices": {
                    "type": "boolean",
                    "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n"
                }
            },
            "required": [
                "devicesMax",
                "devicesMin",
                "facilities",
                "instanceParameters",
                "maxBidPrice",
                "projectId"
            ],
            "inputProperties": {
                "devicesMax": {
                    "type": "integer",
                    "description": "Maximum number devices to be created.\n",
                    "willReplaceOnChanges": true
                },
                "devicesMin": {
                    "type": "integer",
                    "description": "Miniumum number devices to be created.\n",
                    "willReplaceOnChanges": true
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Facility IDs where devices should be created.\n",
                    "willReplaceOnChanges": true
                },
                "instanceParameters": {
                    "$ref": "#/types/equinix:index/MetalSpotMarketRequestInstanceParameters:MetalSpotMarketRequestInstanceParameters",
                    "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termintation_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.MetalDevice docs.\n",
                    "willReplaceOnChanges": true
                },
                "maxBidPrice": {
                    "type": "number",
                    "description": "Maximum price user is willing to pay per hour per device.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where devices should be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDevices": {
                    "type": "boolean",
                    "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "devicesMax",
                "devicesMin",
                "instanceParameters",
                "maxBidPrice",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalSpotMarketRequest resources.\n",
                "properties": {
                    "devicesMax": {
                        "type": "integer",
                        "description": "Maximum number devices to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "devicesMin": {
                        "type": "integer",
                        "description": "Miniumum number devices to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Facility IDs where devices should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceParameters": {
                        "$ref": "#/types/equinix:index/MetalSpotMarketRequestInstanceParameters:MetalSpotMarketRequestInstanceParameters",
                        "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termintation_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.MetalDevice docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxBidPrice": {
                        "type": "number",
                        "description": "Maximum price user is willing to pay per hour per device.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where devices should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDevices": {
                        "type": "boolean",
                        "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalUserAPIKey:MetalUserAPIKey": {
            "description": "Use this resource to create Metal User API Key resources in Equinix Metal. Each API key contains a\ntoken which can be used for authentication in Equinix Metal HTTP API (in HTTP request header\n`X-Auth-Token`).\n\nRead-only keys only allow to list and view existing resources, read-write keys can also be used to\ncreate resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = new equinix.MetalUserAPIKey(\"test\", {\n    description: \"Read-only user key\",\n    readOnly: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.MetalUserAPIKey(\"test\",\n    description=\"Read-only user key\",\n    read_only=True)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Equinix.MetalUserAPIKey(\"test\", new Equinix.MetalUserAPIKeyArgs\n        {\n            Description = \"Read-only user key\",\n            ReadOnly = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalUserAPIKey(ctx, \"test\", \u0026equinix.MetalUserAPIKeyArgs{\n\t\t\tDescription: pulumi.String(\"Read-only user key\"),\n\t\t\tReadOnly:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new MetalUserAPIKey(\"test\", MetalUserAPIKeyArgs.builder()        \n            .description(\"Read-only user key\")\n            .readOnly(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: equinix:MetalUserAPIKey\n    properties:\n      description: Read-only user key\n      readOnly: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n"
                },
                "token": {
                    "type": "string",
                    "description": "API token which can be used in Equinix Metal API clients.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "UUID of the owner of the API key.\n"
                }
            },
            "required": [
                "description",
                "readOnly",
                "token",
                "userId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "readOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalUserAPIKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag indicating whether the API key shoud be read-only\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "API token which can be used in Equinix Metal API clients.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "UUID of the owner of the API key.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalVRF:MetalVRF": {
            "description": "Use this resource to manage a VRF.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n\n## Import\n\nThis resource can be imported using an existing VRF ID\n\n```sh\n $ pulumi import equinix:index/metalVRF:MetalVRF equinix_metal_vrf {existing_id}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VRF.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "The 4-byte ASN set on the VRF.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro ID or Code where the VRF will be deployed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-supplied name of the VRF, unique to the project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where the VRF will be deployed.\n"
                }
            },
            "required": [
                "localAsn",
                "metro",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VRF.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "The 4-byte ASN set on the VRF.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro ID or Code where the VRF will be deployed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-supplied name of the VRF, unique to the project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where the VRF will be deployed.\n"
                }
            },
            "requiredInputs": [
                "metro",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalVRF resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VRF.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "The 4-byte ASN set on the VRF.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro ID or Code where the VRF will be deployed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name of the VRF, unique to the project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID where the VRF will be deployed.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalVirtualCircuit:MetalVirtualCircuit": {
            "description": "Use this resource to associate VLAN with a Dedicated Port from\n[Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/#associating-a-vlan-with-a-dedicated-port).\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nPick an existing Project and Connection, create a VLAN and use `equinix.MetalVirtualCircuit`\nto associate it with a Primary Port of the Connection.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\";\nconst connId = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\";\nconst testGetMetalConnection = equinix.GetMetalConnection({\n    connectionId: connId,\n});\nconst testMetalVlan = new equinix.MetalVlan(\"testMetalVlan\", {\n    projectId: projectId,\n    metro: testGetMetalConnection.then(testGetMetalConnection =\u003e testGetMetalConnection.metro),\n});\nconst testMetalVirtualCircuit = new equinix.MetalVirtualCircuit(\"testMetalVirtualCircuit\", {\n    connectionId: connId,\n    projectId: projectId,\n    portId: testGetMetalConnection.then(testGetMetalConnection =\u003e testGetMetalConnection.ports?[0]?.id),\n    vlanId: testMetalVlan.id,\n    nniVlan: 1056,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\"\nconn_id = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\"\ntest_get_metal_connection = equinix.get_metal_connection(connection_id=conn_id)\ntest_metal_vlan = equinix.MetalVlan(\"testMetalVlan\",\n    project_id=project_id,\n    metro=test_get_metal_connection.metro)\ntest_metal_virtual_circuit = equinix.MetalVirtualCircuit(\"testMetalVirtualCircuit\",\n    connection_id=conn_id,\n    project_id=project_id,\n    port_id=test_get_metal_connection.ports[0].id,\n    vlan_id=test_metal_vlan.id,\n    nni_vlan=1056)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var projectId = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\";\n        var connId = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\";\n        var testGetMetalConnection = Output.Create(Equinix.GetMetalConnection.InvokeAsync(new Equinix.GetMetalConnectionArgs\n        {\n            ConnectionId = connId,\n        }));\n        var testMetalVlan = new Equinix.MetalVlan(\"testMetalVlan\", new Equinix.MetalVlanArgs\n        {\n            ProjectId = projectId,\n            Metro = testGetMetalConnection.Apply(testGetMetalConnection =\u003e testGetMetalConnection.Metro),\n        });\n        var testMetalVirtualCircuit = new Equinix.MetalVirtualCircuit(\"testMetalVirtualCircuit\", new Equinix.MetalVirtualCircuitArgs\n        {\n            ConnectionId = connId,\n            ProjectId = projectId,\n            PortId = testGetMetalConnection.Apply(testGetMetalConnection =\u003e testGetMetalConnection.Ports?[0]?.Id),\n            VlanId = testMetalVlan.Id,\n            NniVlan = 1056,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"52000fb2-ee46-4673-93a8-de2c2bdba33c\"\n\t\tconnId := \"73f12f29-3e19-43a0-8e90-ae81580db1e0\"\n\t\ttestGetMetalConnection, err := equinix.GetMetalConnection(ctx, \u0026GetMetalConnectionArgs{\n\t\t\tConnectionId: connId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestMetalVlan, err := equinix.NewMetalVlan(ctx, \"testMetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tMetro:     pulumi.String(testGetMetalConnection.Metro),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalVirtualCircuit(ctx, \"testMetalVirtualCircuit\", \u0026equinix.MetalVirtualCircuitArgs{\n\t\t\tConnectionId: pulumi.String(connId),\n\t\t\tProjectId:    pulumi.String(projectId),\n\t\t\tPortId:       pulumi.String(testGetMetalConnection.Ports[0].Id),\n\t\t\tVlanId:       testMetalVlan.ID(),\n\t\t\tNniVlan:      pulumi.Int(1056),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\";\n\n        final var connId = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\";\n\n        final var testGetMetalConnection = EquinixFunctions.GetMetalConnection();\n\n        var testMetalVlan = new MetalVlan(\"testMetalVlan\", MetalVlanArgs.builder()        \n            .projectId(projectId)\n            .metro(testGetMetalConnection.metro())\n            .build());\n\n        var testMetalVirtualCircuit = new MetalVirtualCircuit(\"testMetalVirtualCircuit\", MetalVirtualCircuitArgs.builder()        \n            .connectionId(connId)\n            .projectId(projectId)\n            .portId(testGetMetalConnection.ports()[0].id())\n            .vlanId(testMetalVlan.id())\n            .nniVlan(1056)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      projectId: ${projectId}\n      metro: ${testGetMetalConnection.metro}\n  testMetalVirtualCircuit:\n    type: equinix:MetalVirtualCircuit\n    properties:\n      connectionId: ${connId}\n      projectId: ${projectId}\n      portId: ${testGetMetalConnection.ports[0].id}\n      vlanId: ${testMetalVlan.id}\n      nniVlan: 1056\nvariables:\n  projectId: 52000fb2-ee46-4673-93a8-de2c2bdba33c\n  connId: 73f12f29-3e19-43a0-8e90-ae81580db1e0\n  testGetMetalConnection:\n    Fn::Invoke:\n      Function: equinix:GetMetalConnection\n      Arguments:\n        connectionId: ${connId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing Virtual Circuit ID\n\n```sh\n $ pulumi import equinix:index/metalVirtualCircuit:MetalVirtualCircuit equinix_metal_virtual_circuit {existing_id}\n```\n\n ",
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "UUID of Connection where the VC is scoped to.\n"
                },
                "customerIp": {
                    "type": "string",
                    "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Virtual Circuit resource.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "The password that can be set for the VRF BGP peer\n"
                },
                "metalIp": {
                    "type": "string",
                    "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Circuit resource.\n"
                },
                "nniVlan": {
                    "type": "integer",
                    "description": "Equinix Metal network-to-network VLAN ID.\n"
                },
                "nniVnid": {
                    "type": "integer",
                    "description": "NNI VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                },
                "peerAsn": {
                    "type": "integer",
                    "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of the Connection Port where the VC is scoped to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the Project where the VC is scoped to.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Speed of the Virtual Circuit resource.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the virtal circuit.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the Virtual Circuit resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN to associate.\n"
                },
                "vnid": {
                    "type": "integer",
                    "description": "VNID VLAN parameter, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF to associate.\n"
                }
            },
            "required": [
                "connectionId",
                "name",
                "nniVnid",
                "portId",
                "projectId",
                "speed",
                "status",
                "vnid"
            ],
            "inputProperties": {
                "connectionId": {
                    "type": "string",
                    "description": "UUID of Connection where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "customerIp": {
                    "type": "string",
                    "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Virtual Circuit resource.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "The password that can be set for the VRF BGP peer\n"
                },
                "metalIp": {
                    "type": "string",
                    "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Circuit resource.\n"
                },
                "nniVlan": {
                    "type": "integer",
                    "description": "Equinix Metal network-to-network VLAN ID.\n",
                    "willReplaceOnChanges": true
                },
                "peerAsn": {
                    "type": "integer",
                    "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n",
                    "willReplaceOnChanges": true
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of the Connection Port where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the Project where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "speed": {
                    "type": "string",
                    "description": "Speed of the Virtual Circuit resource.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the Virtual Circuit resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN to associate.\n",
                    "willReplaceOnChanges": true
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF to associate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionId",
                "portId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalVirtualCircuit resources.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "UUID of Connection where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "customerIp": {
                        "type": "string",
                        "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Virtual Circuit resource.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "The password that can be set for the VRF BGP peer\n"
                    },
                    "metalIp": {
                        "type": "string",
                        "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Virtual Circuit resource.\n"
                    },
                    "nniVlan": {
                        "type": "integer",
                        "description": "Equinix Metal network-to-network VLAN ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "nniVnid": {
                        "type": "integer",
                        "description": "NNI VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "peerAsn": {
                        "type": "integer",
                        "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n",
                        "willReplaceOnChanges": true
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of the Connection Port where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the Project where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "speed": {
                        "type": "string",
                        "description": "Speed of the Virtual Circuit resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtal circuit.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for the Virtual Circuit resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN to associate.\n",
                        "willReplaceOnChanges": true
                    },
                    "vnid": {
                        "type": "integer",
                        "description": "VNID VLAN parameter, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF to associate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/metalVlan:MetalVlan": {
            "description": "Provides a resource to allow users to manage Virtual Networks in their projects.\n\nTo learn more about Layer 2 networking in Equinix Metal, refer to\n\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2/\u003e\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2-configs/\u003e\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create a new VLAN in facility \"sv15\"\nconst vlan1MetalVlan = new equinix.MetalVlan(\"vlan1MetalVlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"sv15\",\n    projectId: local.project_id,\n});\n// Create a new VLAN in metro \"esv\"\nconst vlan1Index_metalVlanMetalVlan = new equinix.MetalVlan(\"vlan1Index/metalVlanMetalVlan\", {\n    description: \"VLAN in New Jersey\",\n    metro: \"sv\",\n    projectId: local.project_id,\n    vxlan: 1040,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new VLAN in facility \"sv15\"\nvlan1_metal_vlan = equinix.MetalVlan(\"vlan1MetalVlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"sv15\",\n    project_id=local[\"project_id\"])\n# Create a new VLAN in metro \"esv\"\nvlan1_index_metal_vlan_metal_vlan = equinix.MetalVlan(\"vlan1Index/metalVlanMetalVlan\",\n    description=\"VLAN in New Jersey\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"],\n    vxlan=1040)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new VLAN in facility \"sv15\"\n        var vlan1MetalVlan = new Equinix.MetalVlan(\"vlan1MetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"VLAN in New Jersey\",\n            Facility = \"sv15\",\n            ProjectId = local.Project_id,\n        });\n        // Create a new VLAN in metro \"esv\"\n        var vlan1Index_metalVlanMetalVlan = new Equinix.MetalVlan(\"vlan1Index/metalVlanMetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"VLAN in New Jersey\",\n            Metro = \"sv\",\n            ProjectId = local.Project_id,\n            Vxlan = 1040,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalVlan(ctx, \"vlan1MetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"sv15\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalVlan(ctx, \"vlan1Index/metalVlanMetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t\tVxlan:       pulumi.Int(1040),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vlan1MetalVlan = new MetalVlan(\"vlan1MetalVlan\", MetalVlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"sv15\")\n            .projectId(local.project_id())\n            .build());\n\n        var vlan1Index_metalVlanMetalVlan = new MetalVlan(\"vlan1Index/metalVlanMetalVlan\", MetalVlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .vxlan(1040)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vlan1MetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: VLAN in New Jersey\n      facility: sv15\n      projectId: ${local.project_id}\n  vlan1Index/metalVlanMetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: VLAN in New Jersey\n      metro: sv\n      projectId: ${local.project_id}\n      vxlan: 1040\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing VLAN ID (UUID)\n\n```sh\n $ pulumi import equinix:index/metalVlan:MetalVlan equinix_metal_vlan {existing_vlan_id}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to create the VLAN.\n"
                },
                "metro": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of parent project.\n"
                },
                "vxlan": {
                    "type": "integer",
                    "description": "VLAN ID, must be unique in metro.\n"
                }
            },
            "required": [
                "projectId",
                "vxlan"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string.\n",
                    "willReplaceOnChanges": true
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to create the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of parent project.\n",
                    "willReplaceOnChanges": true
                },
                "vxlan": {
                    "type": "integer",
                    "description": "VLAN ID, must be unique in metro.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetalVlan resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string.\n",
                        "willReplaceOnChanges": true
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility where to create the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of parent project.\n",
                        "willReplaceOnChanges": true
                    },
                    "vxlan": {
                        "type": "integer",
                        "description": "VLAN ID, must be unique in metro.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/networkACLTemplate:NetworkACLTemplate": {
            "description": "Resource `equinix.NetworkACLTemplate` allows creation and management of\nEquinix Network Edge device Access Control List templates.\n\nDevice ACL templates give possibility to define set of rules will allowed inbound\ntraffic. Templates can be assigned to the network devices.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Creates ACL template and assigns it to the network device\nconst myacl = new equinix.NetworkACLTemplate(\"myacl\", {\n    description: \"Test ACL template\",\n    inboundRules: [\n        {\n            dstPort: \"any\",\n            protocol: \"IP\",\n            srcPort: \"any\",\n            subnet: \"1.1.1.1/32\",\n        },\n        {\n            dstPort: \"53,1045,2041\",\n            protocol: \"UDP\",\n            srcPort: \"any\",\n            subnet: \"172.16.25.0/24\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Creates ACL template and assigns it to the network device\nmyacl = equinix.NetworkACLTemplate(\"myacl\",\n    description=\"Test ACL template\",\n    inbound_rules=[\n        equinix.NetworkACLTemplateInboundRuleArgs(\n            dst_port=\"any\",\n            protocol=\"IP\",\n            src_port=\"any\",\n            subnet=\"1.1.1.1/32\",\n        ),\n        equinix.NetworkACLTemplateInboundRuleArgs(\n            dst_port=\"53,1045,2041\",\n            protocol=\"UDP\",\n            src_port=\"any\",\n            subnet=\"172.16.25.0/24\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Creates ACL template and assigns it to the network device\n        var myacl = new Equinix.NetworkACLTemplate(\"myacl\", new Equinix.NetworkACLTemplateArgs\n        {\n            Description = \"Test ACL template\",\n            InboundRules = \n            {\n                new Equinix.Inputs.NetworkACLTemplateInboundRuleArgs\n                {\n                    DstPort = \"any\",\n                    Protocol = \"IP\",\n                    SrcPort = \"any\",\n                    Subnet = \"1.1.1.1/32\",\n                },\n                new Equinix.Inputs.NetworkACLTemplateInboundRuleArgs\n                {\n                    DstPort = \"53,1045,2041\",\n                    Protocol = \"UDP\",\n                    SrcPort = \"any\",\n                    Subnet = \"172.16.25.0/24\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewNetworkACLTemplate(ctx, \"myacl\", \u0026equinix.NetworkACLTemplateArgs{\n\t\t\tDescription: pulumi.String(\"Test ACL template\"),\n\t\t\tInboundRules: NetworkACLTemplateInboundRuleArray{\n\t\t\t\t\u0026NetworkACLTemplateInboundRuleArgs{\n\t\t\t\t\tDstPort:  pulumi.String(\"any\"),\n\t\t\t\t\tProtocol: pulumi.String(\"IP\"),\n\t\t\t\t\tSrcPort:  pulumi.String(\"any\"),\n\t\t\t\t\tSubnet:   pulumi.String(\"1.1.1.1/32\"),\n\t\t\t\t},\n\t\t\t\t\u0026NetworkACLTemplateInboundRuleArgs{\n\t\t\t\t\tDstPort:  pulumi.String(\"53,1045,2041\"),\n\t\t\t\t\tProtocol: pulumi.String(\"UDP\"),\n\t\t\t\t\tSrcPort:  pulumi.String(\"any\"),\n\t\t\t\t\tSubnet:   pulumi.String(\"172.16.25.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myacl = new NetworkACLTemplate(\"myacl\", NetworkACLTemplateArgs.builder()        \n            .description(\"Test ACL template\")\n            .inboundRules(            \n                NetworkACLTemplateInboundRuleArgs.builder()\n                    .dstPort(\"any\")\n                    .protocol(\"IP\")\n                    .srcPort(\"any\")\n                    .subnet(\"1.1.1.1/32\")\n                    .build(),\n                NetworkACLTemplateInboundRuleArgs.builder()\n                    .dstPort(\"53,1045,2041\")\n                    .protocol(\"UDP\")\n                    .srcPort(\"any\")\n                    .subnet(\"172.16.25.0/24\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myacl:\n    type: equinix:NetworkACLTemplate\n    properties:\n      description: Test ACL template\n      inboundRules:\n        - dstPort: any\n          protocol: IP\n          srcPort: any\n          subnet: 1.1.1.1/32\n        - dstPort: 53,1045,2041\n          protocol: UDP\n          srcPort: any\n          subnet: 172.16.25.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/networkACLTemplate:NetworkACLTemplate example {existing_id}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "ACL template description.\n"
                },
                "deviceAclStatus": {
                    "type": "string",
                    "description": "Status of ACL template provisioning process, where template was applied.\nOne of `PROVISIONING`, `PROVISIONED`.\n"
                },
                "deviceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkACLTemplateDeviceDetail:NetworkACLTemplateDeviceDetail"
                    },
                    "description": "List of the devices where the ACL template is applied.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "(Deprecated) Identifier of a network device where template was applied.\n",
                    "deprecationMessage": "Refer to device details get device information"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkACLTemplateInboundRule:NetworkACLTemplateInboundRule"
                    },
                    "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "ACL template location metro code.\n",
                    "deprecationMessage": "Metro Code is no longer required"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device uuid.\n"
                }
            },
            "required": [
                "deviceAclStatus",
                "deviceDetails",
                "deviceId",
                "inboundRules",
                "name",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "ACL template description.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkACLTemplateInboundRule:NetworkACLTemplateInboundRule"
                    },
                    "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "ACL template location metro code.\n",
                    "deprecationMessage": "Metro Code is no longer required"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                }
            },
            "requiredInputs": [
                "inboundRules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkACLTemplate resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "ACL template description.\n"
                    },
                    "deviceAclStatus": {
                        "type": "string",
                        "description": "Status of ACL template provisioning process, where template was applied.\nOne of `PROVISIONING`, `PROVISIONED`.\n"
                    },
                    "deviceDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/NetworkACLTemplateDeviceDetail:NetworkACLTemplateDeviceDetail"
                        },
                        "description": "List of the devices where the ACL template is applied.\n"
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "(Deprecated) Identifier of a network device where template was applied.\n",
                        "deprecationMessage": "Refer to device details get device information"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/NetworkACLTemplateInboundRule:NetworkACLTemplateInboundRule"
                        },
                        "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n"
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "ACL template location metro code.\n",
                        "deprecationMessage": "Metro Code is no longer required"
                    },
                    "name": {
                        "type": "string",
                        "description": "ACL template name.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device uuid.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/networkBGP:NetworkBGP": {
            "description": "Resource `equinix.NetworkBGP` allows creation and management of Equinix Network\nEdge BGP peering configurations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = new equinix.NetworkBGP(\"test\", {\n    authenticationKey: \"secret\",\n    connectionId: \"54014acf-9730-4b55-a791-459283d05fb1\",\n    localAsn: 12345,\n    localIpAddress: \"10.1.1.1/30\",\n    remoteAsn: 66123,\n    remoteIpAddress: \"10.1.1.2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.NetworkBGP(\"test\",\n    authentication_key=\"secret\",\n    connection_id=\"54014acf-9730-4b55-a791-459283d05fb1\",\n    local_asn=12345,\n    local_ip_address=\"10.1.1.1/30\",\n    remote_asn=66123,\n    remote_ip_address=\"10.1.1.2\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Equinix.NetworkBGP(\"test\", new Equinix.NetworkBGPArgs\n        {\n            AuthenticationKey = \"secret\",\n            ConnectionId = \"54014acf-9730-4b55-a791-459283d05fb1\",\n            LocalAsn = 12345,\n            LocalIpAddress = \"10.1.1.1/30\",\n            RemoteAsn = 66123,\n            RemoteIpAddress = \"10.1.1.2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewNetworkBGP(ctx, \"test\", \u0026equinix.NetworkBGPArgs{\n\t\t\tAuthenticationKey: pulumi.String(\"secret\"),\n\t\t\tConnectionId:      pulumi.String(\"54014acf-9730-4b55-a791-459283d05fb1\"),\n\t\t\tLocalAsn:          pulumi.Int(12345),\n\t\t\tLocalIpAddress:    pulumi.String(\"10.1.1.1/30\"),\n\t\t\tRemoteAsn:         pulumi.Int(66123),\n\t\t\tRemoteIpAddress:   pulumi.String(\"10.1.1.2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new NetworkBGP(\"test\", NetworkBGPArgs.builder()        \n            .authenticationKey(\"secret\")\n            .connectionId(\"54014acf-9730-4b55-a791-459283d05fb1\")\n            .localAsn(12345)\n            .localIpAddress(\"10.1.1.1/30\")\n            .remoteAsn(66123)\n            .remoteIpAddress(\"10.1.1.2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: equinix:NetworkBGP\n    properties:\n      authenticationKey: secret\n      connectionId: 54014acf-9730-4b55-a791-459283d05fb1\n      localAsn: 12345\n      localIpAddress: 10.1.1.1/30\n      remoteAsn: 66123\n      remoteIpAddress: 10.1.1.2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/networkBGP:NetworkBGP example {existing_id}\n```\n\n ",
            "properties": {
                "authenticationKey": {
                    "type": "string",
                    "description": "shared key used for BGP peer authentication.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "unique identifier of a network device that is a local peer in a given BGP peering\nconfiguration.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "Local ASN number.\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IP address in CIDR format of a local device.\n"
                },
                "provisioningStatus": {
                    "type": "string",
                    "description": "BGP peering configuration provisioning status, one of `PROVISIONING`,\n`PENDING_UPDATE`, `PROVISIONED`, `FAILED`.\n"
                },
                "remoteAsn": {
                    "type": "integer",
                    "description": "Remote ASN number.\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "IP address of remote peer.\n"
                },
                "state": {
                    "type": "string",
                    "description": "BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,\n`Established`.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "BGP peering configuration unique identifier.\n"
                }
            },
            "required": [
                "connectionId",
                "deviceId",
                "localAsn",
                "localIpAddress",
                "provisioningStatus",
                "remoteAsn",
                "remoteIpAddress",
                "state",
                "uuid"
            ],
            "inputProperties": {
                "authenticationKey": {
                    "type": "string",
                    "description": "shared key used for BGP peer authentication.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n",
                    "willReplaceOnChanges": true
                },
                "localAsn": {
                    "type": "integer",
                    "description": "Local ASN number.\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IP address in CIDR format of a local device.\n"
                },
                "remoteAsn": {
                    "type": "integer",
                    "description": "Remote ASN number.\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "IP address of remote peer.\n"
                }
            },
            "requiredInputs": [
                "connectionId",
                "localAsn",
                "localIpAddress",
                "remoteAsn",
                "remoteIpAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkBGP resources.\n",
                "properties": {
                    "authenticationKey": {
                        "type": "string",
                        "description": "shared key used for BGP peer authentication.\n"
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "unique identifier of a network device that is a local peer in a given BGP peering\nconfiguration.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "Local ASN number.\n"
                    },
                    "localIpAddress": {
                        "type": "string",
                        "description": "IP address in CIDR format of a local device.\n"
                    },
                    "provisioningStatus": {
                        "type": "string",
                        "description": "BGP peering configuration provisioning status, one of `PROVISIONING`,\n`PENDING_UPDATE`, `PROVISIONED`, `FAILED`.\n"
                    },
                    "remoteAsn": {
                        "type": "integer",
                        "description": "Remote ASN number.\n"
                    },
                    "remoteIpAddress": {
                        "type": "string",
                        "description": "IP address of remote peer.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,\n`Established`.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "BGP peering configuration unique identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/networkDevice:NetworkDevice": {
            "description": "Resource `equinix.NetworkDevice` allows creation and management of Equinix Network Edge virtual\nnetwork devices.\n\nNetwork Edge virtual network devices can be created in two modes:\n\n* **managed** - (default) Where Equinix manages connectivity and services in the device and\ncustomer gets limited access to the device.\n* **self-configured** - Where customer provisions and manages own services in the device with less\nrestricted access. Some device types are offered only in this mode.\n\nIn addition to management modes, there are two software license modes available:\n\n* **subscription** - Where Equinix provides software license, including end-to-end support, and\nbills for the service respectively.\n* **BYOL** - [bring your own license] Where customer brings his own, already procured device\nsoftware license. There are no charges associated with such license. It is the only licensing mode\nfor `self-configured` devices.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dc = equinix.GetNetworkAccount({\n    metroCode: \"DC\",\n});\nconst sv = equinix.GetNetworkAccount({\n    metroCode: \"SV\",\n});\nconst csr1000v_ha = new equinix.NetworkDevice(\"csr1000v-ha\", {\n    throughput: 500,\n    throughputUnit: \"Mbps\",\n    metroCode: dc.then(dc =\u003e dc.metroCode),\n    typeCode: \"CSR1000V\",\n    packageCode: \"SEC\",\n    notifications: [\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n        \"fred@equinix.com\",\n    ],\n    hostname: \"csr1000v-p\",\n    termLength: 6,\n    accountNumber: dc.then(dc =\u003e dc.number),\n    version: \"16.09.05\",\n    coreCount: 2,\n    secondaryDevice: {\n        name: \"tf-csr1000v-s\",\n        metroCode: sv.then(sv =\u003e sv.metroCode),\n        hostname: \"csr1000v-s\",\n        notifications: [\n            \"john@equinix.com\",\n            \"marry@equinix.com\",\n        ],\n        accountNumber: sv.then(sv =\u003e sv.number),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndc = equinix.get_network_account(metro_code=\"DC\")\nsv = equinix.get_network_account(metro_code=\"SV\")\ncsr1000v_ha = equinix.NetworkDevice(\"csr1000v-ha\",\n    throughput=500,\n    throughput_unit=\"Mbps\",\n    metro_code=dc.metro_code,\n    type_code=\"CSR1000V\",\n    package_code=\"SEC\",\n    notifications=[\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n        \"fred@equinix.com\",\n    ],\n    hostname=\"csr1000v-p\",\n    term_length=6,\n    account_number=dc.number,\n    version=\"16.09.05\",\n    core_count=2,\n    secondary_device=equinix.NetworkDeviceSecondaryDeviceArgs(\n        name=\"tf-csr1000v-s\",\n        metro_code=sv.metro_code,\n        hostname=\"csr1000v-s\",\n        notifications=[\n            \"john@equinix.com\",\n            \"marry@equinix.com\",\n        ],\n        account_number=sv.number,\n    ))\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dc = Output.Create(Equinix.GetNetworkAccount.InvokeAsync(new Equinix.GetNetworkAccountArgs\n        {\n            MetroCode = \"DC\",\n        }));\n        var sv = Output.Create(Equinix.GetNetworkAccount.InvokeAsync(new Equinix.GetNetworkAccountArgs\n        {\n            MetroCode = \"SV\",\n        }));\n        var csr1000v_ha = new Equinix.NetworkDevice(\"csr1000v-ha\", new Equinix.NetworkDeviceArgs\n        {\n            Throughput = 500,\n            ThroughputUnit = \"Mbps\",\n            MetroCode = dc.Apply(dc =\u003e dc.MetroCode),\n            TypeCode = \"CSR1000V\",\n            PackageCode = \"SEC\",\n            Notifications = \n            {\n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n                \"fred@equinix.com\",\n            },\n            Hostname = \"csr1000v-p\",\n            TermLength = 6,\n            AccountNumber = dc.Apply(dc =\u003e dc.Number),\n            Version = \"16.09.05\",\n            CoreCount = 2,\n            SecondaryDevice = new Equinix.Inputs.NetworkDeviceSecondaryDeviceArgs\n            {\n                Name = \"tf-csr1000v-s\",\n                MetroCode = sv.Apply(sv =\u003e sv.MetroCode),\n                Hostname = \"csr1000v-s\",\n                Notifications = \n                {\n                    \"john@equinix.com\",\n                    \"marry@equinix.com\",\n                },\n                AccountNumber = sv.Apply(sv =\u003e sv.Number),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdc, err := equinix.GetNetworkAccount(ctx, \u0026GetNetworkAccountArgs{\n\t\t\tMetroCode: \"DC\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsv, err := equinix.GetNetworkAccount(ctx, \u0026GetNetworkAccountArgs{\n\t\t\tMetroCode: \"SV\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewNetworkDevice(ctx, \"csr1000v-ha\", \u0026equinix.NetworkDeviceArgs{\n\t\t\tThroughput:     pulumi.Int(500),\n\t\t\tThroughputUnit: pulumi.String(\"Mbps\"),\n\t\t\tMetroCode:      pulumi.String(dc.MetroCode),\n\t\t\tTypeCode:       pulumi.String(\"CSR1000V\"),\n\t\t\tPackageCode:    pulumi.String(\"SEC\"),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"john@equinix.com\"),\n\t\t\t\tpulumi.String(\"marry@equinix.com\"),\n\t\t\t\tpulumi.String(\"fred@equinix.com\"),\n\t\t\t},\n\t\t\tHostname:      pulumi.String(\"csr1000v-p\"),\n\t\t\tTermLength:    pulumi.Int(6),\n\t\t\tAccountNumber: pulumi.String(dc.Number),\n\t\t\tVersion:       pulumi.String(\"16.09.05\"),\n\t\t\tCoreCount:     pulumi.Int(2),\n\t\t\tSecondaryDevice: \u0026NetworkDeviceSecondaryDeviceArgs{\n\t\t\t\tName:      pulumi.String(\"tf-csr1000v-s\"),\n\t\t\t\tMetroCode: pulumi.String(sv.MetroCode),\n\t\t\t\tHostname:  pulumi.String(\"csr1000v-s\"),\n\t\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"john@equinix.com\"),\n\t\t\t\t\tpulumi.String(\"marry@equinix.com\"),\n\t\t\t\t},\n\t\t\t\tAccountNumber: pulumi.String(sv.Number),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dc = EquinixFunctions.GetNetworkAccount();\n\n        final var sv = EquinixFunctions.GetNetworkAccount();\n\n        var csr1000v_ha = new NetworkDevice(\"csr1000v-ha\", NetworkDeviceArgs.builder()        \n            .throughput(500)\n            .throughputUnit(\"Mbps\")\n            .metroCode(dc.metroCode())\n            .typeCode(\"CSR1000V\")\n            .packageCode(\"SEC\")\n            .notifications(            \n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n                \"fred@equinix.com\")\n            .hostname(\"csr1000v-p\")\n            .termLength(6)\n            .accountNumber(dc.number())\n            .version(\"16.09.05\")\n            .coreCount(2)\n            .secondaryDevice(NetworkDeviceSecondaryDeviceArgs.builder()\n                .name(\"tf-csr1000v-s\")\n                .metroCode(sv.metroCode())\n                .hostname(\"csr1000v-s\")\n                .notifications(                \n                    \"john@equinix.com\",\n                    \"marry@equinix.com\")\n                .accountNumber(sv.number())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  csr1000v-ha:\n    type: equinix:NetworkDevice\n    properties:\n      throughput: 500\n      throughputUnit: Mbps\n      metroCode: ${dc.metroCode}\n      typeCode: CSR1000V\n      packageCode: SEC\n      notifications:\n        - john@equinix.com\n        - marry@equinix.com\n        - fred@equinix.com\n      hostname: csr1000v-p\n      termLength: 6\n      accountNumber: ${dc.number}\n      version: 16.09.05\n      coreCount: 2\n      secondaryDevice:\n        name: tf-csr1000v-s\n        metroCode: ${sv.metroCode}\n        hostname: csr1000v-s\n        notifications:\n          - john@equinix.com\n          - marry@equinix.com\n        accountNumber: ${sv.number}\nvariables:\n  dc:\n    Fn::Invoke:\n      Function: equinix:GetNetworkAccount\n      Arguments:\n        metroCode: DC\n  sv:\n    Fn::Invoke:\n      Function: equinix:GetNetworkAccount\n      Arguments:\n        metroCode: SV\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst sv = equinix.GetNetworkAccount({\n    metroCode: \"SV\",\n});\nconst panw_cluster = new equinix.NetworkDevice(\"panw-cluster\", {\n    metroCode: sv.then(sv =\u003e sv.metroCode),\n    typeCode: \"PA-VM\",\n    selfManaged: true,\n    byol: true,\n    packageCode: \"VM100\",\n    notifications: [\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n        \"fred@equinix.com\",\n    ],\n    termLength: 6,\n    accountNumber: sv.then(sv =\u003e sv.number),\n    version: \"10.1.3\",\n    interfaceCount: 10,\n    coreCount: 2,\n    sshKey: {\n        username: \"test\",\n        keyName: \"test-key\",\n    },\n    aclTemplateId: \"0bff6e05-f0e7-44cd-804a-25b92b835f8b\",\n    clusterDetails: {\n        clusterName: \"tf-panw-cluster\",\n        node0: {\n            vendorConfiguration: {\n                hostname: \"panw-node0\",\n            },\n            licenseToken: \"licenseToken\",\n        },\n        node1: {\n            vendorConfiguration: {\n                hostname: \"panw-node1\",\n            },\n            licenseToken: \"licenseToken\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nsv = equinix.get_network_account(metro_code=\"SV\")\npanw_cluster = equinix.NetworkDevice(\"panw-cluster\",\n    metro_code=sv.metro_code,\n    type_code=\"PA-VM\",\n    self_managed=True,\n    byol=True,\n    package_code=\"VM100\",\n    notifications=[\n        \"john@equinix.com\",\n        \"marry@equinix.com\",\n        \"fred@equinix.com\",\n    ],\n    term_length=6,\n    account_number=sv.number,\n    version=\"10.1.3\",\n    interface_count=10,\n    core_count=2,\n    ssh_key=equinix.NetworkDeviceSshKeyArgs(\n        username=\"test\",\n        key_name=\"test-key\",\n    ),\n    acl_template_id=\"0bff6e05-f0e7-44cd-804a-25b92b835f8b\",\n    cluster_details=equinix.NetworkDeviceClusterDetailsArgs(\n        cluster_name=\"tf-panw-cluster\",\n        node0=equinix.NetworkDeviceClusterDetailsNode0Args(\n            vendor_configuration=equinix.NetworkDeviceClusterDetailsNode0VendorConfigurationArgs(\n                hostname=\"panw-node0\",\n            ),\n            license_token=\"licenseToken\",\n        ),\n        node1=equinix.NetworkDeviceClusterDetailsNode1Args(\n            vendor_configuration=equinix.NetworkDeviceClusterDetailsNode1VendorConfigurationArgs(\n                hostname=\"panw-node1\",\n            ),\n            license_token=\"licenseToken\",\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sv = Output.Create(Equinix.GetNetworkAccount.InvokeAsync(new Equinix.GetNetworkAccountArgs\n        {\n            MetroCode = \"SV\",\n        }));\n        var panw_cluster = new Equinix.NetworkDevice(\"panw-cluster\", new Equinix.NetworkDeviceArgs\n        {\n            MetroCode = sv.Apply(sv =\u003e sv.MetroCode),\n            TypeCode = \"PA-VM\",\n            SelfManaged = true,\n            Byol = true,\n            PackageCode = \"VM100\",\n            Notifications = \n            {\n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n                \"fred@equinix.com\",\n            },\n            TermLength = 6,\n            AccountNumber = sv.Apply(sv =\u003e sv.Number),\n            Version = \"10.1.3\",\n            InterfaceCount = 10,\n            CoreCount = 2,\n            SshKey = new Equinix.Inputs.NetworkDeviceSshKeyArgs\n            {\n                Username = \"test\",\n                KeyName = \"test-key\",\n            },\n            AclTemplateId = \"0bff6e05-f0e7-44cd-804a-25b92b835f8b\",\n            ClusterDetails = new Equinix.Inputs.NetworkDeviceClusterDetailsArgs\n            {\n                ClusterName = \"tf-panw-cluster\",\n                Node0 = new Equinix.Inputs.NetworkDeviceClusterDetailsNode0Args\n                {\n                    VendorConfiguration = new Equinix.Inputs.NetworkDeviceClusterDetailsNode0VendorConfigurationArgs\n                    {\n                        Hostname = \"panw-node0\",\n                    },\n                    LicenseToken = \"licenseToken\",\n                },\n                Node1 = new Equinix.Inputs.NetworkDeviceClusterDetailsNode1Args\n                {\n                    VendorConfiguration = new Equinix.Inputs.NetworkDeviceClusterDetailsNode1VendorConfigurationArgs\n                    {\n                        Hostname = \"panw-node1\",\n                    },\n                    LicenseToken = \"licenseToken\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsv, err := equinix.GetNetworkAccount(ctx, \u0026GetNetworkAccountArgs{\n\t\t\tMetroCode: \"SV\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewNetworkDevice(ctx, \"panw-cluster\", \u0026equinix.NetworkDeviceArgs{\n\t\t\tMetroCode:   pulumi.String(sv.MetroCode),\n\t\t\tTypeCode:    pulumi.String(\"PA-VM\"),\n\t\t\tSelfManaged: pulumi.Bool(true),\n\t\t\tByol:        pulumi.Bool(true),\n\t\t\tPackageCode: pulumi.String(\"VM100\"),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"john@equinix.com\"),\n\t\t\t\tpulumi.String(\"marry@equinix.com\"),\n\t\t\t\tpulumi.String(\"fred@equinix.com\"),\n\t\t\t},\n\t\t\tTermLength:     pulumi.Int(6),\n\t\t\tAccountNumber:  pulumi.String(sv.Number),\n\t\t\tVersion:        pulumi.String(\"10.1.3\"),\n\t\t\tInterfaceCount: pulumi.Int(10),\n\t\t\tCoreCount:      pulumi.Int(2),\n\t\t\tSshKey: \u0026NetworkDeviceSshKeyArgs{\n\t\t\t\tUsername: pulumi.String(\"test\"),\n\t\t\t\tKeyName:  pulumi.String(\"test-key\"),\n\t\t\t},\n\t\t\tAclTemplateId: pulumi.String(\"0bff6e05-f0e7-44cd-804a-25b92b835f8b\"),\n\t\t\tClusterDetails: \u0026NetworkDeviceClusterDetailsArgs{\n\t\t\t\tClusterName: pulumi.String(\"tf-panw-cluster\"),\n\t\t\t\tNode0: \u0026NetworkDeviceClusterDetailsNode0Args{\n\t\t\t\t\tVendorConfiguration: \u0026NetworkDeviceClusterDetailsNode0VendorConfigurationArgs{\n\t\t\t\t\t\tHostname: pulumi.String(\"panw-node0\"),\n\t\t\t\t\t},\n\t\t\t\t\tLicenseToken: pulumi.String(\"licenseToken\"),\n\t\t\t\t},\n\t\t\t\tNode1: \u0026NetworkDeviceClusterDetailsNode1Args{\n\t\t\t\t\tVendorConfiguration: \u0026NetworkDeviceClusterDetailsNode1VendorConfigurationArgs{\n\t\t\t\t\t\tHostname: pulumi.String(\"panw-node1\"),\n\t\t\t\t\t},\n\t\t\t\t\tLicenseToken: pulumi.String(\"licenseToken\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sv = EquinixFunctions.GetNetworkAccount();\n\n        var panw_cluster = new NetworkDevice(\"panw-cluster\", NetworkDeviceArgs.builder()        \n            .metroCode(sv.metroCode())\n            .typeCode(\"PA-VM\")\n            .selfManaged(true)\n            .byol(true)\n            .packageCode(\"VM100\")\n            .notifications(            \n                \"john@equinix.com\",\n                \"marry@equinix.com\",\n                \"fred@equinix.com\")\n            .termLength(6)\n            .accountNumber(sv.number())\n            .version(\"10.1.3\")\n            .interfaceCount(10)\n            .coreCount(2)\n            .sshKey(NetworkDeviceSshKeyArgs.builder()\n                .username(\"test\")\n                .keyName(\"test-key\")\n                .build())\n            .aclTemplateId(\"0bff6e05-f0e7-44cd-804a-25b92b835f8b\")\n            .clusterDetails(NetworkDeviceClusterDetailsArgs.builder()\n                .clusterName(\"tf-panw-cluster\")\n                .node0(NetworkDeviceClusterDetailsNode0Args.builder()\n                    .vendorConfiguration(NetworkDeviceClusterDetailsNode0VendorConfigurationArgs.builder()\n                        .hostname(\"panw-node0\")\n                        .build())\n                    .licenseToken(\"licenseToken\")\n                    .build())\n                .node1(NetworkDeviceClusterDetailsNode1Args.builder()\n                    .vendorConfiguration(NetworkDeviceClusterDetailsNode1VendorConfigurationArgs.builder()\n                        .hostname(\"panw-node1\")\n                        .build())\n                    .licenseToken(\"licenseToken\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  panw-cluster:\n    type: equinix:NetworkDevice\n    properties:\n      metroCode: ${sv.metroCode}\n      typeCode: PA-VM\n      selfManaged: true\n      byol: true\n      packageCode: VM100\n      notifications:\n        - john@equinix.com\n        - marry@equinix.com\n        - fred@equinix.com\n      termLength: 6\n      accountNumber: ${sv.number}\n      version: 10.1.3\n      interfaceCount: 10\n      coreCount: 2\n      sshKey:\n        username: test\n        keyName: test-key\n      aclTemplateId: 0bff6e05-f0e7-44cd-804a-25b92b835f8b\n      clusterDetails:\n        clusterName: tf-panw-cluster\n        node0:\n          vendorConfiguration:\n            hostname: panw-node0\n          licenseToken: licenseToken\n        node1:\n          vendorConfiguration:\n            hostname: panw-node1\n          licenseToken: licenseToken\nvariables:\n  sv:\n    Fn::Invoke:\n      Function: equinix:GetNetworkAccount\n      Arguments:\n        metroCode: SV\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/networkDevice:NetworkDevice example {existing_id}\n```\n\n The `license_token` and `mgtm_acl_template_uuid` fields can not be imported. ",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for a device.\n"
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of an ACL template that will be applied on the device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                },
                "asn": {
                    "type": "integer",
                    "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                },
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n"
                },
                "clusterDetails": {
                    "$ref": "#/types/equinix:index/NetworkDeviceClusterDetails:NetworkDeviceClusterDetails",
                    "description": "An object that has the cluster details. See\nCluster Details below for more details.\n"
                },
                "coreCount": {
                    "type": "integer",
                    "description": "Number of CPU cores used by device.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix.\n"
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name.\n"
                },
                "interfaceCount": {
                    "type": "integer",
                    "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkDeviceInterface:NetworkDeviceInterface"
                    },
                    "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some devices types in BYOL licensing mode.\n"
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "License file id. This is necessary for Fortinet and Juniper clusters.\n"
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License token. This is necessary for Palo Alto clusters.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code.\n"
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status\nnotifications.\n"
                },
                "orderReference": {
                    "type": "string",
                    "description": "Name/number used to identify device order on the invoice.\n"
                },
                "packageCode": {
                    "type": "string",
                    "description": "Device software package code.\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number associated with a device order.\n"
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Device location region.\n"
                },
                "secondaryDevice": {
                    "$ref": "#/types/equinix:index/NetworkDeviceSecondaryDevice:NetworkDeviceSecondaryDevice",
                    "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n"
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix managed` (default).\n"
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device.\n"
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device.\n"
                },
                "sshKey": {
                    "$ref": "#/types/equinix:index/NetworkDeviceSshKey:NetworkDeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n"
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                },
                "termLength": {
                    "type": "integer",
                    "description": "Device term length.\n"
                },
                "throughput": {
                    "type": "integer",
                    "description": "Device license throughput.\n"
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "License throughput unit. One of `Mbps` or `Gbps`.\n"
                },
                "typeCode": {
                    "type": "string",
                    "description": "Device type code.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n"
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object that has fields relevant to the vendor of the\ncluster device. See Cluster Details - Nodes - Vendor Configuration\nbelow for more details.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Device software software version.\n"
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n"
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code.\n"
                }
            },
            "required": [
                "accountNumber",
                "additionalBandwidth",
                "asn",
                "coreCount",
                "hostname",
                "ibx",
                "interfaces",
                "interfaceCount",
                "licenseFileId",
                "licenseStatus",
                "metroCode",
                "name",
                "notifications",
                "packageCode",
                "redundancyType",
                "redundantId",
                "region",
                "sshIpAddress",
                "sshIpFqdn",
                "status",
                "termLength",
                "typeCode",
                "uuid",
                "vendorConfiguration",
                "version",
                "zoneCode"
            ],
            "inputProperties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for a device.\n",
                    "willReplaceOnChanges": true
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of an ACL template that will be applied on the device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                },
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n",
                    "willReplaceOnChanges": true
                },
                "clusterDetails": {
                    "$ref": "#/types/equinix:index/NetworkDeviceClusterDetails:NetworkDeviceClusterDetails",
                    "description": "An object that has the cluster details. See\nCluster Details below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "coreCount": {
                    "type": "integer",
                    "description": "Number of CPU cores used by device.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix.\n",
                    "willReplaceOnChanges": true
                },
                "interfaceCount": {
                    "type": "integer",
                    "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n",
                    "willReplaceOnChanges": true
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some devices types in BYOL licensing mode.\n",
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License token. This is necessary for Palo Alto clusters.\n",
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code.\n",
                    "willReplaceOnChanges": true
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status\nnotifications.\n"
                },
                "orderReference": {
                    "type": "string",
                    "description": "Name/number used to identify device order on the invoice.\n",
                    "willReplaceOnChanges": true
                },
                "packageCode": {
                    "type": "string",
                    "description": "Device software package code.\n",
                    "willReplaceOnChanges": true
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number associated with a device order.\n",
                    "willReplaceOnChanges": true
                },
                "secondaryDevice": {
                    "$ref": "#/types/equinix:index/NetworkDeviceSecondaryDevice:NetworkDeviceSecondaryDevice",
                    "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix managed` (default).\n",
                    "willReplaceOnChanges": true
                },
                "sshKey": {
                    "$ref": "#/types/equinix:index/NetworkDeviceSshKey:NetworkDeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n",
                    "willReplaceOnChanges": true
                },
                "termLength": {
                    "type": "integer",
                    "description": "Device term length.\n"
                },
                "throughput": {
                    "type": "integer",
                    "description": "Device license throughput.\n",
                    "willReplaceOnChanges": true
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "License throughput unit. One of `Mbps` or `Gbps`.\n",
                    "willReplaceOnChanges": true
                },
                "typeCode": {
                    "type": "string",
                    "description": "Device type code.\n",
                    "willReplaceOnChanges": true
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object that has fields relevant to the vendor of the\ncluster device. See Cluster Details - Nodes - Vendor Configuration\nbelow for more details.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Device software software version.\n",
                    "willReplaceOnChanges": true
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountNumber",
                "coreCount",
                "metroCode",
                "notifications",
                "packageCode",
                "termLength",
                "typeCode",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkDevice resources.\n",
                "properties": {
                    "accountNumber": {
                        "type": "string",
                        "description": "Billing account number for a device.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclTemplateId": {
                        "type": "string",
                        "description": "Identifier of an ACL template that will be applied on the device.\n"
                    },
                    "additionalBandwidth": {
                        "type": "integer",
                        "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                    },
                    "asn": {
                        "type": "integer",
                        "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                    },
                    "byol": {
                        "type": "boolean",
                        "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterDetails": {
                        "$ref": "#/types/equinix:index/NetworkDeviceClusterDetails:NetworkDeviceClusterDetails",
                        "description": "An object that has the cluster details. See\nCluster Details below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "coreCount": {
                        "type": "integer",
                        "description": "Number of CPU cores used by device.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Device hostname prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Device location Equinix Business Exchange name.\n"
                    },
                    "interfaceCount": {
                        "type": "integer",
                        "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/NetworkDeviceInterface:NetworkDeviceInterface"
                        },
                        "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                    },
                    "licenseFile": {
                        "type": "string",
                        "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some devices types in BYOL licensing mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "licenseFileId": {
                        "type": "string",
                        "description": "License file id. This is necessary for Fortinet and Juniper clusters.\n"
                    },
                    "licenseStatus": {
                        "type": "string",
                        "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                    },
                    "licenseToken": {
                        "type": "string",
                        "description": "License token. This is necessary for Palo Alto clusters.\n",
                        "willReplaceOnChanges": true
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "Device location metro code.\n",
                        "willReplaceOnChanges": true
                    },
                    "mgmtAclTemplateUuid": {
                        "type": "string",
                        "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses that will receive device status\nnotifications.\n"
                    },
                    "orderReference": {
                        "type": "string",
                        "description": "Name/number used to identify device order on the invoice.\n",
                        "willReplaceOnChanges": true
                    },
                    "packageCode": {
                        "type": "string",
                        "description": "Device software package code.\n",
                        "willReplaceOnChanges": true
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "Purchase order number associated with a device order.\n",
                        "willReplaceOnChanges": true
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                    },
                    "redundantId": {
                        "type": "string",
                        "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Device location region.\n"
                    },
                    "secondaryDevice": {
                        "$ref": "#/types/equinix:index/NetworkDeviceSecondaryDevice:NetworkDeviceSecondaryDevice",
                        "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfManaged": {
                        "type": "boolean",
                        "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix managed` (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "sshIpAddress": {
                        "type": "string",
                        "description": "IP address of SSH enabled interface on the device.\n"
                    },
                    "sshIpFqdn": {
                        "type": "string",
                        "description": "FQDN of SSH enabled interface on the device.\n"
                    },
                    "sshKey": {
                        "$ref": "#/types/equinix:index/NetworkDeviceSshKey:NetworkDeviceSshKey",
                        "description": "Definition of SSH key that will be provisioned on a device\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                    },
                    "termLength": {
                        "type": "integer",
                        "description": "Device term length.\n"
                    },
                    "throughput": {
                        "type": "integer",
                        "description": "Device license throughput.\n",
                        "willReplaceOnChanges": true
                    },
                    "throughputUnit": {
                        "type": "string",
                        "description": "License throughput unit. One of `Mbps` or `Gbps`.\n",
                        "willReplaceOnChanges": true
                    },
                    "typeCode": {
                        "type": "string",
                        "description": "Device type code.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device unique identifier.\n"
                    },
                    "vendorConfiguration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An object that has fields relevant to the vendor of the\ncluster device. See Cluster Details - Nodes - Vendor Configuration\nbelow for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Device software software version.\n",
                        "willReplaceOnChanges": true
                    },
                    "wanInterfaceId": {
                        "type": "string",
                        "description": "device interface id picked for WAN\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneCode": {
                        "type": "string",
                        "description": "Device location zone code.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/networkDeviceLink:NetworkDeviceLink": {
            "description": "Resource `equinix.NetworkDeviceLink` allows creation and management of Equinix\nNetwork Edge virtual network device links.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Example of device link with HA device pair\n// where each device is in different metro\nconst test = new equinix.NetworkDeviceLink(\"test\", {\n    subnet: \"192.168.40.64/27\",\n    devices: [\n        {\n            id: equinix_network_device.test.uuid,\n            asn: equinix_network_device.test.asn \u003e 0 ? equinix_network_device.test.asn : 22111,\n            interfaceId: 6,\n        },\n        {\n            id: equinix_network_device.test.secondary_device[0].uuid,\n            asn: equinix_network_device.test.secondary_device[0].asn \u003e 0 ? equinix_network_device.test.secondary_device[0].asn : 22333,\n            interfaceId: 7,\n        },\n    ],\n    links: [{\n        accountNumber: equinix_network_device.test.account_number,\n        srcMetroCode: equinix_network_device.test.metro_code,\n        dstMetroCode: equinix_network_device.test.secondary_device[0].metro_code,\n        throughput: \"50\",\n        throughputUnit: \"Mbps\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Example of device link with HA device pair\n# where each device is in different metro\ntest = equinix.NetworkDeviceLink(\"test\",\n    subnet=\"192.168.40.64/27\",\n    devices=[\n        equinix.NetworkDeviceLinkDeviceArgs(\n            id=equinix_network_device[\"test\"][\"uuid\"],\n            asn=equinix_network_device[\"test\"][\"asn\"] if equinix_network_device[\"test\"][\"asn\"] \u003e 0 else 22111,\n            interface_id=6,\n        ),\n        equinix.NetworkDeviceLinkDeviceArgs(\n            id=equinix_network_device[\"test\"][\"secondary_device\"][0][\"uuid\"],\n            asn=equinix_network_device[\"test\"][\"secondary_device\"][0][\"asn\"] if equinix_network_device[\"test\"][\"secondary_device\"][0][\"asn\"] \u003e 0 else 22333,\n            interface_id=7,\n        ),\n    ],\n    links=[equinix.NetworkDeviceLinkLinkArgs(\n        account_number=equinix_network_device[\"test\"][\"account_number\"],\n        src_metro_code=equinix_network_device[\"test\"][\"metro_code\"],\n        dst_metro_code=equinix_network_device[\"test\"][\"secondary_device\"][0][\"metro_code\"],\n        throughput=\"50\",\n        throughput_unit=\"Mbps\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Example of device link with HA device pair\n        // where each device is in different metro\n        var test = new Equinix.NetworkDeviceLink(\"test\", new Equinix.NetworkDeviceLinkArgs\n        {\n            Subnet = \"192.168.40.64/27\",\n            Devices = \n            {\n                new Equinix.Inputs.NetworkDeviceLinkDeviceArgs\n                {\n                    Id = equinix_network_device.Test.Uuid,\n                    Asn = equinix_network_device.Test.Asn \u003e 0 ? equinix_network_device.Test.Asn : 22111,\n                    InterfaceId = 6,\n                },\n                new Equinix.Inputs.NetworkDeviceLinkDeviceArgs\n                {\n                    Id = equinix_network_device.Test.Secondary_device[0].Uuid,\n                    Asn = equinix_network_device.Test.Secondary_device[0].Asn \u003e 0 ? equinix_network_device.Test.Secondary_device[0].Asn : 22333,\n                    InterfaceId = 7,\n                },\n            },\n            Links = \n            {\n                new Equinix.Inputs.NetworkDeviceLinkLinkArgs\n                {\n                    AccountNumber = equinix_network_device.Test.Account_number,\n                    SrcMetroCode = equinix_network_device.Test.Metro_code,\n                    DstMetroCode = equinix_network_device.Test.Secondary_device[0].Metro_code,\n                    Throughput = \"50\",\n                    ThroughputUnit = \"Mbps\",\n                },\n            },\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new NetworkDeviceLink(\"test\", NetworkDeviceLinkArgs.builder()        \n            .subnet(\"192.168.40.64/27\")\n            .devices(            \n                NetworkDeviceLinkDeviceArgs.builder()\n                    .id(equinix_network_device.test().uuid())\n                    .asn(equinix_network_device.test().asn() \u003e 0 ? equinix_network_device.test().asn() : 22111)\n                    .interfaceId(6)\n                    .build(),\n                NetworkDeviceLinkDeviceArgs.builder()\n                    .id(equinix_network_device.test().secondary_device()[0].uuid())\n                    .asn(equinix_network_device.test().secondary_device()[0].asn() \u003e 0 ? equinix_network_device.test().secondary_device()[0].asn() : 22333)\n                    .interfaceId(7)\n                    .build())\n            .links(NetworkDeviceLinkLinkArgs.builder()\n                .accountNumber(equinix_network_device.test().account_number())\n                .srcMetroCode(equinix_network_device.test().metro_code())\n                .dstMetroCode(equinix_network_device.test().secondary_device()[0].metro_code())\n                .throughput(\"50\")\n                .throughputUnit(\"Mbps\")\n                .build())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/networkDeviceLink:NetworkDeviceLink example {existing_id}\n```\n\n ",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkDeviceLinkDevice:NetworkDeviceLinkDevice"
                    },
                    "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkDeviceLinkLink:NetworkDeviceLinkLink"
                    },
                    "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "device link name.\n"
                },
                "status": {
                    "type": "string",
                    "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device link unique identifier.\n"
                }
            },
            "required": [
                "devices",
                "name",
                "status",
                "uuid"
            ],
            "inputProperties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkDeviceLinkDevice:NetworkDeviceLinkDevice"
                    },
                    "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:index/NetworkDeviceLinkLink:NetworkDeviceLinkLink"
                    },
                    "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "device link name.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                }
            },
            "requiredInputs": [
                "devices"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkDeviceLink resources.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/NetworkDeviceLinkDevice:NetworkDeviceLinkDevice"
                        },
                        "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/NetworkDeviceLinkLink:NetworkDeviceLinkLink"
                        },
                        "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "device link name.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device link unique identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/networkSSHKey:NetworkSSHKey": {
            "description": "Resource `equinix.NetworkSSHKey` allows creation and management of Equinix Network Edge SSH keys.\n\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/networkSSHKey:NetworkSSHKey example {existing_id}\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of SSH key used for identification.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The unique identifier of the key\n"
                }
            },
            "required": [
                "name",
                "publicKey",
                "uuid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of SSH key used for identification.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSSHKey resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of SSH key used for identification.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The unique identifier of the key\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:index/networkSSHUser:NetworkSSHUser": {
            "description": "Resource `equinix.NetworkSSHUser` allows creation and management of Equinix Network\nEdge SSH users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create SSH user with password auth method and associate it with\n// two virtual network devices\nconst john = new equinix.NetworkSSHUser(\"john\", {\n    username: \"john\",\n    password: \"secret\",\n    deviceIds: [\n        equinix_ne_device[\"csr1000v-ha\"].uuid,\n        equinix_ne_device[\"csr1000v-ha\"].redundant_uuid,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create SSH user with password auth method and associate it with\n# two virtual network devices\njohn = equinix.NetworkSSHUser(\"john\",\n    username=\"john\",\n    password=\"secret\",\n    device_ids=[\n        equinix_ne_device[\"csr1000v-ha\"][\"uuid\"],\n        equinix_ne_device[\"csr1000v-ha\"][\"redundant_uuid\"],\n    ])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create SSH user with password auth method and associate it with\n        // two virtual network devices\n        var john = new Equinix.NetworkSSHUser(\"john\", new Equinix.NetworkSSHUserArgs\n        {\n            Username = \"john\",\n            Password = \"secret\",\n            DeviceIds = \n            {\n                equinix_ne_device.Csr1000v_ha.Uuid,\n                equinix_ne_device.Csr1000v_ha.Redundant_uuid,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewNetworkSSHUser(ctx, \"john\", \u0026equinix.NetworkSSHUserArgs{\n\t\t\tUsername: pulumi.String(\"john\"),\n\t\t\tPassword: pulumi.String(\"secret\"),\n\t\t\tDeviceIds: pulumi.StringArray{\n\t\t\t\tpulumi.Any(equinix_ne_device.Csr1000v - ha.Uuid),\n\t\t\t\tpulumi.Any(equinix_ne_device.Csr1000v - ha.Redundant_uuid),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var john = new NetworkSSHUser(\"john\", NetworkSSHUserArgs.builder()        \n            .username(\"john\")\n            .password(\"secret\")\n            .deviceIds(            \n                equinix_ne_device.csr1000v-ha().uuid(),\n                equinix_ne_device.csr1000v-ha().redundant_uuid())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  john:\n    type: equinix:NetworkSSHUser\n    properties:\n      username: john\n      password: secret\n      deviceIds:\n        - ${equinix_ne_device\"csr1000v-ha\"[%!s(MISSING)].uuid}\n        - ${equinix_ne_device\"csr1000v-ha\"[%!s(MISSING)].redundant_uuid}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:index/networkSSHUser:NetworkSSHUser example {existing_id}\n```\n\n ",
            "properties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device identifiers to which user will have access.\n"
                },
                "password": {
                    "type": "string",
                    "description": "SSH user password.\n"
                },
                "username": {
                    "type": "string",
                    "description": "SSH user login name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "SSH user unique identifier.\n"
                }
            },
            "required": [
                "deviceIds",
                "password",
                "username",
                "uuid"
            ],
            "inputProperties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device identifiers to which user will have access.\n"
                },
                "password": {
                    "type": "string",
                    "description": "SSH user password.\n"
                },
                "username": {
                    "type": "string",
                    "description": "SSH user login name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deviceIds",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSSHUser resources.\n",
                "properties": {
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of device identifiers to which user will have access.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "SSH user password.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "SSH user login name.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "SSH user unique identifier.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "equinix:index/getECXL2Sellerprofile:GetECXL2Sellerprofile": {
            "description": "Use this data source to get details of Equinix Fabric layer 2 seller profile with a given name\nand / or organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst aws = equinix.GetECXL2Sellerprofile({\n    name: \"AWS Direct Connect\",\n});\nexport const id = aws.then(aws =\u003e aws.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\naws = equinix.get_ecxl2_sellerprofile(name=\"AWS Direct Connect\")\npulumi.export(\"id\", aws.id)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var aws = Output.Create(Equinix.GetECXL2Sellerprofile.InvokeAsync(new Equinix.GetECXL2SellerprofileArgs\n        {\n            Name = \"AWS Direct Connect\",\n        }));\n        this.Id = aws.Apply(aws =\u003e aws.Id);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taws, err := equinix.GetECXL2Sellerprofile(ctx, \u0026GetECXL2SellerprofileArgs{\n\t\t\tName: pulumi.StringRef(\"AWS Direct Connect\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", aws.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var aws = EquinixFunctions.GetECXL2Sellerprofile();\n\n        ctx.export(\"id\", aws.id());\n    }\n}\n```\n```yaml\nvariables:\n  aws:\n    Fn::Invoke:\n      Function: equinix:GetECXL2Sellerprofile\n      Arguments:\n        name: AWS Direct Connect\noutputs:\n  id: ${aws.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetECXL2Sellerprofile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the seller profile.\n"
                    },
                    "organizationGlobalName": {
                        "type": "string",
                        "description": "Name of seller's global organization.\n"
                    },
                    "organizationName": {
                        "type": "string",
                        "description": "Name of seller's organization.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetECXL2Sellerprofile.\n",
                "properties": {
                    "additionalInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetECXL2SellerprofileAdditionalInfo:GetECXL2SellerprofileAdditionalInfo"
                        },
                        "description": "One or more specifications of additional buyer information attributes that\ncan be provided in connection definition that uses given seller profile.\nSee Additional Info Attribute below for more details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Textual description of additional information attribute.\n"
                    },
                    "encapsulation": {
                        "type": "string",
                        "description": "Seller profile's encapsulation (either Dot1q or QinQ).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metros": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetECXL2SellerprofileMetro:GetECXL2SellerprofileMetro"
                        },
                        "description": "One or more specifications of metro locations supported by seller profile.\nSee Metro Attribute below for more details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of additional information attribute.\n"
                    },
                    "organizationGlobalName": {
                        "type": "string"
                    },
                    "organizationName": {
                        "type": "string"
                    },
                    "redundancyRequired": {
                        "type": "boolean",
                        "description": "Boolean that indicate if seller requires connections to be redundant\n"
                    },
                    "speedBands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetECXL2SellerprofileSpeedBand:GetECXL2SellerprofileSpeedBand"
                        },
                        "description": "One or more specifications of speed/bandwidth supported by given seller profile.\nSee Speed Band Attribute below for more details.\n"
                    },
                    "speedCustomizationAllowed": {
                        "type": "boolean",
                        "description": "Boolean that indicates if seller allows customer to enter a\ncustom connection speed.\n"
                    },
                    "speedFromApi": {
                        "type": "boolean",
                        "description": "Boolean that indicates if seller is deriving connection speed from an API call.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the seller profile.\n"
                    }
                },
                "type": "object",
                "required": [
                    "additionalInfos",
                    "description",
                    "encapsulation",
                    "metros",
                    "name",
                    "organizationGlobalName",
                    "organizationName",
                    "redundancyRequired",
                    "speedBands",
                    "speedCustomizationAllowed",
                    "speedFromApi",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:index/getECXL2Sellerprofiles:GetECXL2Sellerprofiles": {
            "description": "Use this data source to get details of available Equinix Fabric layer 2 seller profiles. It is\npossible to apply filtering criteria for returned list of profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst aws = pulumi.output(equinix.GetECXL2Sellerprofiles({\n    metroCodes: [\n        \"SV\",\n        \"DC\",\n    ],\n    organizationGlobalName: \"AWS\",\n    speedBands: [\n        \"1GB\",\n        \"500MB\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\naws = equinix.get_ecxl2_sellerprofiles(metro_codes=[\n        \"SV\",\n        \"DC\",\n    ],\n    organization_global_name=\"AWS\",\n    speed_bands=[\n        \"1GB\",\n        \"500MB\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var aws = Output.Create(Equinix.GetECXL2Sellerprofiles.InvokeAsync(new Equinix.GetECXL2SellerprofilesArgs\n        {\n            MetroCodes = \n            {\n                \"SV\",\n                \"DC\",\n            },\n            OrganizationGlobalName = \"AWS\",\n            SpeedBands = \n            {\n                \"1GB\",\n                \"500MB\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetECXL2Sellerprofiles(ctx, \u0026GetECXL2SellerprofilesArgs{\n\t\t\tMetroCodes: []string{\n\t\t\t\t\"SV\",\n\t\t\t\t\"DC\",\n\t\t\t},\n\t\t\tOrganizationGlobalName: pulumi.StringRef(\"AWS\"),\n\t\t\tSpeedBands: []string{\n\t\t\t\t\"1GB\",\n\t\t\t\t\"500MB\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var aws = EquinixFunctions.GetECXL2Sellerprofiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  aws:\n    Fn::Invoke:\n      Function: equinix:GetECXL2Sellerprofiles\n      Arguments:\n        metroCodes:\n          - SV\n          - DC\n        organizationGlobalName: AWS\n        speedBands:\n          - 1GB\n          - 500MB\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetECXL2Sellerprofiles.\n",
                "properties": {
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of metro codes of locations that should be served by resulting\nprofiles.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to apply on returned seller profile names and filter\nsearch results.\n"
                    },
                    "organizationGlobalName": {
                        "type": "string",
                        "description": "Name of seller's global organization.\n"
                    },
                    "organizationName": {
                        "type": "string",
                        "description": "Name of seller's organization.\n"
                    },
                    "speedBands": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of speed bands that should be supported by resulting profiles.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetECXL2Sellerprofiles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "organizationGlobalName": {
                        "type": "string"
                    },
                    "organizationName": {
                        "type": "string"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetECXL2SellerprofilesProfile:GetECXL2SellerprofilesProfile"
                        },
                        "description": "List of resulting profiles. Each element in the `profiles` list exports all\nService Profile Attributes.\n"
                    },
                    "speedBands": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "profiles",
                    "id"
                ]
            }
        },
        "equinix:index/getECXPort:GetECXPort": {
            "description": "Use this data source to get details of Equinix Fabric port with a given name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst tf-pri-dot1q = equinix.GetECXPort({\n    name: \"sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157\",\n});\nexport const id = tf_pri_dot1q.then(tf_pri_dot1q =\u003e tf_pri_dot1q.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntf_pri_dot1q = equinix.get_ecx_port(name=\"sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157\")\npulumi.export(\"id\", tf_pri_dot1q.id)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tf_pri_dot1q = Output.Create(Equinix.GetECXPort.InvokeAsync(new Equinix.GetECXPortArgs\n        {\n            Name = \"sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157\",\n        }));\n        this.Id = tf_pri_dot1q.Apply(tf_pri_dot1q =\u003e tf_pri_dot1q.Id);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttf_pri_dot1q, err := equinix.GetECXPort(ctx, \u0026GetECXPortArgs{\n\t\t\tName: \"sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", tf_pri_dot1q.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tf-pri-dot1q = EquinixFunctions.GetECXPort();\n\n        ctx.export(\"id\", tf_pri_dot1q.id());\n    }\n}\n```\n```yaml\nvariables:\n  tf-pri-dot1q:\n    Fn::Invoke:\n      Function: equinix:GetECXPort\n      Arguments:\n        name: sit-001-CX-NY5-NL-Dot1q-BO-10G-PRI-JP-157\noutputs:\n  id: ${[\"tf-pri-dot1q\"].id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetECXPort.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the port.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetECXPort.\n",
                "properties": {
                    "bandwidth": {
                        "type": "string",
                        "description": "Port Bandwidth in bytes.\n"
                    },
                    "buyout": {
                        "type": "boolean",
                        "description": "Boolean value that indicates whether the port supports unlimited connections. If\n`false`, the port is a standard port with limited connections. If `true`, the port is an\n`unlimited connections` port that allows multiple connections at no additional charge.\n"
                    },
                    "encapsulation": {
                        "type": "string",
                        "description": "The VLAN encapsulation of the port (Dot1q or QinQ).\n"
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Port location Equinix Business Exchange (IBX).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "Port location metro code.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority of the device (primary / secondary) where the port\nresides.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Port location region.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Port status that indicates whether a port has been assigned or is ready for\nconnection.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the port.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "buyout",
                    "encapsulation",
                    "ibx",
                    "metroCode",
                    "name",
                    "priority",
                    "region",
                    "status",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalConnection:GetMetalConnection": {
            "description": "Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)\n\n\u003e Equinix Metal connection with service_token_type `a_side` is not generally available and may not be enabled yet for your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = pulumi.output(equinix.GetMetalConnection({\n    connectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.get_metal_connection(connection_id=\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Equinix.GetMetalConnection.InvokeAsync(new Equinix.GetMetalConnectionArgs\n        {\n            ConnectionId = \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetMetalConnection(ctx, \u0026GetMetalConnectionArgs{\n\t\t\tConnectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = EquinixFunctions.GetMetalConnection();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: equinix:GetMetalConnection\n      Arguments:\n        connectionId: 4347e805-eb46-4699-9eb9-5c116e6a017d\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "ID of the connection resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the connection resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Slug of a facility to which the connection belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Slug of a metro to which the connection belongs.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization where the connection is scoped to.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalConnectionPort:GetMetalConnectionPort"
                        },
                        "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to which the connection belongs.\n"
                    },
                    "redundancy": {
                        "type": "string",
                        "description": "Connection redundancy, reduntant or primary.\n"
                    },
                    "serviceTokenType": {
                        "type": "string",
                        "description": "Type of service token, a_side or z_side. One available in shared connection.\n"
                    },
                    "serviceTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalConnectionServiceToken:GetMetalConnectionServiceToken"
                        },
                        "description": "List of connection service tokens with attributes\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Port speed in bits per second.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Port status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Deprecated) Token to configure the connection in the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Token type, `a_side` or `z_side`.\n"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "description",
                    "facility",
                    "metro",
                    "mode",
                    "name",
                    "organizationId",
                    "ports",
                    "projectId",
                    "redundancy",
                    "serviceTokenType",
                    "serviceTokens",
                    "speed",
                    "status",
                    "tags",
                    "token",
                    "type",
                    "vlans",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalDevice:GetMetalDevice": {
            "description": "Provides an Equinix Metal device datasource.\n\n\u003e **Note:** All arguments including the `root_password` and `user_data` will be stored in\n the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.GetMetalDevice({\n    projectId: local.project_id,\n    hostname: \"mydevice\",\n});\nexport const id = test.then(test =\u003e test.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.get_metal_device(project_id=local[\"project_id\"],\n    hostname=\"mydevice\")\npulumi.export(\"id\", test.id)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Equinix.GetMetalDevice.InvokeAsync(new Equinix.GetMetalDeviceArgs\n        {\n            ProjectId = local.Project_id,\n            Hostname = \"mydevice\",\n        }));\n        this.Id = test.Apply(test =\u003e test.Id);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := equinix.GetMetalDevice(ctx, \u0026GetMetalDeviceArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tHostname:  pulumi.StringRef(\"mydevice\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", test.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = EquinixFunctions.GetMetalDevice();\n\n        ctx.export(\"id\", test.id());\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: equinix:GetMetalDevice\n      Arguments:\n        projectId: ${local.project_id}\n        hostname: mydevice\noutputs:\n  id: ${test.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.GetMetalDevice({\n    deviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n});\nexport const ipv4 = test.then(test =\u003e test.accessPublicIpv4);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.get_metal_device(device_id=\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\npulumi.export(\"ipv4\", test.access_public_ipv4)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Equinix.GetMetalDevice.InvokeAsync(new Equinix.GetMetalDeviceArgs\n        {\n            DeviceId = \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n        }));\n        this.Ipv4 = test.Apply(test =\u003e test.AccessPublicIpv4);\n    }\n\n    [Output(\"ipv4\")]\n    public Output\u003cstring\u003e Ipv4 { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := equinix.GetMetalDevice(ctx, \u0026GetMetalDeviceArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ipv4\", test.AccessPublicIpv4)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = EquinixFunctions.GetMetalDevice();\n\n        ctx.export(\"ipv4\", test.accessPublicIpv4());\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: equinix:GetMetalDevice\n      Arguments:\n        deviceId: 4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\noutputs:\n  ipv4: ${test.accessPublicIpv4}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device ID.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The device name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project in which the devices exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalDevice.\n",
                "properties": {
                    "accessPrivateIpv4": {
                        "type": "string",
                        "description": "The ipv4 private IP assigned to the device.\n"
                    },
                    "accessPublicIpv4": {
                        "type": "string",
                        "description": "The ipv4 management IP assigned to the device.\n"
                    },
                    "accessPublicIpv6": {
                        "type": "string",
                        "description": "The ipv6 management IP assigned to the device.\n"
                    },
                    "alwaysPxe": {
                        "type": "boolean"
                    },
                    "billingCycle": {
                        "type": "string",
                        "description": "The billing cycle of the device (monthly or hourly).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string for the device.\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string",
                        "description": "The facility where the device is deployed.\n"
                    },
                    "hardwareReservationId": {
                        "type": "string",
                        "description": "The id of hardware reservation which this device occupies.\n"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipxeScriptUrl": {
                        "type": "string"
                    },
                    "metro": {
                        "type": "string",
                        "description": "The metro where the device is deployed\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "L2 network type of the device, one of `layer3`, `layer2-bonded`,\n`layer2-individual`, `hybrid`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalDeviceNetwork:GetMetalDeviceNetwork"
                        },
                        "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                    },
                    "operatingSystem": {
                        "type": "string",
                        "description": "The operating system running on the device.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The hardware config of the device.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalDevicePort:GetMetalDevicePort"
                        },
                        "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Root password to the server (if still available).\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of SSH keys deployed in the device, can be both user or project SSH keys.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the device.\n"
                    },
                    "storage": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the device.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessPrivateIpv4",
                    "accessPublicIpv4",
                    "accessPublicIpv6",
                    "alwaysPxe",
                    "billingCycle",
                    "description",
                    "deviceId",
                    "facility",
                    "hardwareReservationId",
                    "hostname",
                    "ipxeScriptUrl",
                    "metro",
                    "networks",
                    "networkType",
                    "operatingSystem",
                    "plan",
                    "ports",
                    "projectId",
                    "rootPassword",
                    "sshKeyIds",
                    "state",
                    "storage",
                    "tags",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalDeviceBGPNeighbors:GetMetalDeviceBGPNeighbors": {
            "description": "Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.\n\nTo have any BGP neighbors listed, the device must be in BGP-enabled project\nand have a BGP session assigned.\n\nTo learn more about using BGP in Equinix Metal, see the\nequinix.MetalBGPSession resource documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.GetMetalDeviceBGPNeighbors({\n    deviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n});\nexport const bgpNeighborsListing = test.then(test =\u003e test.bgpNeighbors);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.get_metal_device_bgp_neighbors(device_id=\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\npulumi.export(\"bgpNeighborsListing\", test.bgp_neighbors)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Equinix.GetMetalDeviceBGPNeighbors.InvokeAsync(new Equinix.GetMetalDeviceBGPNeighborsArgs\n        {\n            DeviceId = \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n        }));\n        this.BgpNeighborsListing = test.Apply(test =\u003e test.BgpNeighbors);\n    }\n\n    [Output(\"bgpNeighborsListing\")]\n    public Output\u003cstring\u003e BgpNeighborsListing { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := equinix.GetMetalDeviceBGPNeighbors(ctx, \u0026GetMetalDeviceBGPNeighborsArgs{\n\t\t\tDeviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"bgpNeighborsListing\", test.BgpNeighbors)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = EquinixFunctions.GetMetalDeviceBGPNeighbors();\n\n        ctx.export(\"bgpNeighborsListing\", test.bgpNeighbors());\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: equinix:GetMetalDeviceBGPNeighbors\n      Arguments:\n        deviceId: 4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\noutputs:\n  bgpNeighborsListing: ${test.bgpNeighbors}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalDeviceBGPNeighbors.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of BGP-enabled device whose neighbors to list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalDeviceBGPNeighbors.\n",
                "properties": {
                    "bgpNeighbors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalDeviceBGPNeighborsBgpNeighbor:GetMetalDeviceBGPNeighborsBgpNeighbor"
                        },
                        "description": "array of BGP neighbor records with attributes:\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bgpNeighbors",
                    "deviceId",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalFacility:GetMetalFacility": {
            "description": "Provides an Equinix Metal facility datasource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalFacility.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalFacilityCapacity:GetMetalFacilityCapacity"
                        },
                        "description": "One or more device plans for which the facility must have capacity.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The facility code to search for facilities.\n"
                    },
                    "featuresRequireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of feature strings that the facility must have. Some\npossible values are `baremetal`, `ibx`, `storage`, `global_ipv4`, `backend_transfer`, `layer_2`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalFacility.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalFacilityCapacity:GetMetalFacilityCapacity"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features of the facility.\n"
                    },
                    "featuresRequireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "The metro code the facility is part of.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the facility.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "features",
                    "metro",
                    "name",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalGateway:GetMetalGateway": {
            "description": "Use this datasource to retrieve Metal Gateway resources in Equinix Metal.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\nconst testMetalVlan = new equinix.MetalVlan(\"testMetalVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testGetMetalGateway = equinix.GetMetalGateway({\n    gatewayId: local.gateway_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\ntest_metal_vlan = equinix.MetalVlan(\"testMetalVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_get_metal_gateway = equinix.get_metal_gateway(gateway_id=local[\"gateway_id\"])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n        var testMetalVlan = new Equinix.MetalVlan(\"testMetalVlan\", new Equinix.MetalVlanArgs\n        {\n            Description = \"test VLAN in SV\",\n            Metro = \"sv\",\n            ProjectId = local.Project_id,\n        });\n        var testGetMetalGateway = Output.Create(Equinix.GetMetalGateway.InvokeAsync(new Equinix.GetMetalGatewayArgs\n        {\n            GatewayId = local.Gateway_id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.NewMetalVlan(ctx, \"testMetalVlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.GetMetalGateway(ctx, \u0026GetMetalGatewayArgs{\n\t\t\tGatewayId: local.Gateway_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testMetalVlan = new MetalVlan(\"testMetalVlan\", MetalVlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        final var testGetMetalGateway = EquinixFunctions.GetMetalGateway();\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalVlan:\n    type: equinix:MetalVlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\nvariables:\n  testGetMetalGateway:\n    Fn::Invoke:\n      Function: equinix:GetMetalGateway\n      Arguments:\n        gatewayId: ${local.gateway_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalGateway.\n",
                "properties": {
                    "gatewayId": {
                        "type": "string",
                        "description": "UUID of the metal gateway resource to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalGateway.\n",
                "properties": {
                    "gatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipReservationId": {
                        "type": "string",
                        "description": "UUID of IP reservation block bound to the gateway.\n"
                    },
                    "privateIpv4SubnetSize": {
                        "type": "integer",
                        "description": "Size of the private IPv4 subnet bound to this metal gateway. One of\n`8`, `16`, `32`, `64`, `128`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the gateway is scoped to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the gateway resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN where the gateway is scoped to.\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF associated with the IP Reservation.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayId",
                    "ipReservationId",
                    "privateIpv4SubnetSize",
                    "projectId",
                    "state",
                    "vlanId",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalHardwareReservation:GetMetalHardwareReservation": {
            "description": "Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).\n\nYou can look up hardware reservation by its ID or by ID of device which occupies it.\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalHardwareReservation.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of device occupying the reservation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the hardware reservation.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalHardwareReservation.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of device occupying the reservation.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Plan type for the reservation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the hardware reservation to look up.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Plan type for the reservation.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of project this reservation is scoped to.\n"
                    },
                    "provisionable": {
                        "type": "boolean",
                        "description": "Flag indicating whether the reserved server is provisionable or not. Spare\ndevices can't be provisioned unless they are activated first.\n"
                    },
                    "shortId": {
                        "type": "string",
                        "description": "Reservation short ID.\n"
                    },
                    "spare": {
                        "type": "boolean",
                        "description": "Flag indicating whether the Hardware Reservation is a spare. Spare Hardware\nReservations are used when a Hardware Reservations requires service from Metal Equinix.\n"
                    },
                    "switchUuid": {
                        "type": "string",
                        "description": "Switch short ID, can be used to determine if two devices are connected to the\nsame switch.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceId",
                    "facility",
                    "id",
                    "plan",
                    "projectId",
                    "provisionable",
                    "shortId",
                    "spare",
                    "switchUuid"
                ]
            }
        },
        "equinix:index/getMetalIPBlockRanges:GetMetalIPBlockRanges": {
            "description": "Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.\n\nThere are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.\n\nThe datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`\u003cnetwork\u003e/\u003cmask\u003e`) of respective blocks from the project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst test = equinix.GetMetalIPBlockRanges({\n    projectId: projectId,\n});\nexport const out = test;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest = equinix.get_metal_ip_block_ranges(project_id=project_id)\npulumi.export(\"out\", test)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var projectId = \"\u003cUUID_of_your_project\u003e\";\n        var test = Output.Create(Equinix.GetMetalIPBlockRanges.InvokeAsync(new Equinix.GetMetalIPBlockRangesArgs\n        {\n            ProjectId = projectId,\n        }));\n        this.Out = test;\n    }\n\n    [Output(\"out\")]\n    public Output\u003cstring\u003e Out { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttest, err := equinix.GetMetalIPBlockRanges(ctx, \u0026GetMetalIPBlockRangesArgs{\n\t\t\tProjectId: projectId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        final var test = EquinixFunctions.GetMetalIPBlockRanges();\n\n        ctx.export(\"out\", test);\n    }\n}\n```\n```yaml\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n  test:\n    Fn::Invoke:\n      Function: equinix:GetMetalIPBlockRanges\n      Arguments:\n        projectId: ${projectId}\noutputs:\n  out: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalIPBlockRanges.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Facility code filtering the IP blocks. Global IPv4 blcoks will be listed\nanyway. If you omit this and metro, all the block from the project will be listed.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro code filtering the IP blocks. Global IPv4 blcoks will be listed\nanyway. If you omit this and facility, all the block from the project will be listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project from which to list the blocks.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalIPBlockRanges.\n",
                "properties": {
                    "facility": {
                        "type": "string"
                    },
                    "globalIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Global IPv4 blocks in the project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for IPv6 blocks in the project.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "privateIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Private IPv4 blocks in the project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Public IPv4 blocks in the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "globalIpv4s",
                    "ipv6s",
                    "privateIpv4s",
                    "projectId",
                    "publicIpv4s",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalMetro:GetMetalMetro": {
            "description": "Provides an Equinix Metal metro datasource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalMetro.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalMetroCapacity:GetMetalMetroCapacity"
                        },
                        "description": "One or more device plans for which the facility must have capacity.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The facility code to search for facilities.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalMetro.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalMetroCapacity:GetMetalMetroCapacity"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country of the metro.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the metro.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the metro.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "country",
                    "id",
                    "name"
                ]
            }
        },
        "equinix:index/getMetalOperatingSystem:GetMetalOperatingSystem": {
            "description": "Use this data source to get Equinix Metal Operating System image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.GetMetalOperatingSystem({\n    distro: \"ubuntu\",\n    version: \"20.04\",\n    provisionableOn: \"c3.medium.x86\",\n});\nconst server = new equinix.MetalDevice(\"server\", {\n    hostname: \"tf.ubuntu\",\n    plan: \"c3.medium.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: example.then(example =\u003e example.id),\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.get_metal_operating_system(distro=\"ubuntu\",\n    version=\"20.04\",\n    provisionable_on=\"c3.medium.x86\")\nserver = equinix.MetalDevice(\"server\",\n    hostname=\"tf.ubuntu\",\n    plan=\"c3.medium.x86\",\n    facilities=[\"ny5\"],\n    operating_system=example.id,\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Equinix.GetMetalOperatingSystem.InvokeAsync(new Equinix.GetMetalOperatingSystemArgs\n        {\n            Distro = \"ubuntu\",\n            Version = \"20.04\",\n            ProvisionableOn = \"c3.medium.x86\",\n        }));\n        var server = new Equinix.MetalDevice(\"server\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"tf.ubuntu\",\n            Plan = \"c3.medium.x86\",\n            Facilities = \n            {\n                \"ny5\",\n            },\n            OperatingSystem = example.Apply(example =\u003e example.Id),\n            BillingCycle = \"hourly\",\n            ProjectId = local.Project_id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := equinix.GetMetalOperatingSystem(ctx, \u0026GetMetalOperatingSystemArgs{\n\t\t\tDistro:          pulumi.StringRef(\"ubuntu\"),\n\t\t\tVersion:         pulumi.StringRef(\"20.04\"),\n\t\t\tProvisionableOn: pulumi.StringRef(\"c3.medium.x86\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.NewMetalDevice(ctx, \"server\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"tf.ubuntu\"),\n\t\t\tPlan:     pulumi.String(\"c3.medium.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(example.Id),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = EquinixFunctions.GetMetalOperatingSystem();\n\n        var server = new MetalDevice(\"server\", MetalDeviceArgs.builder()        \n            .hostname(\"tf.ubuntu\")\n            .plan(\"c3.medium.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(example.id())\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: equinix:MetalDevice\n    properties:\n      hostname: tf.ubuntu\n      plan: c3.medium.x86\n      facilities:\n        - ny5\n      operatingSystem: ${example.id}\n      billingCycle: hourly\n      projectId: ${local.project_id}\nvariables:\n  example:\n    Fn::Invoke:\n      Function: equinix:GetMetalOperatingSystem\n      Arguments:\n        distro: ubuntu\n        version: 20.04\n        provisionableOn: c3.medium.x86\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalOperatingSystem.\n",
                "properties": {
                    "distro": {
                        "type": "string",
                        "description": "Name of the OS distribution.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name or part of the name of the distribution. Case insensitive.\n"
                    },
                    "provisionableOn": {
                        "type": "string",
                        "description": "Plan name.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the distribution.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalOperatingSystem.\n",
                "properties": {
                    "distro": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "provisionableOn": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Operating system slug (same as `id`).\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slug",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalOrganization:GetMetalOrganization": {
            "description": "Provides an Equinix Metal organization datasource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.GetMetalOrganization({\n    organizationId: local.org_id,\n});\nexport const projectsInTheOrg = test.then(test =\u003e test.projectIds);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.get_metal_organization(organization_id=local[\"org_id\"])\npulumi.export(\"projectsInTheOrg\", test.project_ids)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Equinix.GetMetalOrganization.InvokeAsync(new Equinix.GetMetalOrganizationArgs\n        {\n            OrganizationId = local.Org_id,\n        }));\n        this.ProjectsInTheOrg = test.Apply(test =\u003e test.ProjectIds);\n    }\n\n    [Output(\"projectsInTheOrg\")]\n    public Output\u003cstring\u003e ProjectsInTheOrg { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := equinix.GetMetalOrganization(ctx, \u0026GetMetalOrganizationArgs{\n\t\t\tOrganizationId: pulumi.StringRef(local.Org_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectsInTheOrg\", test.ProjectIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = EquinixFunctions.GetMetalOrganization();\n\n        ctx.export(\"projectsInTheOrg\", test.projectIds());\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: equinix:GetMetalOrganization\n      Arguments:\n        organizationId: ${local.org_id}\noutputs:\n  projectsInTheOrg: ${test.projectIds}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalOrganization.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalOrganizationAddress:GetMetalOrganizationAddress"
                        },
                        "description": "Postal address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The organization name.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of the organization resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalOrganization.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalOrganizationAddress:GetMetalOrganizationAddress"
                        },
                        "description": "Postal address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Logo URL.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of project resources which belong to this organization.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter handle.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website link.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "description",
                    "logo",
                    "name",
                    "organizationId",
                    "projectIds",
                    "twitter",
                    "website",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalPlans:GetMetalPlans": {
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalPlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalPlansFilter:GetMetalPlansFilter"
                        },
                        "description": "One or more attribute/values pairs to filter off of\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalPlansSort:GetMetalPlansSort"
                        },
                        "description": "One or more attribute/direction pairs on which to sort results. If multiple\nsorts are provided, they will be applied in order\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalPlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalPlansFilter:GetMetalPlansFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "plans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalPlansPlan:GetMetalPlansPlan"
                        },
                        "description": "The ID of the facility\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalPlansSort:GetMetalPlansSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "plans",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalPort:GetMetalPort": {
            "description": "Use this data source to read ports of existing devices. You can read port by either its UUID,\nor by a device UUID and port name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a device and read it's eth0 port to the datasource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst testMetalDevice = new equinix.MetalDevice(\"testMetalDevice\", {\n    hostname: \"tfacc-test-device-port\",\n    plan: \"c3.medium.x86\",\n    facilities: [\"sv15\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: projectId,\n});\nconst testGetMetalPort = equinix.GetMetalPortOutput({\n    deviceId: testMetalDevice.id,\n    name: \"eth0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest_metal_device = equinix.MetalDevice(\"testMetalDevice\",\n    hostname=\"tfacc-test-device-port\",\n    plan=\"c3.medium.x86\",\n    facilities=[\"sv15\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=project_id)\ntest_get_metal_port = equinix.get_metal_port_output(device_id=test_metal_device.id,\n    name=\"eth0\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var projectId = \"\u003cUUID_of_your_project\u003e\";\n        var testMetalDevice = new Equinix.MetalDevice(\"testMetalDevice\", new Equinix.MetalDeviceArgs\n        {\n            Hostname = \"tfacc-test-device-port\",\n            Plan = \"c3.medium.x86\",\n            Facilities = \n            {\n                \"sv15\",\n            },\n            OperatingSystem = \"ubuntu_20_04\",\n            BillingCycle = \"hourly\",\n            ProjectId = projectId,\n        });\n        var testGetMetalPort = Equinix.GetMetalPort.Invoke(new Equinix.GetMetalPortInvokeArgs\n        {\n            DeviceId = testMetalDevice.Id,\n            Name = \"eth0\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttestMetalDevice, err := equinix.NewMetalDevice(ctx, \"testMetalDevice\", \u0026equinix.MetalDeviceArgs{\n\t\t\tHostname: pulumi.String(\"tfacc-test-device-port\"),\n\t\t\tPlan:     pulumi.String(\"c3.medium.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sv15\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = equinix.GetMetalPortOutput(ctx, GetMetalPortOutputArgs{\n\t\t\tDeviceId: testMetalDevice.ID(),\n\t\t\tName:     pulumi.String(\"eth0\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        var testMetalDevice = new MetalDevice(\"testMetalDevice\", MetalDeviceArgs.builder()        \n            .hostname(\"tfacc-test-device-port\")\n            .plan(\"c3.medium.x86\")\n            .facilities(\"sv15\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(projectId)\n            .build());\n\n        final var testGetMetalPort = EquinixFunctions.GetMetalPort(Map.ofEntries(\n            Map.entry(\"deviceId\", testMetalDevice.id()),\n            Map.entry(\"name\", \"eth0\")\n        ));\n\n    }\n}\n```\n```yaml\nresources:\n  testMetalDevice:\n    type: equinix:MetalDevice\n    properties:\n      hostname: tfacc-test-device-port\n      plan: c3.medium.x86\n      facilities:\n        - sv15\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${projectId}\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n  testGetMetalPort:\n    Fn::Invoke:\n      Function: equinix:GetMetalPort\n      Arguments:\n        deviceId: ${testMetalDevice.id}\n        name: eth0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalPort.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device UUID where to lookup the port.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the port to look up, i.e. `bond0`, `eth1`.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "ID of the port to read, conflicts with `device_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalPort.\n",
                "properties": {
                    "bondId": {
                        "type": "string",
                        "description": "UUID of the bond port.\n"
                    },
                    "bondName": {
                        "type": "string",
                        "description": "Name of the bond port.\n"
                    },
                    "bonded": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port is bonded.\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "disbondSupported": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port can be removed from a bond.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "layer2": {
                        "type": "boolean"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the port.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nativeVlanId": {
                        "type": "string",
                        "description": "UUID of native VLAN of the port.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "One of `layer2-bonded`, `layer2-individual`, `layer3`, `hybrid`, `hybrid-bonded`.\n"
                    },
                    "portId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type is either `NetworkBondPort` for bond ports or `NetworkPort` for bondable ethernet ports.\n"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of attached VLANs.\n"
                    },
                    "vxlanIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "VXLAN ids of attached VLANs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bondId",
                    "bondName",
                    "bonded",
                    "disbondSupported",
                    "layer2",
                    "mac",
                    "name",
                    "nativeVlanId",
                    "networkType",
                    "type",
                    "vlanIds",
                    "vxlanIds",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalPrecreatedIPBlock:GetMetalPrecreatedIPBlock": {
            "description": "Use this data source to get CIDR expression for precreated IPv6 and IPv4 blocks in Equinix Metal.\nYou can then use the cidrsubnet TF builtin function to derive subnets.\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalPrecreatedIPBlock.\n",
                "properties": {
                    "addressFamily": {
                        "type": "integer",
                        "description": "4 or 6, depending on which block you are looking for.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility of the searched block. (for non-global blocks).\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Whether to look for global block. Default is false for backward compatibility.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro of the searched block (for non-global blocks).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project where the searched block should be.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether to look for public or private block.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addressFamily",
                    "projectId",
                    "public"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalPrecreatedIPBlock.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer"
                    },
                    "cidr": {
                        "type": "integer"
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "CIDR notation of the looked up block.\n"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "addressFamily",
                    "cidr",
                    "cidrNotation",
                    "gateway",
                    "manageable",
                    "management",
                    "netmask",
                    "network",
                    "projectId",
                    "public",
                    "quantity",
                    "type",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalProject:GetMetalProject": {
            "description": "Use this datasource to retrieve attributes of the Project API resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst tfProject1 = equinix.GetMetalProject({\n    name: \"Terraform Fun\",\n});\nexport const usersOfTerraformFun = tfProject1.then(tfProject1 =\u003e tfProject1.userIds);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntf_project1 = equinix.get_metal_project(name=\"Terraform Fun\")\npulumi.export(\"usersOfTerraformFun\", tf_project1.user_ids)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tfProject1 = Output.Create(Equinix.GetMetalProject.InvokeAsync(new Equinix.GetMetalProjectArgs\n        {\n            Name = \"Terraform Fun\",\n        }));\n        this.UsersOfTerraformFun = tfProject1.Apply(tfProject1 =\u003e tfProject1.UserIds);\n    }\n\n    [Output(\"usersOfTerraformFun\")]\n    public Output\u003cstring\u003e UsersOfTerraformFun { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttfProject1, err := equinix.GetMetalProject(ctx, \u0026GetMetalProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Terraform Fun\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"usersOfTerraformFun\", tfProject1.UserIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tfProject1 = EquinixFunctions.GetMetalProject();\n\n        ctx.export(\"usersOfTerraformFun\", tfProject1.userIds());\n    }\n}\n```\n```yaml\nvariables:\n  tfProject1:\n    Fn::Invoke:\n      Function: equinix:GetMetalProject\n      Arguments:\n        name: Terraform Fun\noutputs:\n  usersOfTerraformFun: ${tfProject1.userIds}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name which is used to look up the project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The UUID by which to look up the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalProject.\n",
                "properties": {
                    "backendTransfer": {
                        "type": "boolean",
                        "description": "Whether Backend Transfer is enabled for this project.\n"
                    },
                    "bgpConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetMetalProjectBgpConfig:GetMetalProjectBgpConfig"
                        },
                        "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the project was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of this project's parent organization.\n"
                    },
                    "paymentMethodId": {
                        "type": "string",
                        "description": "The UUID of payment method for this project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the project was updated.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of UUIDs of user accounts which belong to this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backendTransfer",
                    "bgpConfigs",
                    "created",
                    "name",
                    "organizationId",
                    "paymentMethodId",
                    "projectId",
                    "updated",
                    "userIds",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalProjectSSHKey:GetMetalProjectSSHKey": {
            "description": "Use this datasource to retrieve attributes of a Project SSH Key API resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst myKey = equinix.GetMetalProjectSSHKey({\n    search: \"username@hostname\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nmy_key = equinix.get_metal_project_ssh_key(search=\"username@hostname\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myKey = Output.Create(Equinix.GetMetalProjectSSHKey.InvokeAsync(new Equinix.GetMetalProjectSSHKeyArgs\n        {\n            Search = \"username@hostname\",\n            ProjectId = local.Project_id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetMetalProjectSSHKey(ctx, \u0026GetMetalProjectSSHKeyArgs{\n\t\t\tSearch:    pulumi.StringRef(\"username@hostname\"),\n\t\t\tProjectId: local.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = EquinixFunctions.GetMetalProjectSSHKey();\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    Fn::Invoke:\n      Function: equinix:GetMetalProjectSSHKey\n      Arguments:\n        search: username@hostname\n        projectId: ${local.project_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalProjectSSHKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the SSH Key to search for in the Equinix Metal project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Equinix Metal project id of the Equinix Metal SSH Key.\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "The name, fingerprint, or public_key of the SSH Key to search for\nin the Equinix Metal project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalProjectSSHKey.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of parent project (same as project_id).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of parent project.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The text of the public key.\n"
                    },
                    "search": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "fingerprint",
                    "id",
                    "name",
                    "ownerId",
                    "projectId",
                    "publicKey",
                    "updated"
                ]
            }
        },
        "equinix:index/getMetalReservedIPBlock:GetMetalReservedIPBlock": {
            "description": "Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block\nID for lookup.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalReservedIPBlock.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of the IP address block to look up.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Block containing this IP address will be returned.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the searched block should be.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalReservedIPBlock.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer"
                    },
                    "cidr": {
                        "type": "integer"
                    },
                    "cidrNotation": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "One of `global_ipv4`, `public_ipv4`, `private_ipv4`, `public_ipv6`,or `vrf`\n"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "addressFamily",
                    "cidr",
                    "cidrNotation",
                    "facility",
                    "gateway",
                    "global",
                    "id",
                    "manageable",
                    "management",
                    "metro",
                    "netmask",
                    "network",
                    "projectId",
                    "public",
                    "quantity",
                    "type",
                    "vrfId"
                ]
            }
        },
        "equinix:index/getMetalSpotMarketPrice:GetMetalSpotMarketPrice": {
            "description": "Use this data source to get Equinix Metal Spot Market Price for a plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nLookup by facility:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = pulumi.output(equinix.GetMetalSpotMarketPrice({\n    facility: \"ny5\",\n    plan: \"c3.small.x86\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.get_metal_spot_market_price(facility=\"ny5\",\n    plan=\"c3.small.x86\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Equinix.GetMetalSpotMarketPrice.InvokeAsync(new Equinix.GetMetalSpotMarketPriceArgs\n        {\n            Facility = \"ny5\",\n            Plan = \"c3.small.x86\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetMetalSpotMarketPrice(ctx, \u0026GetMetalSpotMarketPriceArgs{\n\t\t\tFacility: pulumi.StringRef(\"ny5\"),\n\t\t\tPlan:     \"c3.small.x86\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = EquinixFunctions.GetMetalSpotMarketPrice();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: equinix:GetMetalSpotMarketPrice\n      Arguments:\n        facility: ny5\n        plan: c3.small.x86\n```\n\nLookup by metro:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = pulumi.output(equinix.GetMetalSpotMarketPrice({\n    metro: \"sv\",\n    plan: \"c3.small.x86\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.get_metal_spot_market_price(metro=\"sv\",\n    plan=\"c3.small.x86\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Equinix.GetMetalSpotMarketPrice.InvokeAsync(new Equinix.GetMetalSpotMarketPriceArgs\n        {\n            Metro = \"sv\",\n            Plan = \"c3.small.x86\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetMetalSpotMarketPrice(ctx, \u0026GetMetalSpotMarketPriceArgs{\n\t\t\tMetro: pulumi.StringRef(\"sv\"),\n\t\t\tPlan:  \"c3.small.x86\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = EquinixFunctions.GetMetalSpotMarketPrice();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: equinix:GetMetalSpotMarketPrice\n      Arguments:\n        metro: sv\n        plan: c3.small.x86\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalSpotMarketPrice.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Name of the facility.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Name of the metro.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Name of the plan.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plan"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalSpotMarketPrice.\n",
                "properties": {
                    "facility": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "description": "Current spot market price for given plan in given facility.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plan",
                    "price",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalSpotMarketRequest:GetMetalSpotMarketRequest": {
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalSpotMarketRequest.\n",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "The id of the Spot Market Request.\n"
                    }
                },
                "type": "object",
                "required": [
                    "requestId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalSpotMarketRequest.\n",
                "properties": {
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of devices spawned by the referenced Spot Market Request.\n"
                    },
                    "devicesMax": {
                        "type": "integer",
                        "description": "Maximum number devices to be created.\n"
                    },
                    "devicesMin": {
                        "type": "integer",
                        "description": "Miniumum number devices to be created.\n"
                    },
                    "endAt": {
                        "type": "string",
                        "description": "Date and time When the spot market request will be ended.\n"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Facility IDs where devices should be created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxBidPrice": {
                        "type": "number",
                        "description": "Maximum price user is willing to pay per hour per device.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where devices should be created.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The device plan slug.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID.\n"
                    },
                    "requestId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deviceIds",
                    "devicesMax",
                    "devicesMin",
                    "endAt",
                    "facilities",
                    "maxBidPrice",
                    "metro",
                    "plan",
                    "projectId",
                    "requestId",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalVRF:GetMetalVRF": {
            "description": "Use this data source to retrieve a VRF resource.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleVrf = pulumi.output(equinix.GetMetalVRF({\n    vrfId: \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_vrf = equinix.get_metal_vrf(vrf_id=\"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleVrf = Output.Create(Equinix.GetMetalVRF.InvokeAsync(new Equinix.GetMetalVRFArgs\n        {\n            VrfId = \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetMetalVRF(ctx, \u0026GetMetalVRFArgs{\n\t\t\tVrfId: \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleVrf = EquinixFunctions.GetMetalVRF();\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleVrf:\n    Fn::Invoke:\n      Function: equinix:GetMetalVRF\n      Arguments:\n        vrfId: 48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalVRF.\n",
                "properties": {
                    "vrfId": {
                        "type": "string",
                        "description": "ID of the VRF resource\n"
                    }
                },
                "type": "object",
                "required": [
                    "vrfId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalVRF.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VRF.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "The 4-byte ASN set on the VRF.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro ID or Code where the VRF will be deployed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name of the VRF, unique to the project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID where the VRF will be deployed.\n"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipRanges",
                    "localAsn",
                    "metro",
                    "name",
                    "projectId",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalVirtualCircuit:GetMetalVirtualCircuit": {
            "description": "Use this data source to retrieve a virtual circuit resource from\n[Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleConnection = equinix.GetMetalConnection({\n    connectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n});\nconst exampleVc = exampleConnection.then(exampleConnection =\u003e equinix.GetMetalVirtualCircuit({\n    virtualCircuitId: exampleConnection.ports?[1]?.virtualCircuitIds?[0],\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_connection = equinix.get_metal_connection(connection_id=\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\nexample_vc = equinix.get_metal_virtual_circuit(virtual_circuit_id=example_connection.ports[1].virtual_circuit_ids[0])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleConnection = Output.Create(Equinix.GetMetalConnection.InvokeAsync(new Equinix.GetMetalConnectionArgs\n        {\n            ConnectionId = \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n        }));\n        var exampleVc = exampleConnection.Apply(exampleConnection =\u003e Output.Create(Equinix.GetMetalVirtualCircuit.InvokeAsync(new Equinix.GetMetalVirtualCircuitArgs\n        {\n            VirtualCircuitId = exampleConnection.Ports?[1]?.VirtualCircuitIds?[0],\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleConnection, err := equinix.GetMetalConnection(ctx, \u0026GetMetalConnectionArgs{\n\t\t\tConnectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.GetMetalVirtualCircuit(ctx, \u0026GetMetalVirtualCircuitArgs{\n\t\t\tVirtualCircuitId: exampleConnection.Ports[1].VirtualCircuitIds[0],\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleConnection = EquinixFunctions.GetMetalConnection();\n\n        final var exampleVc = EquinixFunctions.GetMetalVirtualCircuit();\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleConnection:\n    Fn::Invoke:\n      Function: equinix:GetMetalConnection\n      Arguments:\n        connectionId: 4347e805-eb46-4699-9eb9-5c116e6a017d\n  exampleVc:\n    Fn::Invoke:\n      Function: equinix:GetMetalVirtualCircuit\n      Arguments:\n        virtualCircuitId: ${exampleConnection.ports[1].virtualCircuitIds[0]}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalVirtualCircuit.\n",
                "properties": {
                    "virtualCircuitId": {
                        "type": "string",
                        "description": "ID of the virtual circuit resource\n"
                    }
                },
                "type": "object",
                "required": [
                    "virtualCircuitId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalVirtualCircuit.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "UUID of Connection where the VC is scoped to.\n"
                    },
                    "customerIp": {
                        "type": "string",
                        "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Virtual Circuit resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "The password that can be set for the VRF BGP peer\n"
                    },
                    "metalIp": {
                        "type": "string",
                        "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the virtual circuit resource.\n"
                    },
                    "nniVlan": {
                        "type": "integer"
                    },
                    "nniVnid": {
                        "type": "integer"
                    },
                    "peerAsn": {
                        "type": "integer",
                        "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of the Connection Port where the VC is scoped to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to which the VC belongs.\n* `vnid`, `nni_vlan`, `nni_nvid` - VLAN parameters, see the\n[documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Speed of the Virtual Circuit resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtal circuit.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for the Virtual Circuit resource.\n"
                    },
                    "virtualCircuitId": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vnid": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VLAN to associate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "customerIp",
                    "description",
                    "md5",
                    "metalIp",
                    "name",
                    "nniVlan",
                    "nniVnid",
                    "peerAsn",
                    "portId",
                    "projectId",
                    "speed",
                    "status",
                    "subnet",
                    "tags",
                    "virtualCircuitId",
                    "vlanId",
                    "vnid",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:index/getMetalVlan:GetMetalVlan": {
            "description": "Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be\nsearched by VLAN UUID, or project UUID and vxlan number.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a vlan by ID:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst foovlan = new equinix.MetalVlan(\"foovlan\", {\n    projectId: local.project_id,\n    metro: \"sv\",\n    vxlan: 5,\n});\nconst dsvlan = equinix.GetMetalVlanOutput({\n    vlanId: foovlan.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nfoovlan = equinix.MetalVlan(\"foovlan\",\n    project_id=local[\"project_id\"],\n    metro=\"sv\",\n    vxlan=5)\ndsvlan = equinix.get_metal_vlan_output(vlan_id=foovlan.id)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foovlan = new Equinix.MetalVlan(\"foovlan\", new Equinix.MetalVlanArgs\n        {\n            ProjectId = local.Project_id,\n            Metro = \"sv\",\n            Vxlan = 5,\n        });\n        var dsvlan = Equinix.GetMetalVlan.Invoke(new Equinix.GetMetalVlanInvokeArgs\n        {\n            VlanId = foovlan.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoovlan, err := equinix.NewMetalVlan(ctx, \"foovlan\", \u0026equinix.MetalVlanArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tVxlan:     pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = equinix.GetMetalVlanOutput(ctx, GetMetalVlanOutputArgs{\n\t\t\tVlanId: foovlan.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foovlan = new MetalVlan(\"foovlan\", MetalVlanArgs.builder()        \n            .projectId(local.project_id())\n            .metro(\"sv\")\n            .vxlan(5)\n            .build());\n\n        final var dsvlan = EquinixFunctions.GetMetalVlan(Map.of(\"vlanId\", foovlan.id()));\n\n    }\n}\n```\n```yaml\nresources:\n  foovlan:\n    type: equinix:MetalVlan\n    properties:\n      projectId: ${local.project_id}\n      metro: sv\n      vxlan: 5\nvariables:\n  dsvlan:\n    Fn::Invoke:\n      Function: equinix:GetMetalVlan\n      Arguments:\n        vlanId: ${foovlan.id}\n```\n\nFetch a vlan by project ID, vxlan and metro\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dsvlan = equinix.GetMetalVlan({\n    projectId: local.project_id,\n    vxlan: 5,\n    metro: \"sv\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndsvlan = equinix.get_metal_vlan(project_id=local[\"project_id\"],\n    vxlan=5,\n    metro=\"sv\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dsvlan = Output.Create(Equinix.GetMetalVlan.InvokeAsync(new Equinix.GetMetalVlanArgs\n        {\n            ProjectId = local.Project_id,\n            Vxlan = 5,\n            Metro = \"sv\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetMetalVlan(ctx, \u0026GetMetalVlanArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tVxlan:     pulumi.IntRef(5),\n\t\t\tMetro:     pulumi.StringRef(\"sv\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dsvlan = EquinixFunctions.GetMetalVlan();\n\n    }\n}\n```\n```yaml\nvariables:\n  dsvlan:\n    Fn::Invoke:\n      Function: equinix:GetMetalVlan\n      Arguments:\n        projectId: ${local.project_id}\n        vxlan: 5\n        metro: sv\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetMetalVlan.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Facility where the VLAN is deployed.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where the VLAN is deployed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "Metal UUID of the VLAN resource to look up.\n"
                    },
                    "vxlan": {
                        "type": "integer",
                        "description": "vxlan number of the VLAN to look up. Use together with the project_id and metro or facility.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetMetalVlan.\n",
                "properties": {
                    "assignedDevicesIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device ID to which this VLAN is assigned.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description text of the VLAN resource.\n"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vxlan": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "assignedDevicesIds",
                    "description",
                    "facility",
                    "metro",
                    "projectId",
                    "vlanId",
                    "vxlan",
                    "id"
                ]
            }
        },
        "equinix:index/getNetworkAccount:GetNetworkAccount": {
            "description": "Use this data source to get number and identifier of Equinix Network Edge\nbilling account in a given metro location.\n\nBilling account reference is required to create Network Edge virtual device\nin corresponding metro location.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dc = equinix.GetNetworkAccount({\n    metroCode: \"DC\",\n    status: \"Active\",\n});\nexport const number = dc.then(dc =\u003e dc.number);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndc = equinix.get_network_account(metro_code=\"DC\",\n    status=\"Active\")\npulumi.export(\"number\", dc.number)\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dc = Output.Create(Equinix.GetNetworkAccount.InvokeAsync(new Equinix.GetNetworkAccountArgs\n        {\n            MetroCode = \"DC\",\n            Status = \"Active\",\n        }));\n        this.Number = dc.Apply(dc =\u003e dc.Number);\n    }\n\n    [Output(\"number\")]\n    public Output\u003cstring\u003e Number { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdc, err := equinix.GetNetworkAccount(ctx, \u0026GetNetworkAccountArgs{\n\t\t\tMetroCode: \"DC\",\n\t\t\tStatus:    pulumi.StringRef(\"Active\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"number\", dc.Number)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dc = EquinixFunctions.GetNetworkAccount();\n\n        ctx.export(\"number\", dc.number());\n    }\n}\n```\n```yaml\nvariables:\n  dc:\n    Fn::Invoke:\n      Function: equinix:GetNetworkAccount\n      Arguments:\n        metroCode: DC\n        status: Active\noutputs:\n  number: ${dc.number}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetNetworkAccount.\n",
                "properties": {
                    "metroCode": {
                        "type": "string",
                        "description": "Account location metro code.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Account name for filtering.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Account status for filtering. Possible values are: `Active`, `Processing`,\n`Submitted`, `Staged`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "metroCode"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetNetworkAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string",
                        "description": "Account unique number.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "ucmId": {
                        "type": "string",
                        "description": "Account unique identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "metroCode",
                    "name",
                    "number",
                    "status",
                    "ucmId",
                    "id"
                ]
            }
        },
        "equinix:index/getNetworkDevice:GetNetworkDevice": {
            "description": "Use this data source to get Equinix Network Edge device details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Retrieve data for an existing Equinix Network Edge device with UUID \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\"\nconst byUuid = pulumi.output(equinix.GetNetworkDevice({\n    uuid: \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\",\n}));\n// Retrieve data for an existing Equinix Network Edge device named \"Arcus-Gateway-A1\"\nconst byName = pulumi.output(equinix.GetNetworkDevice({\n    name: \"Arcus-Gateway-A1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nby_uuid = equinix.get_network_device(uuid=\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\")\nby_name = equinix.get_network_device(name=\"Arcus-Gateway-A1\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byUuid = Output.Create(Equinix.GetNetworkDevice.InvokeAsync(new Equinix.GetNetworkDeviceArgs\n        {\n            Uuid = \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\",\n        }));\n        var byName = Output.Create(Equinix.GetNetworkDevice.InvokeAsync(new Equinix.GetNetworkDeviceArgs\n        {\n            Name = \"Arcus-Gateway-A1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetNetworkDevice(ctx, \u0026GetNetworkDeviceArgs{\n\t\t\tUuid: pulumi.StringRef(\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = equinix.GetNetworkDevice(ctx, \u0026GetNetworkDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"Arcus-Gateway-A1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byUuid = EquinixFunctions.GetNetworkDevice();\n\n        final var byName = EquinixFunctions.GetNetworkDevice();\n\n    }\n}\n```\n```yaml\nvariables:\n  byUuid:\n    Fn::Invoke:\n      Function: equinix:GetNetworkDevice\n      Arguments:\n        uuid: f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\n  byName:\n    Fn::Invoke:\n      Function: equinix:GetNetworkDevice\n      Arguments:\n        name: Arcus-Gateway-A1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetNetworkDevice.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of an existing Equinix Network Edge device\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of an existing Equinix Network Edge device\n"
                    },
                    "validStatusList": {
                        "type": "string",
                        "description": "Device states to be considered valid when searching for a device by name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetNetworkDevice.\n",
                "properties": {
                    "accountNumber": {
                        "type": "string"
                    },
                    "aclTemplateId": {
                        "type": "string",
                        "description": "Unique identifier of applied ACL template\n"
                    },
                    "additionalBandwidth": {
                        "type": "integer"
                    },
                    "asn": {
                        "type": "integer",
                        "description": "Autonomous system number\n"
                    },
                    "byol": {
                        "type": "boolean"
                    },
                    "clusterDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetNetworkDeviceClusterDetail:GetNetworkDeviceClusterDetail"
                        }
                    },
                    "coreCount": {
                        "type": "integer"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Device location Equinix Business Exchange name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceCount": {
                        "type": "integer"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetNetworkDeviceInterface:GetNetworkDeviceInterface"
                        },
                        "description": "List of device interfaces\n* `interface.#.id` - interface identifier\n* `interface.#.name` - interface name\n* `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)\n* `interface.#.operational_status` - interface operational status (up or down)\n* `interface.#.mac_address` - interface MAC address\n* `interface.#.ip_address` - interface IP address\n* `interface.#.assigned_type` - interface management type (Equinix Managed or empty)\n* `interface.#.type` - interface type\n"
                    },
                    "licenseFile": {
                        "type": "string"
                    },
                    "licenseFileId": {
                        "type": "string",
                        "description": "Unique identifier of applied license file\n"
                    },
                    "licenseStatus": {
                        "type": "string",
                        "description": "Device license registration status\n* APPLYING_LICENSE\n* REGISTERED\n* APPLIED\n* WAITING_FOR_CLUSTER_SETUP\n* REGISTRATION_FAILED\n"
                    },
                    "licenseToken": {
                        "type": "string"
                    },
                    "metroCode": {
                        "type": "string"
                    },
                    "mgmtAclTemplateUuid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orderReference": {
                        "type": "string"
                    },
                    "packageCode": {
                        "type": "string"
                    },
                    "purchaseOrderNumber": {
                        "type": "string"
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary\n"
                    },
                    "redundantId": {
                        "type": "string",
                        "description": "Unique identifier for a redundant device applicable for HA devices\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Device location region\n"
                    },
                    "secondaryDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetNetworkDeviceSecondaryDevice:GetNetworkDeviceSecondaryDevice"
                        }
                    },
                    "selfManaged": {
                        "type": "boolean"
                    },
                    "sshIpAddress": {
                        "type": "string",
                        "description": "IP address of SSH enabled interface on the device\n"
                    },
                    "sshIpFqdn": {
                        "type": "string",
                        "description": "FQDN of SSH enabled interface on the device\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:index/GetNetworkDeviceSshKey:GetNetworkDeviceSshKey"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n"
                    },
                    "termLength": {
                        "type": "integer"
                    },
                    "throughput": {
                        "type": "integer"
                    },
                    "throughputUnit": {
                        "type": "string"
                    },
                    "typeCode": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device unique identifier\n"
                    },
                    "validStatusList": {
                        "type": "string",
                        "description": "Comma separated list of device states (from see `status` for full list) to be considered valid. Default is 'PROVISIONED'.  Case insensitive.\n"
                    },
                    "vendorConfiguration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "type": "string"
                    },
                    "wanInterfaceId": {
                        "type": "string"
                    },
                    "zoneCode": {
                        "type": "string",
                        "description": "Device location zone code\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountNumber",
                    "aclTemplateId",
                    "additionalBandwidth",
                    "asn",
                    "byol",
                    "clusterDetails",
                    "coreCount",
                    "hostname",
                    "ibx",
                    "interfaces",
                    "interfaceCount",
                    "licenseFile",
                    "licenseFileId",
                    "licenseStatus",
                    "licenseToken",
                    "metroCode",
                    "mgmtAclTemplateUuid",
                    "name",
                    "notifications",
                    "orderReference",
                    "packageCode",
                    "purchaseOrderNumber",
                    "redundancyType",
                    "redundantId",
                    "region",
                    "secondaryDevices",
                    "selfManaged",
                    "sshIpAddress",
                    "sshIpFqdn",
                    "sshKeys",
                    "status",
                    "termLength",
                    "throughput",
                    "throughputUnit",
                    "typeCode",
                    "uuid",
                    "vendorConfiguration",
                    "version",
                    "wanInterfaceId",
                    "zoneCode",
                    "id"
                ]
            }
        },
        "equinix:index/getNetworkDevicePlatform:GetNetworkDevicePlatform": {
            "description": "Use this data source to get Equinix Network Edge device platform configuration details\nfor a given device type. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Retrieve platform configuration of a large flavor for a CSR100V device type\n// Platform has to support IPBASE software package\nconst csrLarge = pulumi.output(equinix.GetNetworkDevicePlatform({\n    deviceType: \"CSR1000V\",\n    flavor: \"large\",\n    packages: [\"IPBASE\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncsr_large = equinix.get_network_device_platform(device_type=\"CSR1000V\",\n    flavor=\"large\",\n    packages=[\"IPBASE\"])\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var csrLarge = Output.Create(Equinix.GetNetworkDevicePlatform.InvokeAsync(new Equinix.GetNetworkDevicePlatformArgs\n        {\n            DeviceType = \"CSR1000V\",\n            Flavor = \"large\",\n            Packages = \n            {\n                \"IPBASE\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetNetworkDevicePlatform(ctx, \u0026GetNetworkDevicePlatformArgs{\n\t\t\tDeviceType: \"CSR1000V\",\n\t\t\tFlavor:     pulumi.StringRef(\"large\"),\n\t\t\tPackages: []string{\n\t\t\t\t\"IPBASE\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csrLarge = EquinixFunctions.GetNetworkDevicePlatform();\n\n    }\n}\n```\n```yaml\nvariables:\n  csrLarge:\n    Fn::Invoke:\n      Function: equinix:GetNetworkDevicePlatform\n      Arguments:\n        deviceType: CSR1000V\n        flavor: large\n        packages:\n          - IPBASE\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetNetworkDevicePlatform.\n",
                "properties": {
                    "coreCount": {
                        "type": "integer",
                        "description": "Number of CPU cores used to limit platform search results.\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Device type code\n"
                    },
                    "flavor": {
                        "type": "string",
                        "description": "Device platform flavor that determines number of CPU cores and memory.\nSupported values are: `small`, `medium`, `large`, `xlarge`.\n"
                    },
                    "licenseOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device licensing options to limit platform search result.\nSupported values are: `BYOL` (for Bring Your Own License), `Sub` (for license subscription).\n"
                    },
                    "managementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device management types to limit platform search results.\nSupported values are: `EQUINIX-CONFIGURED`, `SELF-CONFIGURED`.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of software package codes to limit platform search results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetNetworkDevicePlatform.\n",
                "properties": {
                    "coreCount": {
                        "type": "integer"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "flavor": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "licenseOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "managementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of memory provided by device platform.\n"
                    },
                    "memoryUnit": {
                        "type": "string",
                        "description": "Unit of memory provider by device platform.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "coreCount",
                    "deviceType",
                    "flavor",
                    "licenseOptions",
                    "managementTypes",
                    "memory",
                    "memoryUnit",
                    "packages",
                    "id"
                ]
            }
        },
        "equinix:index/getNetworkDeviceSoftware:GetNetworkDeviceSoftware": {
            "description": "Use this data source to get Equinix Network Edge device software details for a given\ndevice type. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Retrieve details for CSR1000V device software with latest path of 16.09 version\n// that supports IPBASE package\nconst csrLatest1609 = pulumi.output(equinix.GetNetworkDeviceSoftware({\n    deviceType: \"CSR1000V\",\n    mostRecent: true,\n    packages: [\"IPBASE\"],\n    versionRegex: \"^16.09.+\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncsr_latest1609 = equinix.get_network_device_software(device_type=\"CSR1000V\",\n    most_recent=True,\n    packages=[\"IPBASE\"],\n    version_regex=\"^16.09.+\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var csrLatest1609 = Output.Create(Equinix.GetNetworkDeviceSoftware.InvokeAsync(new Equinix.GetNetworkDeviceSoftwareArgs\n        {\n            DeviceType = \"CSR1000V\",\n            MostRecent = true,\n            Packages = \n            {\n                \"IPBASE\",\n            },\n            VersionRegex = \"^16.09.+\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetNetworkDeviceSoftware(ctx, \u0026GetNetworkDeviceSoftwareArgs{\n\t\t\tDeviceType: \"CSR1000V\",\n\t\t\tMostRecent: pulumi.BoolRef(true),\n\t\t\tPackages: []string{\n\t\t\t\t\"IPBASE\",\n\t\t\t},\n\t\t\tVersionRegex: pulumi.StringRef(\"^16.09.+\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csrLatest1609 = EquinixFunctions.GetNetworkDeviceSoftware();\n\n    }\n}\n```\n```yaml\nvariables:\n  csrLatest1609:\n    Fn::Invoke:\n      Function: equinix:GetNetworkDeviceSoftware\n      Arguments:\n        deviceType: CSR1000V\n        mostRecent: true\n        packages:\n          - IPBASE\n        versionRegex: ^16.09.+\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetNetworkDeviceSoftware.\n",
                "properties": {
                    "deviceType": {
                        "type": "string",
                        "description": "Code of a device type.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Boolean value to indicate that most recent version should be used *(in\ncase when more than one result is returned)*.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Limits returned versions to those that are supported by given software\npackage codes.\n"
                    },
                    "stable": {
                        "type": "boolean",
                        "description": "Boolean value to limit query results to stable versions only.\n"
                    },
                    "versionRegex": {
                        "type": "string",
                        "description": "A regex string to apply on returned versions and filter search\nresults.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetNetworkDeviceSoftware.\n",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Version release date.\n"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageName": {
                        "type": "string",
                        "description": "Software image name.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "releaseNotesLink": {
                        "type": "string",
                        "description": "Link to version release notes.\n"
                    },
                    "stable": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string",
                        "description": "Version status.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version number.\n"
                    },
                    "versionRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "date",
                    "deviceType",
                    "imageName",
                    "packages",
                    "releaseNotesLink",
                    "stable",
                    "status",
                    "version",
                    "id"
                ]
            }
        },
        "equinix:index/getNetworkDeviceType:GetNetworkDeviceType": {
            "description": "Use this data source to get Equinix Network Edge device type details. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Retrieve device type details of a Cisco router\n// Device type has to be available in DC and SV metros\nconst ciscoRouter = pulumi.output(equinix.GetNetworkDeviceType({\n    category: \"Router\",\n    metroCodes: [\n        \"DC\",\n        \"SV\",\n    ],\n    vendor: \"Cisco\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncisco_router = equinix.get_network_device_type(category=\"Router\",\n    metro_codes=[\n        \"DC\",\n        \"SV\",\n    ],\n    vendor=\"Cisco\")\n```\n```csharp\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ciscoRouter = Output.Create(Equinix.GetNetworkDeviceType.InvokeAsync(new Equinix.GetNetworkDeviceTypeArgs\n        {\n            Category = \"Router\",\n            MetroCodes = \n            {\n                \"DC\",\n                \"SV\",\n            },\n            Vendor = \"Cisco\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-equinix/sdk/go/equinix\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := equinix.GetNetworkDeviceType(ctx, \u0026GetNetworkDeviceTypeArgs{\n\t\t\tCategory: pulumi.StringRef(\"Router\"),\n\t\t\tMetroCodes: []string{\n\t\t\t\t\"DC\",\n\t\t\t\t\"SV\",\n\t\t\t},\n\t\t\tVendor: pulumi.StringRef(\"Cisco\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ciscoRouter = EquinixFunctions.GetNetworkDeviceType();\n\n    }\n}\n```\n```yaml\nvariables:\n  ciscoRouter:\n    Fn::Invoke:\n      Function: equinix:GetNetworkDeviceType\n      Arguments:\n        category: Router\n        metroCodes:\n          - DC\n          - SV\n        vendor: Cisco\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GetNetworkDeviceType.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Device type category. One of: `Router`, `Firewall`, `SDWAN`.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of metro codes where device type has to be available\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device type name.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetNetworkDeviceType.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string",
                        "description": "Device type short code, unique identifier of a network device type\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Device type textual description\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "code",
                    "description",
                    "metroCodes",
                    "name",
                    "vendor",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-equinix/sdk/go/equinix"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing equinix cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/equinix/terraform-provider-equinix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-equinix` repo](https://github.com/pulumi/pulumi-equinix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`equinix/terraform-provider-equinix` repo](https://github.com/equinix/terraform-provider-equinix/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/equinix/terraform-provider-equinix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-equinix` repo](https://github.com/pulumi/pulumi-equinix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`equinix/terraform-provider-equinix` repo](https://github.com/equinix/terraform-provider-equinix/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}